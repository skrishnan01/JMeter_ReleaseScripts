<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API-SSR" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">8</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="host" elementType="Argument">
              <stringProp name="Argument.name">host</stringProp>
              <stringProp name="Argument.value">${__P(host,stg2.rhnonprod.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="path" elementType="Argument">
              <stringProp name="Argument.name">path</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="env" elementType="Argument">
              <stringProp name="Argument.name">env</stringProp>
              <stringProp name="Argument.value">${__P(env,stg2)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_AEM_SSR" elementType="Cookie" testname="FEATURE_AEM_SSR">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="endpoint" elementType="Cookie" testname="endpoint">
              <stringProp name="Cookie.value">release</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">stg2.rhnonprod.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="TestPlan.comments">${host}</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="01_API-CG" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CGs.csv" enabled="true">
            <stringProp name="filename">CGs_ATG.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">siteId,CGId</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-CG-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/us/en/catalog/category/collections.jsp?categoryId=${CGId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
            <stringProp name="TestPlan.comments">/us/en/catalog/category/collections.jsp?categoryId=${CGId} ||/catalog/category/collections.jsp?cellBackground=false&amp;categoryId=${CGId}&amp;sale=false</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="02_API-PG" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PGs.csv" enabled="true">
            <stringProp name="filename">PGs_ATG.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">siteId,PGId,PGTerm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-PG-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/us/en/catalog/category/products.jsp?categoryId=${PGId}&amp;sale=false&amp;pgterm=category%3A${PGId}&amp;hasShellProducts=false</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
            <stringProp name="TestPlan.comments">/us/en/catalog/category/products.jsp?categoryId=${PGId}&amp;pgterm=RH+Ceiling+Lighting&amp;topCatId=cat160075&amp;parentCatId=cat1701013&amp;clientrender=true</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="03_API-PDP" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PDPs.csv" enabled="true">
            <stringProp name="filename">PDPs_ATG.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">siteId,productId</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="API-PDP-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <doubleProp>
            <name>throughput</name>
            <value>3.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GraphQL-CSR_Backup" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">300</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">1800</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="host" elementType="Argument">
              <stringProp name="Argument.name">host</stringProp>
              <stringProp name="Argument.value">${__P(host,stg2.rhnonprod.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="path" elementType="Argument">
              <stringProp name="Argument.name">path</stringProp>
              <stringProp name="Argument.value">rh-experience-layer-v1-cartcheckoutdev</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="env" elementType="Argument">
              <stringProp name="Argument.name">env</stringProp>
              <stringProp name="Argument.value">${__P(env,stg2)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_AEM_RENDER_CONTROL" elementType="Cookie" testname="FEATURE_AEM_RENDER_CONTROL">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_WISTIA_OPTIMIZATIONS" elementType="Cookie" testname="FEATURE_WISTIA_OPTIMIZATIONS">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="fusion_search" elementType="Cookie" testname="fusion_search">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="endpoint" elementType="Cookie" testname="endpoint">
              <stringProp name="Cookie.value">cartcheckoutdev</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
              <stringProp name="Cookie.value">false</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="x-request-id" elementType="Header">
              <stringProp name="Header.name">x-request-id</stringProp>
              <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Referer" elementType="Header">
              <stringProp name="Header.name">Referer</stringProp>
              <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
            </elementProp>
            <elementProp name="apollographql-client-name" elementType="Header">
              <stringProp name="Header.name">apollographql-client-name</stringProp>
              <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
            </elementProp>
            <elementProp name="x-operation" elementType="Header">
              <stringProp name="Header.name">x-operation</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="Client-Origin" elementType="Header">
              <stringProp name="Header.name">Client-Origin</stringProp>
              <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
            <elementProp name="authorization" elementType="Header">
              <stringProp name="Header.name">authorization</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="content-type" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.0_Homepage" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">none</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
                <collectionProp name="CookieManager.cookies">
                  <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="PROTECT_FEATURE_SSR" elementType="Cookie" testname="PROTECT_FEATURE_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="FEATURE_AEM_SSR" elementType="Cookie" testname="FEATURE_AEM_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
              </CookieManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.0_Homepage" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">none</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
                <collectionProp name="CookieManager.cookies">
                  <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="PROTECT_FEATURE_SSR" elementType="Cookie" testname="PROTECT_FEATURE_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="FEATURE_AEM_SSR" elementType="Cookie" testname="FEATURE_AEM_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain"></stringProp>
                    <stringProp name="Cookie.path"></stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
              </CookieManager>
              <hashTree/>
            </hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="false">
              <intProp name="MAX_THREAD_NUMBER">6</intProp>
              <boolProp name="PARENT_SAMPLE">true</boolProp>
              <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.1_AboveNavPromo" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">AboveNavPromo</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.2_GetAemModel" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/home&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/home&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.3_GlobalStylesheet" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.4_GetUserForSession" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetUserForSession</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: false
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: false
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="email" enabled="true">
                  <stringProp name="TestPlan.comments">e05e4753a0884a61a7ec5aa1e4b03c93@some.com</stringProp>
                  <stringProp name="JSONPostProcessor.referenceNames">email</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.email</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="currentCartId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">currentCartId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.currentCartId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhuid</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="firstName" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">firstName</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.firstName</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="lastName" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">lastName</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.lastName</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.5_CartProjection" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;skk@yopmail.com&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;skk@yopmail.com&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.6_GetAemModel" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.7_CatalogNavigation" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CollectionGalleryIds" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">CollectionGalleryIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories[0].childCategories[?(@.targetUrl contains &apos;collections&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ProductGalleryIds" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ProductGalleryIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories..[?(@.targetUrl contains &apos;products&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="CollectionGalleryIds" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">int CollectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger()
int ProductGalleryIds_matchNr = vars.get(&quot;ProductGalleryIds_matchNr&quot;).toInteger()

Random random = new Random()
int CollectionGalleryIds_index = random.nextInt(CollectionGalleryIds_matchNr) + 1
int ProductGalleryIds_index = random.nextInt(ProductGalleryIds_matchNr) + 1

String CollectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot;+CollectionGalleryIds_index)
String ProductGalleryId = vars.get(&quot;ProductGalleryIds_&quot;+ProductGalleryIds_index)
//log.info(&quot;CollectionGalleryId: &quot;+CollectionGalleryId)
//log.info(&quot;ProductGalleryId: &quot;+ProductGalleryId)
vars.put(&quot;CollectionGalleryId&quot;,CollectionGalleryId)
vars.put(&quot;ProductGalleryIds&quot;,ProductGalleryId)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.8_WORHMenu" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.9_SaleCatalogNavigation" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.0_Auth" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/staging/protocol/openid-connect/auth" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">rh-mobile-frontend</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://stg2.rhnonprod.com/silent-check-sso.html</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="state" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">state</stringProp>
                    <stringProp name="Argument.value">${__UUID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_mode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_mode</stringProp>
                    <stringProp name="Argument.value">fragment</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">code</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">openid</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nonce" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nonce</stringProp>
                    <stringProp name="Argument.value">${__UUID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="prompt" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">prompt</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/realms/staging/protocol/openid-connect/auth?</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">https://rh.com/silent-check-sso.html</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">iframe</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">NEWEXP=true; ui_asset_path=/rh-mobile-frontend-v1-shark/; endpoint=shark; FEATURE_INTERNATIONAL=true; FEATURE_SUPPRESS_UK=false; FEATURE_AEM_RENDER_CONTROL=true; FEATURE_WISTIA_OPTIMIZATIONS=true; fusion_search=true; PF_EXP=DESKTOP; NEWX0422=true</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Ch-Ua" elementType="Header">
                    <stringProp name="Header.name">Sec-Ch-Ua</stringProp>
                    <stringProp name="Header.value">&quot;Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;115&quot;, &quot;Chromium&quot;;v=&quot;115&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Ch-Ua-Mobile" elementType="Header">
                    <stringProp name="Header.name">Sec-Ch-Ua-Mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Ch-Ua-Platform" elementType="Header">
                    <stringProp name="Header.name">Sec-Ch-Ua-Platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value"> iframe</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value"> same-site</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="3.0_Collection Gallery" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CollectionGalleryId" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">CG.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">CollectionGalleryId</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.1_AboveNavPromo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">AboveNavPromo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">AboveNavPromo</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-AboveNavPromo</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.2_Catalog_Navigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CollectionGalleryIds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CollectionGalleryIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories[*].childCategories[?(@.targetUrl contains &apos;collections&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ProductGalleryIds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ProductGalleryIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories..[?(@.targetUrl contains &apos;products&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="CollectionGalleryIds" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">int CollectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger()
int ProductGalleryIds_matchNr = vars.get(&quot;ProductGalleryIds_matchNr&quot;).toInteger()

Random random = new Random()
int CollectionGalleryIds_index = random.nextInt(CollectionGalleryIds_matchNr) + 1
int ProductGalleryIds_index = random.nextInt(ProductGalleryIds_matchNr) + 1

String CollectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot;+CollectionGalleryIds_index)
String ProductGalleryId = vars.get(&quot;ProductGalleryIds_&quot;+ProductGalleryIds_index)
//log.info(&quot;CollectionGalleryId: &quot;+CollectionGalleryId)
//log.info(&quot;ProductGalleryId: &quot;+ProductGalleryId)
vars.put(&quot;CollectionGalleryId&quot;,CollectionGalleryId)
vars.put(&quot;ProductGalleryIds&quot;,ProductGalleryId)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev-Perf_CG-Catalog_Navigation_API</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.3_WORHMenu" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">WORHMenu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-WORHMenu-1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.4_PromoDisplayContent" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">PromoDisplayContent</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;context&quot;: &quot;CategorySitewideBanner&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">PromoDisplayContent</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;context&quot;: &quot;CategorySitewideBanner&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-PromoDisplayContent</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.5_CollectionGallery" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CollectionGallery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CollectionGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $countryCode: String, $userType: String, $siteId: String, $measureSystem: String, $locale: String) { collectionGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode countryCode: $countryCode userType: $userType siteId: $siteId measureSystem: $measureSystem locale: $locale ) { amountRemaining nextStart collectionGallery { ...CollectionCategoryFields __typename } __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubtitle3 bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts stockInfo { totalSkus inStock inStockQty __typename } stockedDeliveryMessage specialOrderDeliveryMessage additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } headerConfig { title template promoDisplay { promoDisplay { banners { type value __typename } dynamicText { attribute value __typename } media { media __typename } __typename } __typename } __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${CollectionGalleryId}&quot;,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;count&quot;: 15,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;US&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CollectionGallery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CollectionGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $countryCode: String, $userType: String, $siteId: String, $measureSystem: String, $locale: String) { collectionGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode countryCode: $countryCode userType: $userType siteId: $siteId measureSystem: $measureSystem locale: $locale ) { amountRemaining nextStart collectionGallery { ...CollectionCategoryFields __typename } __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubtitle3 bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts stockInfo { totalSkus inStock inStockQty __typename } stockedDeliveryMessage specialOrderDeliveryMessage additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } headerConfig { title template promoDisplay { promoDisplay { banners { type value __typename } dynamicText { attribute value __typename } media { media __typename } __typename } __typename } __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${CollectionGalleryId}&quot;,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;count&quot;: 15,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;US&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ProductGalleryId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">ProductGalleryId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.collectionGallery.collectionGallery.[*].[?(@.hasProducts == true)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="ProductGalleryId" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Random;

String productGalleryId = vars.get(&quot;ProductGalleryId&quot;);
Random random = new Random();

if (productGalleryId.equals(&quot;NA&quot;)) {
    int collectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger();
    int productGalleryIds_matchNr = vars.get(&quot;ProductGalleryIds_matchNr&quot;).toInteger();
    int collectionGalleryIds_index = random.nextInt(collectionGalleryIds_matchNr) + 1;
    int productGalleryIds_index = random.nextInt(productGalleryIds_matchNr) + 1;
    String collectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot; + collectionGalleryIds_index);
    productGalleryId = vars.get(&quot;ProductGalleryIds_&quot; + productGalleryIds_index);
    vars.put(&quot;CollectionGalleryId&quot;, collectionGalleryId);
    vars.put(&quot;ProductGalleryId&quot;, productGalleryId);
} else {
    int collectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger();
    int collectionGalleryIds_index = random.nextInt(collectionGalleryIds_matchNr) + 1;
    String collectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot; + collectionGalleryIds_index);
    vars.put(&quot;CollectionGalleryId&quot;, collectionGalleryId);
}

//log.info(&quot;CollectionGalleryId: &quot; + vars.get(&quot;CollectionGalleryId&quot;));
//log.info(&quot;ProductGalleryId: &quot; + vars.get(&quot;ProductGalleryId&quot;));</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/location-select</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">CollectionGallery</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/category/collections.jsp?categoryId=${CollectionGalleryId}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.6_GetAemModel" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/collections&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/collections&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-GetAemModel-1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.7_GlobalStylesheet" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-GlobalStylesheet</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.8_GetUserForSession" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: false
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: false
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="email" enabled="true">
              <stringProp name="TestPlan.comments">e05e4753a0884a61a7ec5aa1e4b03c93@some.com</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">email</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.email</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="currentCartId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="firstName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">firstName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.firstName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="lastName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">lastName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.lastName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-GetUserForSession</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.9_SaleCatalogNavigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-CatalogNavigation-2</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.10_GetAemModel" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-GetAemModel-2</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.11_CartProjection" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-CartProjection</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <longProp name="interval_grouping">500</longProp>
            <boolProp name="graph_aggregated">false</boolProp>
            <stringProp name="include_sample_labels"></stringProp>
            <stringProp name="exclude_sample_labels"></stringProp>
            <stringProp name="start_offset"></stringProp>
            <stringProp name="end_offset"></stringProp>
            <boolProp name="include_checkbox_state">false</boolProp>
            <boolProp name="exclude_checkbox_state">false</boolProp>
          </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4.0_Product Gallery" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ProductGalleryId" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">PG.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">ProductGalleryId</stringProp>
          </CSVDataSet>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.1_AboveNavPromo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">AboveNavPromo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.2_CatalogNavigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.3_WORHMenu-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">WORHMenu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.4_Search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Search&quot;,&quot;variables&quot;:{
  &quot;ntt&quot;: &quot;category:${ProductGalleryId}&quot;,
  &quot;nrpp&quot;: 48,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
},&quot;query&quot;:&quot;query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String) {\n  search(\n    ntt: $ntt\n    contentType: $contentType\n    n: $n\n    nrpp: $nrpp\n    ns: $ns\n    no: $no\n    country: $country\n    currencyCode: $currencyCode\n    userType: $userType\n    site: $site\n    infiniteScroll: $infiniteScroll\n    categoryId: $categoryId\n    sale: $sale\n    locale: $locale\n  ) {\n    redirectUrl\n    stocked\n    zeroResults {\n      ...ZeroResultFields\n      __typename\n    }\n    adjustedSearches {\n      ...AdjustedSearchFields\n      __typename\n    }\n    sizeFacets\n    materialFacets\n    resultList {\n      lastRecNum\n      firstRecNum\n      recsPerPage\n      totalNumRecs\n      records {\n        recordType\n        product {\n          altImageUrl\n          imageUrl\n          galleryDescription\n          alternateImages {\n            imageUrl\n            __typename\n          }\n          displayName\n          anchor\n          repositoryId\n          colorizable\n          imageFlip\n          newProduct\n          emptyProduct\n          metaProductComponent\n          removeFromBrowse\n          pgCrop\n          pgCropRules\n          rhr\n          pdpImageLayout\n          skuPriceInfo {\n            fullSkuId\n            currencySymbol\n            listPrice\n            salePrice\n            memberPrice\n            tradePrice\n            contractPrice\n            nextgenDriven\n            onSale\n            onClearance\n            showMemberPrice\n            skuOptions {\n              id\n              optionType\n              label\n              __typename\n            }\n            __typename\n          }\n          metaProduct\n          priceInfo {\n            currencySymbol\n            isCustomProduct\n            isRetail\n            isUnavailable\n            priceFilter\n            isSale\n            priceMessage\n            priceRange {\n              allOnSale\n              assetId\n              currencyApplied\n              highestFullSkuId\n              highestPaidFullSkuId\n              lowestFullSkuId\n              lowestPaidFullSkuId\n              noPriceRange\n              onClearance\n              onSale\n              onSaleAndOnClearance\n              previewMode\n              salePriceListId\n              tradeBest\n              __typename\n            }\n            rangeType\n            showMemberPrice\n            strikePriceLabel\n            priceMessagePrice\n            listPrices\n            listPriceLabel\n            salePrices\n            salePriceLabel\n            memberPrices\n            memberPriceLabel\n            lowestMemberPrice\n            lowestSalePrice\n            overridePriceLabel\n            skulowestListPrice\n            skulowestMemberPrice\n            skulowestSalePrice\n            nextGenDriven\n            nextGenDrivenOnSale\n            __typename\n          }\n          swatchInfo {\n            swatchesToDisplay {\n              imageRef\n              imageUrl\n              swatchId\n              displayName\n              __typename\n            }\n            numAdditionalSwatchesAvailable\n            numAdditionalSaleSwatchesAvailable\n            __typename\n          }\n          galleryDescription\n          percentSaleSkus\n          lowestskuPriceInfo {\n            skuListSaleprice\n            skuMemberSalePrice\n            skuSalePrice\n            __typename\n          }\n          __typename\n        }\n        sku {\n          fullSkuId\n          __typename\n        }\n        __typename\n      }\n      sortOptions {\n        navigationState\n        label\n        selected\n        __typename\n      }\n      __typename\n    }\n    resultTabs {\n      ...ResultTab\n      __typename\n    }\n    booleanFacets {\n      ...RefinementMenu\n      __typename\n    }\n    refinementMenus {\n      ...RefinementMenu\n      __typename\n    }\n    otherInfo {\n      ...OtherInfo\n      __typename\n    }\n    instructionResultList {\n      ...InstructionResultList\n      __typename\n    }\n    productCarousel {\n      ...ProductCarousel\n      __typename\n    }\n    promoDisplay {\n      ...PromoDisplayFields\n      __typename\n    }\n    searchQueryId\n    filterQueries\n    skuSearch\n    q\n    sku_siteId\n    ruleExecuted\n    saleMemberInfo {\n      ...SaleMemberInfoFields\n      __typename\n    }\n    ATGCollectionGalleryInfo {\n      collectionGallery {\n        ...ATGCollectionGalleryInfo\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PromoDisplayFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  subItems {\n    ...SubItem\n    __typename\n  }\n  template\n  text\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n  title\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Layer on PromoDisplayLayer {\n  __typename\n  layerType\n  label\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  dynamicText {\n    verticalAlign\n    horizontalAlign\n    classes\n    promoId\n    styles\n    topCoordinate\n    rightCoordinate\n    bottomCoordinate\n    leftCoordinate\n    width\n    modalType\n    __typename\n  }\n  htmlText\n  shortText\n  link\n  modal\n  path\n}\n\nfragment DynamicText on PromoDisplayDynamicText {\n  __typename\n  layout\n  alt\n  width\n  style\n  height\n  coords\n  productIds\n  categoryId\n  wistia\n  transitionStartStyles\n  transitionEndStyles\n  transitionInDelay\n  exclusionParam\n  modalType\n  addbanner\n  autoplay\n  slidetime\n  easing\n  pauseOnHover\n  effecttime\n  resetOffScreen\n}\n\nfragment CatalogAsset on PromoDisplayCatalogAsset {\n  __typename\n  skuId\n  categoryId\n  productId\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  quickLook\n  id\n}\n\nfragment SubItem on PromoDisplay {\n  __typename\n  ...SubItemFields\n  subItems {\n    ...SubItemFields\n    __typename\n  }\n}\n\nfragment SubItemFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  template\n  text\n  title\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n}\n\nfragment CategoryProductFields on CategoryProduct {\n  __typename\n  id\n  displayName\n  imageUrl\n  imageFlip\n  altImages {\n    imageUrl\n    __typename\n  }\n  galleryDescription\n  newProduct\n  type\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  uxAttributes {\n    triggerSwatchImage\n    productType\n    giftCert\n    __typename\n  }\n  customProduct\n  pgCrop\n  pgCropRules\n  rhr\n  pdpImageLayout\n  seoDescription\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n  priceRange {\n    memberLowestListPrice\n    __typename\n  }\n}\n\nfragment ZeroResultFields on SearchZeroResults {\n  __typename\n  searchTerms\n  otherBrandSearchResults {\n    brandResultCount\n    brandName\n    brandLink {\n      navigationState\n      siteState {\n        companyCode\n        properties {\n          brandName\n          __typename\n        }\n        __typename\n      }\n      host\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AdjustedSearchFields on AdjustedSearch {\n  __typename\n  autoPhrased\n  adjustedTerms\n  spellCorrected\n  originalTerms\n}\n\nfragment InstructionResultList on InstructionResultList {\n  __typename\n  firstRecNum\n  lastRecNum\n  recsPerPage\n  totalNumRecs\n  name\n  records {\n    productDisplayName\n    link\n    label\n    __typename\n  }\n}\n\nfragment OtherInfo on SearchOtherInfo {\n  __typename\n  results {\n    displayName\n    link {\n      navigationState\n      siteState {\n        properties {\n          brandName\n          __typename\n        }\n        companyCode\n        __typename\n      }\n      host\n      __typename\n    }\n    resultCount\n    selected\n    __typename\n  }\n}\n\nfragment ResultTab on SearchResultTab {\n  __typename\n  companyCode\n  resultCount\n  displayName\n  link {\n    navigationState\n    siteState {\n      properties {\n        brandName\n        __typename\n      }\n      companyCode\n      __typename\n    }\n    host\n    __typename\n  }\n  selected\n}\n\nfragment RefinementMenu on SearchRefinementMenu {\n  __typename\n  displayName\n  name\n  ancestors {\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    host\n    label\n    __typename\n  }\n  dimensionName\n  numRefinementsToShowInitially\n  multiSelect\n  refinements {\n    ...RefinementLink\n    __typename\n  }\n  key\n}\n\nfragment RefinementLink on SearchRefinementLink {\n  ... on SearchRefinementPlainLink {\n    __typename\n    navigationState\n    label\n    localeLabel\n    count\n    multiSelect\n    siteState {\n      companyCode\n      __typename\n    }\n    isSelected\n  }\n  ... on SearchRefinementImageLink {\n    __typename\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    label\n    count\n    multiSelect\n    isSelected\n  }\n  __typename\n}\n\nfragment ProductCarousel on SearchProductCarousel {\n  __typename\n  maxRecordsBasedOnPrevSearch\n  records {\n    recordType\n    product {\n      altImageUrl\n      imageUrl\n      displayName\n      repositoryId\n      colorizable\n      removeFromBrowse\n      priceInfo {\n        currencySymbol\n        isCustomProduct\n        isRetail\n        isUnavailable\n        priceFilter\n        isSale\n        priceMessage\n        priceRange {\n          allOnSale\n          assetId\n          currencyApplied\n          highestFullSkuId\n          highestPaidFullSkuId\n          lowestFullSkuId\n          lowestPaidFullSkuId\n          noPriceRange\n          onClearance\n          onSale\n          onSaleAndOnClearance\n          previewMode\n          salePriceListId\n          tradeBest\n          __typename\n        }\n        rangeType\n        showMemberPrice\n        strikePriceLabel\n        listPrices\n        listPriceLabel\n        salePrices\n        salePriceLabel\n        memberPrices\n        memberPriceLabel\n        __typename\n      }\n      swatchInfo {\n        swatchesToDisplay {\n          imageUrl\n          swatchId\n          __typename\n        }\n        numAdditionalSwatchesAvailable\n        numAdditionalSaleSwatchesAvailable\n        __typename\n      }\n      __typename\n    }\n    sku {\n      fullSkuId\n      __typename\n    }\n    __typename\n  }\n  title\n  name\n}\n\nfragment SaleMemberInfoFields on SaleMemberInfoResponse {\n  __typename\n  pgMemberSavings {\n    ...MemberSavingsFields\n    __typename\n  }\n  pgSaleStats {\n    ...SaleStatsFields\n    __typename\n  }\n  headerConfig {\n    title\n    template\n    promoDisplay {\n      promoDisplay {\n        banners {\n          type\n          value\n          __typename\n        }\n        dynamicText {\n          attribute\n          value\n          __typename\n        }\n        media {\n          media\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment MemberSavingsFields on PgMemberSaving {\n  __typename\n  count\n  memberSavingsMin\n  memberSavingsMax\n}\n\nfragment SaleStatsFields on PgSaleStats {\n  __typename\n  nonSaleSkus\n  percentSaleSkus\n  saleSkus\n  totalSkus\n}\n\nfragment ATGCollectionGalleryInfo on CollectionCategory {\n  __typename\n  id\n  displayName\n  forceSaleFlag\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">Search</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String) {
  search(
    ntt: $ntt
    contentType: $contentType
    n: $n
    nrpp: $nrpp
    ns: $ns
    no: $no
    country: $country
    currencyCode: $currencyCode
    userType: $userType
    site: $site
    infiniteScroll: $infiniteScroll
    categoryId: $categoryId
    sale: $sale
    locale: $locale
  ) {
    redirectUrl
    stocked
    zeroResults {
      ...ZeroResultFields
      __typename
    }
    adjustedSearches {
      ...AdjustedSearchFields
      __typename
    }
    sizeFacets
    materialFacets
    resultList {
      lastRecNum
      firstRecNum
      recsPerPage
      totalNumRecs
      records {
        recordType
        product {
          altImageUrl
          imageUrl
          galleryDescription
          alternateImages {
            imageUrl
            __typename
          }
          displayName
          anchor
          repositoryId
          colorizable
          imageFlip
          newProduct
          emptyProduct
          metaProductComponent
          removeFromBrowse
          pgCrop
          pgCropRules
          rhr
          pdpImageLayout
          skuPriceInfo {
            fullSkuId
            currencySymbol
            listPrice
            salePrice
            memberPrice
            tradePrice
            contractPrice
            nextgenDriven
            onSale
            onClearance
            showMemberPrice
            skuOptions {
              id
              optionType
              label
              __typename
            }
            __typename
          }
          metaProduct
          priceInfo {
            currencySymbol
            isCustomProduct
            isRetail
            isUnavailable
            priceFilter
            isSale
            priceMessage
            priceRange {
              allOnSale
              assetId
              currencyApplied
              highestFullSkuId
              highestPaidFullSkuId
              lowestFullSkuId
              lowestPaidFullSkuId
              noPriceRange
              onClearance
              onSale
              onSaleAndOnClearance
              previewMode
              salePriceListId
              tradeBest
              __typename
            }
            rangeType
            showMemberPrice
            strikePriceLabel
            priceMessagePrice
            listPrices
            listPriceLabel
            salePrices
            salePriceLabel
            memberPrices
            memberPriceLabel
            lowestMemberPrice
            lowestSalePrice
            overridePriceLabel
            skulowestListPrice
            skulowestMemberPrice
            skulowestSalePrice
            nextGenDriven
            nextGenDrivenOnSale
            __typename
          }
          swatchInfo {
            swatchesToDisplay {
              imageRef
              imageUrl
              swatchId
              displayName
              __typename
            }
            numAdditionalSwatchesAvailable
            numAdditionalSaleSwatchesAvailable
            __typename
          }
          galleryDescription
          percentSaleSkus
          lowestskuPriceInfo {
            skuListSaleprice
            skuMemberSalePrice
            skuSalePrice
            __typename
          }
          __typename
        }
        sku {
          fullSkuId
          __typename
        }
        __typename
      }
      sortOptions {
        navigationState
        label
        selected
        __typename
      }
      __typename
    }
    resultTabs {
      ...ResultTab
      __typename
    }
    booleanFacets {
      ...RefinementMenu
      __typename
    }
    refinementMenus {
      ...RefinementMenu
      __typename
    }
    otherInfo {
      ...OtherInfo
      __typename
    }
    instructionResultList {
      ...InstructionResultList
      __typename
    }
    productCarousel {
      ...ProductCarousel
      __typename
    }
    promoDisplay {
      ...PromoDisplayFields
      __typename
    }
    searchQueryId
    filterQueries
    skuSearch
    q
    sku_siteId
    ruleExecuted
    saleMemberInfo {
      ...SaleMemberInfoFields
      __typename
    }
    ATGCollectionGalleryInfo {
      collectionGallery {
        ...ATGCollectionGalleryInfo
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment PromoDisplayFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  subItems {
    ...SubItem
    __typename
  }
  template
  text
  imageUrl
  linkType
  linkUrl
  targetUrl
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
  title
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
}

fragment Layer on PromoDisplayLayer {
  __typename
  layerType
  label
  leftCoordinate
  topCoordinate
  flyoutDirection
  dynamicText {
    verticalAlign
    horizontalAlign
    classes
    promoId
    styles
    topCoordinate
    rightCoordinate
    bottomCoordinate
    leftCoordinate
    width
    modalType
    __typename
  }
  htmlText
  shortText
  link
  modal
  path
}

fragment DynamicText on PromoDisplayDynamicText {
  __typename
  layout
  alt
  width
  style
  height
  coords
  productIds
  categoryId
  wistia
  transitionStartStyles
  transitionEndStyles
  transitionInDelay
  exclusionParam
  modalType
  addbanner
  autoplay
  slidetime
  easing
  pauseOnHover
  effecttime
  resetOffScreen
}

fragment CatalogAsset on PromoDisplayCatalogAsset {
  __typename
  skuId
  categoryId
  productId
  leftCoordinate
  topCoordinate
  flyoutDirection
  quickLook
  id
}

fragment SubItem on PromoDisplay {
  __typename
  ...SubItemFields
  subItems {
    ...SubItemFields
    __typename
  }
}

fragment SubItemFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  template
  text
  title
  imageUrl
  linkType
  linkUrl
  targetUrl
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
}

fragment CategoryProductFields on CategoryProduct {
  __typename
  id
  displayName
  imageUrl
  imageFlip
  altImages {
    imageUrl
    __typename
  }
  galleryDescription
  newProduct
  type
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  uxAttributes {
    triggerSwatchImage
    productType
    giftCert
    __typename
  }
  customProduct
  pgCrop
  pgCropRules
  rhr
  pdpImageLayout
  seoDescription
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
  priceRange {
    memberLowestListPrice
    __typename
  }
}

fragment ZeroResultFields on SearchZeroResults {
  __typename
  searchTerms
  otherBrandSearchResults {
    brandResultCount
    brandName
    brandLink {
      navigationState
      siteState {
        companyCode
        properties {
          brandName
          __typename
        }
        __typename
      }
      host
      __typename
    }
    __typename
  }
}

fragment AdjustedSearchFields on AdjustedSearch {
  __typename
  autoPhrased
  adjustedTerms
  spellCorrected
  originalTerms
}

fragment InstructionResultList on InstructionResultList {
  __typename
  firstRecNum
  lastRecNum
  recsPerPage
  totalNumRecs
  name
  records {
    productDisplayName
    link
    label
    __typename
  }
}

fragment OtherInfo on SearchOtherInfo {
  __typename
  results {
    displayName
    link {
      navigationState
      siteState {
        properties {
          brandName
          __typename
        }
        companyCode
        __typename
      }
      host
      __typename
    }
    resultCount
    selected
    __typename
  }
}

fragment ResultTab on SearchResultTab {
  __typename
  companyCode
  resultCount
  displayName
  link {
    navigationState
    siteState {
      properties {
        brandName
        __typename
      }
      companyCode
      __typename
    }
    host
    __typename
  }
  selected
}

fragment RefinementMenu on SearchRefinementMenu {
  __typename
  displayName
  name
  ancestors {
    navigationState
    siteState {
      companyCode
      __typename
    }
    host
    label
    __typename
  }
  dimensionName
  numRefinementsToShowInitially
  multiSelect
  refinements {
    ...RefinementLink
    __typename
  }
  key
}

fragment RefinementLink on SearchRefinementLink {
  ... on SearchRefinementPlainLink {
    __typename
    navigationState
    label
    localeLabel
    count
    multiSelect
    siteState {
      companyCode
      __typename
    }
    isSelected
  }
  ... on SearchRefinementImageLink {
    __typename
    navigationState
    siteState {
      companyCode
      __typename
    }
    label
    count
    multiSelect
    isSelected
  }
  __typename
}

fragment ProductCarousel on SearchProductCarousel {
  __typename
  maxRecordsBasedOnPrevSearch
  records {
    recordType
    product {
      altImageUrl
      imageUrl
      displayName
      repositoryId
      colorizable
      removeFromBrowse
      priceInfo {
        currencySymbol
        isCustomProduct
        isRetail
        isUnavailable
        priceFilter
        isSale
        priceMessage
        priceRange {
          allOnSale
          assetId
          currencyApplied
          highestFullSkuId
          highestPaidFullSkuId
          lowestFullSkuId
          lowestPaidFullSkuId
          noPriceRange
          onClearance
          onSale
          onSaleAndOnClearance
          previewMode
          salePriceListId
          tradeBest
          __typename
        }
        rangeType
        showMemberPrice
        strikePriceLabel
        listPrices
        listPriceLabel
        salePrices
        salePriceLabel
        memberPrices
        memberPriceLabel
        __typename
      }
      swatchInfo {
        swatchesToDisplay {
          imageUrl
          swatchId
          __typename
        }
        numAdditionalSwatchesAvailable
        numAdditionalSaleSwatchesAvailable
        __typename
      }
      __typename
    }
    sku {
      fullSkuId
      __typename
    }
    __typename
  }
  title
  name
}

fragment SaleMemberInfoFields on SaleMemberInfoResponse {
  __typename
  pgMemberSavings {
    ...MemberSavingsFields
    __typename
  }
  pgSaleStats {
    ...SaleStatsFields
    __typename
  }
  headerConfig {
    title
    template
    promoDisplay {
      promoDisplay {
        banners {
          type
          value
          __typename
        }
        dynamicText {
          attribute
          value
          __typename
        }
        media {
          media
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment MemberSavingsFields on PgMemberSaving {
  __typename
  count
  memberSavingsMin
  memberSavingsMax
}

fragment SaleStatsFields on PgSaleStats {
  __typename
  nonSaleSkus
  percentSaleSkus
  saleSkus
  totalSkus
}

fragment ATGCollectionGalleryInfo on CollectionCategory {
  __typename
  id
  displayName
  forceSaleFlag
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;ntt&quot;: &quot;category:${ProductGalleryId}&quot;,
  &quot;nrpp&quot;: 48,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">${ProductGalleryId}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/location-select</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">Search</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/category/products.jsp?categoryId=${ProductGalleryId}&amp;sale=false&amp;parentCatId=cat15790016&amp;pgterm=category%3A${ProductGalleryId}&amp;fromCG=true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.5_ProductGallery" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">ProductGallery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query ProductGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $siteId: String, $measureSystem: String, $countryCode: String, $locale: String, $parentCatId: String) { productGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode siteId: $siteId measureSystem: $measureSystem locale: $locale countryCode: $countryCode parentCatId: $parentCatId ) { amountRemaining nextStart categoryLayout productGallery { ... on CollectionCategory { ...CollectionCategoryFields isAnchor(categoryId: $categoryId, filter: $filter) __typename } ... on CategoryProduct { ...CategoryProductFields __typename } __typename } __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } headerConfig { title template promoDisplay { promoDisplay { banners { type value __typename } dynamicText { attribute value __typename } media { media __typename } __typename } __typename } __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ProductGallery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ProductGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $siteId: String, $measureSystem: String, $countryCode: String, $locale: String, $parentCatId: String) { productGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode siteId: $siteId measureSystem: $measureSystem locale: $locale countryCode: $countryCode parentCatId: $parentCatId ) { amountRemaining nextStart categoryLayout productGallery { ... on CollectionCategory { ...CollectionCategoryFields isAnchor(categoryId: $categoryId, filter: $filter) __typename } ... on CategoryProduct { ...CategoryProductFields __typename } __typename } __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } headerConfig { title template promoDisplay { promoDisplay { banners { type value __typename } dynamicText { attribute value __typename } media { media __typename } __typename } __typename } __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="productIds" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">productIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productGallery.productGallery.[*].[?(@.type == &apos;product&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              <stringProp name="TestPlan.comments">$.data.productGallery.productGallery.[*].[?(@.type == &apos;product&apos;)].id</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="productId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productGallery.productGallery[2].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              <stringProp name="TestPlan.comments">$.data.productGallery.productGallery.[*].[?(@.type == &apos;product&apos;)].id</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.6_GetAemModel-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/products&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/products&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.7_GlobalStylesheet" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.8_GetUserForSession" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="currentCartId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.9_SaleCatalogNavigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.10_GetAemModel-2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.13_CartProjection" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.14_GetBrandSubscriptionsByEmail" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <longProp name="interval_grouping">500</longProp>
            <boolProp name="graph_aggregated">false</boolProp>
            <stringProp name="include_sample_labels"></stringProp>
            <stringProp name="exclude_sample_labels"></stringProp>
            <stringProp name="start_offset"></stringProp>
            <stringProp name="end_offset"></stringProp>
            <boolProp name="include_checkbox_state">false</boolProp>
            <boolProp name="exclude_checkbox_state">false</boolProp>
          </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="5.0_Search" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PGTerm" enabled="true">
            <stringProp name="filename">pgterms.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">pgterm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.1_GetUserForSession" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.2_AboveNavPromo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">AboveNavPromo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.3_GetAemModel-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.4_CatalogNavigation-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.5_WORHMenu-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">WORHMenu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.6_WORHMenu-2" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">WORHMenu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.7_GetAemModel-2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.8_Search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Search&quot;,&quot;variables&quot;:{
  &quot;ntt&quot;: &quot;${pgterm}&quot;,
  &quot;nrpp&quot;: 48,
  &quot;ns&quot;: &quot;product.sale|1&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
},&quot;query&quot;:&quot;query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String) {\n  search(\n    ntt: $ntt\n    contentType: $contentType\n    n: $n\n    nrpp: $nrpp\n    ns: $ns\n    no: $no\n    country: $country\n    currencyCode: $currencyCode\n    userType: $userType\n    site: $site\n    infiniteScroll: $infiniteScroll\n    categoryId: $categoryId\n    sale: $sale\n    locale: $locale\n  ) {\n    redirectUrl\n    stocked\n    zeroResults {\n      ...ZeroResultFields\n      __typename\n    }\n    adjustedSearches {\n      ...AdjustedSearchFields\n      __typename\n    }\n    sizeFacets\n    materialFacets\n    resultList {\n      lastRecNum\n      firstRecNum\n      recsPerPage\n      totalNumRecs\n      records {\n        recordType\n        product {\n          altImageUrl\n          imageUrl\n          galleryDescription\n          alternateImages {\n            imageUrl\n            __typename\n          }\n          displayName\n          anchor\n          repositoryId\n          colorizable\n          imageFlip\n          newProduct\n          emptyProduct\n          metaProductComponent\n          removeFromBrowse\n          pgCrop\n          pgCropRules\n          rhr\n          pdpImageLayout\n          skuPriceInfo {\n            fullSkuId\n            currencySymbol\n            listPrice\n            salePrice\n            memberPrice\n            tradePrice\n            contractPrice\n            nextgenDriven\n            onSale\n            onClearance\n            showMemberPrice\n            skuOptions {\n              id\n              optionType\n              label\n              __typename\n            }\n            __typename\n          }\n          metaProduct\n          priceInfo {\n            currencySymbol\n            isCustomProduct\n            isRetail\n            isUnavailable\n            priceFilter\n            isSale\n            priceMessage\n            priceRange {\n              allOnSale\n              assetId\n              currencyApplied\n              highestFullSkuId\n              highestPaidFullSkuId\n              lowestFullSkuId\n              lowestPaidFullSkuId\n              noPriceRange\n              onClearance\n              onSale\n              onSaleAndOnClearance\n              previewMode\n              salePriceListId\n              tradeBest\n              __typename\n            }\n            rangeType\n            showMemberPrice\n            strikePriceLabel\n            priceMessagePrice\n            listPrices\n            listPriceLabel\n            salePrices\n            salePriceLabel\n            memberPrices\n            memberPriceLabel\n            lowestMemberPrice\n            lowestSalePrice\n            overridePriceLabel\n            skulowestListPrice\n            skulowestMemberPrice\n            skulowestSalePrice\n            nextGenDriven\n            nextGenDrivenOnSale\n            __typename\n          }\n          swatchInfo {\n            swatchesToDisplay {\n              imageRef\n              imageUrl\n              swatchId\n              displayName\n              __typename\n            }\n            numAdditionalSwatchesAvailable\n            numAdditionalSaleSwatchesAvailable\n            __typename\n          }\n          galleryDescription\n          percentSaleSkus\n          lowestskuPriceInfo {\n            skuListSaleprice\n            skuMemberSalePrice\n            skuSalePrice\n            __typename\n          }\n          __typename\n        }\n        sku {\n          fullSkuId\n          __typename\n        }\n        __typename\n      }\n      sortOptions {\n        navigationState\n        label\n        selected\n        __typename\n      }\n      __typename\n    }\n    resultTabs {\n      ...ResultTab\n      __typename\n    }\n    booleanFacets {\n      ...RefinementMenu\n      __typename\n    }\n    refinementMenus {\n      ...RefinementMenu\n      __typename\n    }\n    otherInfo {\n      ...OtherInfo\n      __typename\n    }\n    instructionResultList {\n      ...InstructionResultList\n      __typename\n    }\n    productCarousel {\n      ...ProductCarousel\n      __typename\n    }\n    promoDisplay {\n      ...PromoDisplayFields\n      __typename\n    }\n    searchQueryId\n    filterQueries\n    skuSearch\n    q\n    sku_siteId\n    ruleExecuted\n    saleMemberInfo {\n      ...SaleMemberInfoFields\n      __typename\n    }\n    ATGCollectionGalleryInfo {\n      collectionGallery {\n        ...ATGCollectionGalleryInfo\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PromoDisplayFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  subItems {\n    ...SubItem\n    __typename\n  }\n  template\n  text\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n  title\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Layer on PromoDisplayLayer {\n  __typename\n  layerType\n  label\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  dynamicText {\n    verticalAlign\n    horizontalAlign\n    classes\n    promoId\n    styles\n    topCoordinate\n    rightCoordinate\n    bottomCoordinate\n    leftCoordinate\n    width\n    modalType\n    __typename\n  }\n  htmlText\n  shortText\n  link\n  modal\n  path\n}\n\nfragment DynamicText on PromoDisplayDynamicText {\n  __typename\n  layout\n  alt\n  width\n  style\n  height\n  coords\n  productIds\n  categoryId\n  wistia\n  transitionStartStyles\n  transitionEndStyles\n  transitionInDelay\n  exclusionParam\n  modalType\n  addbanner\n  autoplay\n  slidetime\n  easing\n  pauseOnHover\n  effecttime\n  resetOffScreen\n}\n\nfragment CatalogAsset on PromoDisplayCatalogAsset {\n  __typename\n  skuId\n  categoryId\n  productId\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  quickLook\n  id\n}\n\nfragment SubItem on PromoDisplay {\n  __typename\n  ...SubItemFields\n  subItems {\n    ...SubItemFields\n    __typename\n  }\n}\n\nfragment SubItemFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  template\n  text\n  title\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n}\n\nfragment CategoryProductFields on CategoryProduct {\n  __typename\n  id\n  displayName\n  imageUrl\n  imageFlip\n  altImages {\n    imageUrl\n    __typename\n  }\n  galleryDescription\n  newProduct\n  type\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  uxAttributes {\n    triggerSwatchImage\n    productType\n    giftCert\n    __typename\n  }\n  customProduct\n  pgCrop\n  pgCropRules\n  rhr\n  pdpImageLayout\n  seoDescription\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n  priceRange {\n    memberLowestListPrice\n    __typename\n  }\n}\n\nfragment ZeroResultFields on SearchZeroResults {\n  __typename\n  searchTerms\n  otherBrandSearchResults {\n    brandResultCount\n    brandName\n    brandLink {\n      navigationState\n      siteState {\n        companyCode\n        properties {\n          brandName\n          __typename\n        }\n        __typename\n      }\n      host\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AdjustedSearchFields on AdjustedSearch {\n  __typename\n  autoPhrased\n  adjustedTerms\n  spellCorrected\n  originalTerms\n}\n\nfragment InstructionResultList on InstructionResultList {\n  __typename\n  firstRecNum\n  lastRecNum\n  recsPerPage\n  totalNumRecs\n  name\n  records {\n    productDisplayName\n    link\n    label\n    __typename\n  }\n}\n\nfragment OtherInfo on SearchOtherInfo {\n  __typename\n  results {\n    displayName\n    link {\n      navigationState\n      siteState {\n        properties {\n          brandName\n          __typename\n        }\n        companyCode\n        __typename\n      }\n      host\n      __typename\n    }\n    resultCount\n    selected\n    __typename\n  }\n}\n\nfragment ResultTab on SearchResultTab {\n  __typename\n  companyCode\n  resultCount\n  displayName\n  link {\n    navigationState\n    siteState {\n      properties {\n        brandName\n        __typename\n      }\n      companyCode\n      __typename\n    }\n    host\n    __typename\n  }\n  selected\n}\n\nfragment RefinementMenu on SearchRefinementMenu {\n  __typename\n  displayName\n  name\n  ancestors {\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    host\n    label\n    __typename\n  }\n  dimensionName\n  numRefinementsToShowInitially\n  multiSelect\n  refinements {\n    ...RefinementLink\n    __typename\n  }\n  key\n}\n\nfragment RefinementLink on SearchRefinementLink {\n  ... on SearchRefinementPlainLink {\n    __typename\n    navigationState\n    label\n    localeLabel\n    count\n    multiSelect\n    siteState {\n      companyCode\n      __typename\n    }\n    isSelected\n  }\n  ... on SearchRefinementImageLink {\n    __typename\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    label\n    count\n    multiSelect\n    isSelected\n  }\n  __typename\n}\n\nfragment ProductCarousel on SearchProductCarousel {\n  __typename\n  maxRecordsBasedOnPrevSearch\n  records {\n    recordType\n    product {\n      altImageUrl\n      imageUrl\n      displayName\n      repositoryId\n      colorizable\n      removeFromBrowse\n      priceInfo {\n        currencySymbol\n        isCustomProduct\n        isRetail\n        isUnavailable\n        priceFilter\n        isSale\n        priceMessage\n        priceRange {\n          allOnSale\n          assetId\n          currencyApplied\n          highestFullSkuId\n          highestPaidFullSkuId\n          lowestFullSkuId\n          lowestPaidFullSkuId\n          noPriceRange\n          onClearance\n          onSale\n          onSaleAndOnClearance\n          previewMode\n          salePriceListId\n          tradeBest\n          __typename\n        }\n        rangeType\n        showMemberPrice\n        strikePriceLabel\n        listPrices\n        listPriceLabel\n        salePrices\n        salePriceLabel\n        memberPrices\n        memberPriceLabel\n        __typename\n      }\n      swatchInfo {\n        swatchesToDisplay {\n          imageUrl\n          swatchId\n          __typename\n        }\n        numAdditionalSwatchesAvailable\n        numAdditionalSaleSwatchesAvailable\n        __typename\n      }\n      __typename\n    }\n    sku {\n      fullSkuId\n      __typename\n    }\n    __typename\n  }\n  title\n  name\n}\n\nfragment SaleMemberInfoFields on SaleMemberInfoResponse {\n  __typename\n  pgMemberSavings {\n    ...MemberSavingsFields\n    __typename\n  }\n  pgSaleStats {\n    ...SaleStatsFields\n    __typename\n  }\n  headerConfig {\n    title\n    template\n    promoDisplay {\n      promoDisplay {\n        banners {\n          type\n          value\n          __typename\n        }\n        dynamicText {\n          attribute\n          value\n          __typename\n        }\n        media {\n          media\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment MemberSavingsFields on PgMemberSaving {\n  __typename\n  count\n  memberSavingsMin\n  memberSavingsMax\n}\n\nfragment SaleStatsFields on PgSaleStats {\n  __typename\n  nonSaleSkus\n  percentSaleSkus\n  saleSkus\n  totalSkus\n}\n\nfragment ATGCollectionGalleryInfo on CollectionCategory {\n  __typename\n  id\n  displayName\n  forceSaleFlag\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">Search</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String) {
  search(
    ntt: $ntt
    contentType: $contentType
    n: $n
    nrpp: $nrpp
    ns: $ns
    no: $no
    country: $country
    currencyCode: $currencyCode
    userType: $userType
    site: $site
    infiniteScroll: $infiniteScroll
    categoryId: $categoryId
    sale: $sale
    locale: $locale
  ) {
    redirectUrl
    stocked
    zeroResults {
      ...ZeroResultFields
      __typename
    }
    adjustedSearches {
      ...AdjustedSearchFields
      __typename
    }
    sizeFacets
    materialFacets
    resultList {
      lastRecNum
      firstRecNum
      recsPerPage
      totalNumRecs
      records {
        recordType
        product {
          altImageUrl
          imageUrl
          galleryDescription
          alternateImages {
            imageUrl
            __typename
          }
          displayName
          anchor
          repositoryId
          colorizable
          imageFlip
          newProduct
          emptyProduct
          metaProductComponent
          removeFromBrowse
          pgCrop
          pgCropRules
          rhr
          pdpImageLayout
          skuPriceInfo {
            fullSkuId
            currencySymbol
            listPrice
            salePrice
            memberPrice
            tradePrice
            contractPrice
            nextgenDriven
            onSale
            onClearance
            showMemberPrice
            skuOptions {
              id
              optionType
              label
              __typename
            }
            __typename
          }
          metaProduct
          priceInfo {
            currencySymbol
            isCustomProduct
            isRetail
            isUnavailable
            priceFilter
            isSale
            priceMessage
            priceRange {
              allOnSale
              assetId
              currencyApplied
              highestFullSkuId
              highestPaidFullSkuId
              lowestFullSkuId
              lowestPaidFullSkuId
              noPriceRange
              onClearance
              onSale
              onSaleAndOnClearance
              previewMode
              salePriceListId
              tradeBest
              __typename
            }
            rangeType
            showMemberPrice
            strikePriceLabel
            priceMessagePrice
            listPrices
            listPriceLabel
            salePrices
            salePriceLabel
            memberPrices
            memberPriceLabel
            lowestMemberPrice
            lowestSalePrice
            overridePriceLabel
            skulowestListPrice
            skulowestMemberPrice
            skulowestSalePrice
            nextGenDriven
            nextGenDrivenOnSale
            __typename
          }
          swatchInfo {
            swatchesToDisplay {
              imageRef
              imageUrl
              swatchId
              displayName
              __typename
            }
            numAdditionalSwatchesAvailable
            numAdditionalSaleSwatchesAvailable
            __typename
          }
          galleryDescription
          percentSaleSkus
          lowestskuPriceInfo {
            skuListSaleprice
            skuMemberSalePrice
            skuSalePrice
            __typename
          }
          __typename
        }
        sku {
          fullSkuId
          __typename
        }
        __typename
      }
      sortOptions {
        navigationState
        label
        selected
        __typename
      }
      __typename
    }
    resultTabs {
      ...ResultTab
      __typename
    }
    booleanFacets {
      ...RefinementMenu
      __typename
    }
    refinementMenus {
      ...RefinementMenu
      __typename
    }
    otherInfo {
      ...OtherInfo
      __typename
    }
    instructionResultList {
      ...InstructionResultList
      __typename
    }
    productCarousel {
      ...ProductCarousel
      __typename
    }
    promoDisplay {
      ...PromoDisplayFields
      __typename
    }
    searchQueryId
    filterQueries
    skuSearch
    q
    sku_siteId
    ruleExecuted
    saleMemberInfo {
      ...SaleMemberInfoFields
      __typename
    }
    ATGCollectionGalleryInfo {
      collectionGallery {
        ...ATGCollectionGalleryInfo
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment PromoDisplayFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  subItems {
    ...SubItem
    __typename
  }
  template
  text
  imageUrl
  linkType
  linkUrl
  targetUrl
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
  title
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
}

fragment Layer on PromoDisplayLayer {
  __typename
  layerType
  label
  leftCoordinate
  topCoordinate
  flyoutDirection
  dynamicText {
    verticalAlign
    horizontalAlign
    classes
    promoId
    styles
    topCoordinate
    rightCoordinate
    bottomCoordinate
    leftCoordinate
    width
    modalType
    __typename
  }
  htmlText
  shortText
  link
  modal
  path
}

fragment DynamicText on PromoDisplayDynamicText {
  __typename
  layout
  alt
  width
  style
  height
  coords
  productIds
  categoryId
  wistia
  transitionStartStyles
  transitionEndStyles
  transitionInDelay
  exclusionParam
  modalType
  addbanner
  autoplay
  slidetime
  easing
  pauseOnHover
  effecttime
  resetOffScreen
}

fragment CatalogAsset on PromoDisplayCatalogAsset {
  __typename
  skuId
  categoryId
  productId
  leftCoordinate
  topCoordinate
  flyoutDirection
  quickLook
  id
}

fragment SubItem on PromoDisplay {
  __typename
  ...SubItemFields
  subItems {
    ...SubItemFields
    __typename
  }
}

fragment SubItemFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  template
  text
  title
  imageUrl
  linkType
  linkUrl
  targetUrl
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
}

fragment CategoryProductFields on CategoryProduct {
  __typename
  id
  displayName
  imageUrl
  imageFlip
  altImages {
    imageUrl
    __typename
  }
  galleryDescription
  newProduct
  type
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  uxAttributes {
    triggerSwatchImage
    productType
    giftCert
    __typename
  }
  customProduct
  pgCrop
  pgCropRules
  rhr
  pdpImageLayout
  seoDescription
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
  priceRange {
    memberLowestListPrice
    __typename
  }
}

fragment ZeroResultFields on SearchZeroResults {
  __typename
  searchTerms
  otherBrandSearchResults {
    brandResultCount
    brandName
    brandLink {
      navigationState
      siteState {
        companyCode
        properties {
          brandName
          __typename
        }
        __typename
      }
      host
      __typename
    }
    __typename
  }
}

fragment AdjustedSearchFields on AdjustedSearch {
  __typename
  autoPhrased
  adjustedTerms
  spellCorrected
  originalTerms
}

fragment InstructionResultList on InstructionResultList {
  __typename
  firstRecNum
  lastRecNum
  recsPerPage
  totalNumRecs
  name
  records {
    productDisplayName
    link
    label
    __typename
  }
}

fragment OtherInfo on SearchOtherInfo {
  __typename
  results {
    displayName
    link {
      navigationState
      siteState {
        properties {
          brandName
          __typename
        }
        companyCode
        __typename
      }
      host
      __typename
    }
    resultCount
    selected
    __typename
  }
}

fragment ResultTab on SearchResultTab {
  __typename
  companyCode
  resultCount
  displayName
  link {
    navigationState
    siteState {
      properties {
        brandName
        __typename
      }
      companyCode
      __typename
    }
    host
    __typename
  }
  selected
}

fragment RefinementMenu on SearchRefinementMenu {
  __typename
  displayName
  name
  ancestors {
    navigationState
    siteState {
      companyCode
      __typename
    }
    host
    label
    __typename
  }
  dimensionName
  numRefinementsToShowInitially
  multiSelect
  refinements {
    ...RefinementLink
    __typename
  }
  key
}

fragment RefinementLink on SearchRefinementLink {
  ... on SearchRefinementPlainLink {
    __typename
    navigationState
    label
    localeLabel
    count
    multiSelect
    siteState {
      companyCode
      __typename
    }
    isSelected
  }
  ... on SearchRefinementImageLink {
    __typename
    navigationState
    siteState {
      companyCode
      __typename
    }
    label
    count
    multiSelect
    isSelected
  }
  __typename
}

fragment ProductCarousel on SearchProductCarousel {
  __typename
  maxRecordsBasedOnPrevSearch
  records {
    recordType
    product {
      altImageUrl
      imageUrl
      displayName
      repositoryId
      colorizable
      removeFromBrowse
      priceInfo {
        currencySymbol
        isCustomProduct
        isRetail
        isUnavailable
        priceFilter
        isSale
        priceMessage
        priceRange {
          allOnSale
          assetId
          currencyApplied
          highestFullSkuId
          highestPaidFullSkuId
          lowestFullSkuId
          lowestPaidFullSkuId
          noPriceRange
          onClearance
          onSale
          onSaleAndOnClearance
          previewMode
          salePriceListId
          tradeBest
          __typename
        }
        rangeType
        showMemberPrice
        strikePriceLabel
        listPrices
        listPriceLabel
        salePrices
        salePriceLabel
        memberPrices
        memberPriceLabel
        __typename
      }
      swatchInfo {
        swatchesToDisplay {
          imageUrl
          swatchId
          __typename
        }
        numAdditionalSwatchesAvailable
        numAdditionalSaleSwatchesAvailable
        __typename
      }
      __typename
    }
    sku {
      fullSkuId
      __typename
    }
    __typename
  }
  title
  name
}

fragment SaleMemberInfoFields on SaleMemberInfoResponse {
  __typename
  pgMemberSavings {
    ...MemberSavingsFields
    __typename
  }
  pgSaleStats {
    ...SaleStatsFields
    __typename
  }
  headerConfig {
    title
    template
    promoDisplay {
      promoDisplay {
        banners {
          type
          value
          __typename
        }
        dynamicText {
          attribute
          value
          __typename
        }
        media {
          media
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment MemberSavingsFields on PgMemberSaving {
  __typename
  count
  memberSavingsMin
  memberSavingsMax
}

fragment SaleStatsFields on PgSaleStats {
  __typename
  nonSaleSkus
  percentSaleSkus
  saleSkus
  totalSkus
}

fragment ATGCollectionGalleryInfo on CollectionCategory {
  __typename
  id
  displayName
  forceSaleFlag
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;ntt&quot;: &quot;${pgterm}&quot;,
  &quot;nrpp&quot;: 48,
  &quot;ns&quot;: &quot;product.sale|1&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/location-select</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">Search</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"> </stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/category/products.jsp?categoryId=${ProductGalleryId}&amp;sale=false&amp;parentCatId=cat15790016&amp;pgterm=category%3A${ProductGalleryId}&amp;fromCG=true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="PromoDisplayContent-1" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">PromoDisplayContent</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">PromoDisplayContent</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;context&quot;: &quot;GlobalPopup&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.9_GetAemModel-3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/results&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/results&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.10_GlobalStylesheet" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.11_SaleCatalogNavigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.12_CartProjection" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.13_GetBrandSubscriptionsByEmail" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.0_Product Details" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PDPs" enabled="true">
            <stringProp name="filename">PDPs.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">productId</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.0_Product Details" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.1_AboveNavPromo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AboveNavPromo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.2_CatalogNavigation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.3_WORHMenu-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.4_SwatchDeliveryMessage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SwatchDeliveryMessage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-stocked-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SwatchDeliveryMessage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-stocked-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.5_SwatchDeliveryMessage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SwatchDeliveryMessage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-spo-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SwatchDeliveryMessage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-spo-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.6_GiftCardTerms" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GiftCardTerms</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GiftCardTerms($key: String = &quot;&quot;) { contentFragment(group: &quot;pages&quot;, key: $key) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;key&quot;: &quot;rh-gift-card-pdp&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GiftCardTerms</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GiftCardTerms($key: String = &quot;&quot;) { contentFragment(group: &quot;pages&quot;, key: $key) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;key&quot;: &quot;rh-gift-card-pdp&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.7_Product" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Product&quot;,&quot;variables&quot;:{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
},&quot;query&quot;:&quot;query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {\n  product(\n    productId: $productId\n    categoryId: $categoryId\n    filter: $filter\n    userType: $userType\n    currencyCode: $currencyCode\n    siteId: $siteId\n    measureSystem: $measureSystem\n    locale: $locale\n    postalCode: $postalCode\n  ) {\n    __typename\n    ...ProductFields\n  }\n}\n\nfragment ProductFields on Product {\n  __typename\n  ...BaseProductFields\n  personalizeInfo {\n    ...PersonalizeInfo\n    __typename\n  }\n  productLineItem(filter: $filter) {\n    ...LineItem\n    __typename\n  }\n  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {\n    productId\n    adapter\n    splitDisplay\n    faceoutSwatchId\n    swatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      customSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    finishSwatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  customProductType\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  carouselProdctDetails {\n    imageUrl\n    displayName\n    productId\n    sale\n    __typename\n  }\n  customProduct\n  productOptionGroupBean {\n    title\n    optionsList\n    __typename\n  }\n  swatchBean {\n    swatchId\n    primaryOptionId\n    __typename\n  }\n}\n\nfragment BaseProductFields on Product {\n  preconfiguredSku\n  isActive\n  endDate\n  subName\n  metaProduct\n  longDescription\n  merchMessage\n  targetUrl\n  emptyProduct\n  metaProductComponent\n  onSale\n  giftCert\n  featureList\n  dimensions\n  deliveryDimensions\n  careInstructions\n  fixedDisplaySku\n  layout\n  productListTitle\n  id\n  type\n  displayName\n  imageUrl\n  galleryDescription\n  newProduct\n  template\n  suppressSwatchCopy\n  alternateImages {\n    imageUrl\n    caption\n    video\n    sbrId\n    __typename\n  }\n  productAddonDescription\n  productAddonMessage\n  productAddonTitle\n  productAddons {\n    __typename\n    ...ProductAddons\n  }\n  colorizeInfo {\n    colorizable\n    __typename\n  }\n  layout\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  priceRangeMultiSkuDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  index\n  rangeId\n  parentCategoryId\n  fileLinkUrls {\n    link\n    label\n    __typename\n  }\n  instock {\n    hasInStock\n    showInStockButton\n    showInStockMessage\n    __typename\n  }\n  saleInfo {\n    nonSaleSkus\n    saleSkus\n    totalSkus\n    percentSaleSkus\n    showSaleMessage\n    __typename\n  }\n  skuPriceInfo {\n    ...SkuSalePrice\n    __typename\n  }\n  multiSkuPriceInfo {\n    ...SkuSalePrice\n    __typename\n  }\n  sale {\n    hasSale\n    showSaleButton\n    showSaleMessage\n    __typename\n  }\n  uxAttributes {\n    productType\n    triggerSwatchImage\n    giftCert\n    __typename\n  }\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  customProduct\n  rhr\n  showAllOptions\n  hideOptionSet\n  pdpImageLayout\n  pdpCrop\n  serviceSkuProduct\n  nextGenDriven\n  multiSkuAdditionalMessage\n  seoDescription\n  keywords\n  multiSkuAdditionalMessage\n  relatedProductIds\n  saleSwatchId\n  productMessage\n  __typename\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n  priceRange {\n    memberLowestListPrice\n    __typename\n  }\n}\n\nfragment ProductAddons on ProductAddons {\n  productAddonsInfo {\n    id\n    customProduct\n    imageUrl\n    productAddonTitle\n    productAddonMessage\n    productAddonDescription\n    onSale\n    longDescription\n    displayName\n    isActive\n    saleInfo {\n      saleSkus\n      totalSkus\n      percentSaleSkus\n      showSaleMessage\n      __typename\n    }\n    priceRangeDisplay {\n      rangeType\n      isUnavailable\n      isSale\n      showMemberPrice\n      skulowestListPrice\n      skulowestMemberPrice\n      skulowestSalePrice\n      nextGenDriven\n      nextGenDrivenOnSale\n      listPrices\n      salePrices\n      memberPrices\n      salePriceLabel\n      priceMessage\n      priceMessagePrice\n      listPriceLabel\n      memberPriceLabel\n      strikePriceLabel\n      currencySymbol\n      hasOnlyOneSku\n      priceRange {\n        memberLowestListPrice\n        __typename\n      }\n      __typename\n    }\n    colorizeInfo {\n      colorizable\n      __typename\n    }\n    alternateImages {\n      imageUrl\n      caption\n      video\n      sbrId\n      __typename\n    }\n    productLineItem {\n      availableOptions {\n        type\n        sortPriority\n        optionTypeId\n        options {\n          id\n          type\n          value\n          sortPriority\n          status\n          message\n          __typename\n        }\n        __typename\n      }\n      image {\n        productId\n        imageUrl\n        __typename\n      }\n      __typename\n    }\n    imageUrl\n    __typename\n  }\n  __typename\n}\n\nfragment SkuSalePrice on SkuSalePrice {\n  __typename\n  skuListSaleprice\n  skuMemberSalePrice\n  skuSalePrice\n  isMultiSku\n}\n\nfragment PersonalizeInfo on ProductPersonalizeInfo {\n  __typename\n  description\n  features\n  feeLow\n  feeHigh\n  monogrammable\n  personalizable\n  waiveMonogramFee\n  styles {\n    image\n    previewImage\n    displayName\n    id\n    minLength\n    maxLength\n    numberOfLines\n    __typename\n  }\n  fonts {\n    image\n    previewImage\n    displayName\n    id\n    borders {\n      image\n      minLength\n      maxLength\n      numberOfLines\n      id\n      displayName\n      __typename\n    }\n    __typename\n  }\n  colors {\n    image\n    id\n    displayName\n    __typename\n  }\n}\n\nfragment Swatch on ProductSwatch {\n  __typename\n  swatchId\n  title\n  sortPriority\n  swatchGroupIndex\n  details\n  colorize\n  imageUrl\n  primaryOptionId\n  secondaryOptionId\n  relatedSwatchBeans {\n    swatchId\n    title\n    sortPriority\n    swatchGroupIndex\n    details\n    colorize\n    imageUrl\n    primaryOptionId\n    secondaryOptionId\n    optionCopy\n    options {\n      id\n      label\n      optionType\n      sortPriority\n      __typename\n    }\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    __typename\n  }\n  optionCopy\n  options {\n    id\n    label\n    optionType\n    sortPriority\n    __typename\n  }\n  swatchImageSm {\n    url\n    width\n    height\n    __typename\n  }\n  swatchImageLg {\n    url\n    width\n    height\n    __typename\n  }\n  onSale\n}\n\nfragment LineItem on ProductLineItem {\n  __typename\n  sku {\n    ...Sku\n    __typename\n  }\n  availableOptions {\n    type\n    sortPriority\n    optionTypeId\n    adapter\n    options {\n      id\n      type\n      value\n      name\n      sortPriority\n      status\n      message\n      __typename\n    }\n    __typename\n  }\n  image {\n    productId\n    imageUrl\n    __typename\n  }\n  customProductOptions {\n    customProductInformation {\n      customProductType\n      cwCustomProductCode\n      maxWidth\n      maxLength\n      minWidth\n      minLength\n      minDiameter\n      maxDiameter\n      maxControlLength\n      minControlLength\n      widthFractionGap\n      lengthFractionGap\n      diameterFractionGap\n      shape\n      mountTypes {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      controlTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      panels {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      linings {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlPositions {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      rollTypes {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      bracketColors {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlsAndTilts {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      tiltTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      rugTrims {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      finish {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Sku on ProductSku {\n  __typename\n  info {\n    name\n    longDescription\n    imageUrl\n    maxOrderQty\n    skuPriceInfo {\n      currencySymbol\n      listPrice\n      salePrice\n      memberPrice\n      tradePrice\n      contractPrice\n      nextgenDriven\n      onSale\n      onClearance\n      showMemberPrice\n      customProductErrorCode\n      customProductErrorMsg\n      __typename\n    }\n    canadaShippable\n    dropship\n    shipViaCode\n    hasCasingSkus\n    casingProduct\n    replacementCushionProduct\n    __typename\n  }\n  inventory {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    inventoryOnHand\n    __typename\n  }\n  delivery {\n    postalCode\n    needPostalCode\n    deliveryEstimateStatus\n    deliveryEstimate\n    freightExempt\n    shippingSurcharge\n    shippingSurchargeAmount\n    freightExemptMessage\n    deliveryStateMessage\n    lineId\n    __typename\n  }\n  restrictions {\n    spo\n    giftCertificate\n    serviceSku\n    monogram\n    monogramMessage\n    returnPolicyMessage\n    preBillMessage\n    additionalMessages {\n      curbsideMessage\n      assemblyMessage\n      giftCardMessage\n      railroadMessage\n      mattressFeeMessage\n      cancellableMessage\n      finalSaleMessage\n      __typename\n    }\n    countryRestrictions\n    mattressFeeLocation\n    __typename\n  }\n  fulfillmentEta {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    startDateRange\n    endDateRange\n    eta\n    lineType\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">Product</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {
  product(
    productId: $productId
    categoryId: $categoryId
    filter: $filter
    userType: $userType
    currencyCode: $currencyCode
    siteId: $siteId
    measureSystem: $measureSystem
    locale: $locale
    postalCode: $postalCode
  ) {
    __typename
    ...ProductFields
  }
}

fragment ProductFields on Product {
  __typename
  ...BaseProductFields
  personalizeInfo {
    ...PersonalizeInfo
    __typename
  }
  productLineItem(filter: $filter) {
    ...LineItem
    __typename
  }
  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {
    productId
    adapter
    splitDisplay
    faceoutSwatchId
    swatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      customSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    finishSwatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    __typename
  }
  customProductType
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  carouselProdctDetails {
    imageUrl
    displayName
    productId
    sale
    __typename
  }
  customProduct
  productOptionGroupBean {
    title
    optionsList
    __typename
  }
  swatchBean {
    swatchId
    primaryOptionId
    __typename
  }
}

fragment BaseProductFields on Product {
  preconfiguredSku
  isActive
  endDate
  subName
  metaProduct
  longDescription
  merchMessage
  targetUrl
  emptyProduct
  metaProductComponent
  onSale
  giftCert
  featureList
  dimensions
  deliveryDimensions
  careInstructions
  fixedDisplaySku
  layout
  productListTitle
  id
  type
  displayName
  imageUrl
  galleryDescription
  newProduct
  template
  suppressSwatchCopy
  alternateImages {
    imageUrl
    caption
    video
    sbrId
    __typename
  }
  productAddonDescription
  productAddonMessage
  productAddonTitle
  productAddons {
    __typename
    ...ProductAddons
  }
  colorizeInfo {
    colorizable
    __typename
  }
  layout
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  priceRangeMultiSkuDisplay {
    ...PriceRangeDisplay
    __typename
  }
  index
  rangeId
  parentCategoryId
  fileLinkUrls {
    link
    label
    __typename
  }
  instock {
    hasInStock
    showInStockButton
    showInStockMessage
    __typename
  }
  saleInfo {
    nonSaleSkus
    saleSkus
    totalSkus
    percentSaleSkus
    showSaleMessage
    __typename
  }
  skuPriceInfo {
    ...SkuSalePrice
    __typename
  }
  multiSkuPriceInfo {
    ...SkuSalePrice
    __typename
  }
  sale {
    hasSale
    showSaleButton
    showSaleMessage
    __typename
  }
  uxAttributes {
    productType
    triggerSwatchImage
    giftCert
    __typename
  }
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  customProduct
  rhr
  showAllOptions
  hideOptionSet
  pdpImageLayout
  pdpCrop
  serviceSkuProduct
  nextGenDriven
  multiSkuAdditionalMessage
  seoDescription
  keywords
  multiSkuAdditionalMessage
  relatedProductIds
  saleSwatchId
  productMessage
  __typename
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
  priceRange {
    memberLowestListPrice
    __typename
  }
}

fragment ProductAddons on ProductAddons {
  productAddonsInfo {
    id
    customProduct
    imageUrl
    productAddonTitle
    productAddonMessage
    productAddonDescription
    onSale
    longDescription
    displayName
    isActive
    saleInfo {
      saleSkus
      totalSkus
      percentSaleSkus
      showSaleMessage
      __typename
    }
    priceRangeDisplay {
      rangeType
      isUnavailable
      isSale
      showMemberPrice
      skulowestListPrice
      skulowestMemberPrice
      skulowestSalePrice
      nextGenDriven
      nextGenDrivenOnSale
      listPrices
      salePrices
      memberPrices
      salePriceLabel
      priceMessage
      priceMessagePrice
      listPriceLabel
      memberPriceLabel
      strikePriceLabel
      currencySymbol
      hasOnlyOneSku
      priceRange {
        memberLowestListPrice
        __typename
      }
      __typename
    }
    colorizeInfo {
      colorizable
      __typename
    }
    alternateImages {
      imageUrl
      caption
      video
      sbrId
      __typename
    }
    productLineItem {
      availableOptions {
        type
        sortPriority
        optionTypeId
        options {
          id
          type
          value
          sortPriority
          status
          message
          __typename
        }
        __typename
      }
      image {
        productId
        imageUrl
        __typename
      }
      __typename
    }
    imageUrl
    __typename
  }
  __typename
}

fragment SkuSalePrice on SkuSalePrice {
  __typename
  skuListSaleprice
  skuMemberSalePrice
  skuSalePrice
  isMultiSku
}

fragment PersonalizeInfo on ProductPersonalizeInfo {
  __typename
  description
  features
  feeLow
  feeHigh
  monogrammable
  personalizable
  waiveMonogramFee
  styles {
    image
    previewImage
    displayName
    id
    minLength
    maxLength
    numberOfLines
    __typename
  }
  fonts {
    image
    previewImage
    displayName
    id
    borders {
      image
      minLength
      maxLength
      numberOfLines
      id
      displayName
      __typename
    }
    __typename
  }
  colors {
    image
    id
    displayName
    __typename
  }
}

fragment Swatch on ProductSwatch {
  __typename
  swatchId
  title
  sortPriority
  swatchGroupIndex
  details
  colorize
  imageUrl
  primaryOptionId
  secondaryOptionId
  relatedSwatchBeans {
    swatchId
    title
    sortPriority
    swatchGroupIndex
    details
    colorize
    imageUrl
    primaryOptionId
    secondaryOptionId
    optionCopy
    options {
      id
      label
      optionType
      sortPriority
      __typename
    }
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    __typename
  }
  optionCopy
  options {
    id
    label
    optionType
    sortPriority
    __typename
  }
  swatchImageSm {
    url
    width
    height
    __typename
  }
  swatchImageLg {
    url
    width
    height
    __typename
  }
  onSale
}

fragment LineItem on ProductLineItem {
  __typename
  sku {
    ...Sku
    __typename
  }
  availableOptions {
    type
    sortPriority
    optionTypeId
    adapter
    options {
      id
      type
      value
      name
      sortPriority
      status
      message
      __typename
    }
    __typename
  }
  image {
    productId
    imageUrl
    __typename
  }
  customProductOptions {
    customProductInformation {
      customProductType
      cwCustomProductCode
      maxWidth
      maxLength
      minWidth
      minLength
      minDiameter
      maxDiameter
      maxControlLength
      minControlLength
      widthFractionGap
      lengthFractionGap
      diameterFractionGap
      shape
      mountTypes {
        id
        value
        status
        message
        code
        __typename
      }
      controlTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      panels {
        id
        value
        status
        message
        code
        __typename
      }
      linings {
        id
        value
        status
        message
        __typename
      }
      controlPositions {
        id
        value
        status
        message
        __typename
      }
      rollTypes {
        id
        value
        status
        message
        __typename
      }
      bracketColors {
        id
        value
        status
        message
        __typename
      }
      controlsAndTilts {
        id
        value
        status
        message
        __typename
      }
      tiltTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      rugTrims {
        id
        value
        status
        message
        code
        __typename
      }
      finish {
        id
        value
        status
        message
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment Sku on ProductSku {
  __typename
  info {
    name
    longDescription
    imageUrl
    maxOrderQty
    skuPriceInfo {
      currencySymbol
      listPrice
      salePrice
      memberPrice
      tradePrice
      contractPrice
      nextgenDriven
      onSale
      onClearance
      showMemberPrice
      customProductErrorCode
      customProductErrorMsg
      __typename
    }
    canadaShippable
    dropship
    shipViaCode
    hasCasingSkus
    casingProduct
    replacementCushionProduct
    __typename
  }
  inventory {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    inventoryOnHand
    __typename
  }
  delivery {
    postalCode
    needPostalCode
    deliveryEstimateStatus
    deliveryEstimate
    freightExempt
    shippingSurcharge
    shippingSurchargeAmount
    freightExemptMessage
    deliveryStateMessage
    lineId
    __typename
  }
  restrictions {
    spo
    giftCertificate
    serviceSku
    monogram
    monogramMessage
    returnPolicyMessage
    preBillMessage
    additionalMessages {
      curbsideMessage
      assemblyMessage
      giftCardMessage
      railroadMessage
      mattressFeeMessage
      cancellableMessage
      finalSaleMessage
      __typename
    }
    countryRestrictions
    mattressFeeLocation
    __typename
  }
  fulfillmentEta {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    startDateRange
    endDateRange
    eta
    lineType
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct1" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds.[*]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOptions" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">availableOptions</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.productLineItem.availableOptions.[*]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.8_UpsellProducts" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">UpsellProducts</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query UpsellProducts($productId: String!, $locale: String, $measureSystem: String, $currencyCode: String, $siteId: String, $userType: String) { upsellProducts( productId: $productId locale: $locale measureSystem: $measureSystem currencyCode: $currencyCode siteId: $siteId userType: $userType ) { upsellProducts { id type displayName imageUrl galleryDescription newProduct template pgCrop pgCropRules uxAttributes { productType triggerSwatchImage giftCert __typename } priceRangeDisplay { ...UpsellPriceRangeDisplay __typename } priceRangeMultiSkuDisplay { ...UpsellPriceRangeDisplay __typename } skuPriceInfo { skuListSaleprice skuMemberSalePrice skuSalePrice __typename } multiSkuPriceInfo { skuListSaleprice skuMemberSalePrice skuSalePrice __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } index rangeId parentCategoryId rhr __typename } __typename } } fragment UpsellPriceRangeDisplay on UpsellProductPriceRangeDisplay { __typename rangeType isSale isUnavailable showMemberPrice isRetail isCustomProduct priceRange { lowestListPrice highestListPrice lowestPricePaid highestPricePaid previewMode memberLowestListPrice memberHighestListPrice memberLowestPricePaid memberHighestPricePaid onSale onClearance onSaleAndOnClearance allOnSale noPriceRange tradeBest saleSkuId finalSaleSkuId saleSwatchId finalSaleSwatchId currencyApplied highestFullSkuId lowestFullSkuId highestPaidFullSkuId lowestPaidFullSkuId assetId salePriceListId __typename } listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol priceFilter overridePriceLabel nextGenDrivenOnSale }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">UpsellProducts</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query UpsellProducts($productId: String!, $locale: String, $measureSystem: String, $currencyCode: String, $siteId: String, $userType: String) { upsellProducts( productId: $productId locale: $locale measureSystem: $measureSystem currencyCode: $currencyCode siteId: $siteId userType: $userType ) { upsellProducts { id type displayName imageUrl galleryDescription newProduct template pgCrop pgCropRules uxAttributes { productType triggerSwatchImage giftCert __typename } priceRangeDisplay { ...UpsellPriceRangeDisplay __typename } priceRangeMultiSkuDisplay { ...UpsellPriceRangeDisplay __typename } skuPriceInfo { skuListSaleprice skuMemberSalePrice skuSalePrice __typename } multiSkuPriceInfo { skuListSaleprice skuMemberSalePrice skuSalePrice __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } index rangeId parentCategoryId rhr __typename } __typename } } fragment UpsellPriceRangeDisplay on UpsellProductPriceRangeDisplay { __typename rangeType isSale isUnavailable showMemberPrice isRetail isCustomProduct priceRange { lowestListPrice highestListPrice lowestPricePaid highestPricePaid previewMode memberLowestListPrice memberHighestListPrice memberLowestPricePaid memberHighestPricePaid onSale onClearance onSaleAndOnClearance allOnSale noPriceRange tradeBest saleSkuId finalSaleSkuId saleSwatchId finalSaleSwatchId currencyApplied highestFullSkuId lowestFullSkuId highestPaidFullSkuId lowestPaidFullSkuId assetId salePriceListId __typename } listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol priceFilter overridePriceLabel nextGenDrivenOnSale }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.9_ProductSwatchImage-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductSwatchImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductSwatchImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.10_GetAemModel-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/product&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/product&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.11_GlobalStylesheet" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.12_GetUserForSession" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserForSession</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.13_SaleCatalogNavigation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.14_RelatedProductsQuery" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">RelatedProductsQuery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query RelatedProductsQuery($productIds: [String!]!, $filter: String, $currencyCode: String, $measureSystem: String, $locale: String, $siteId: String, $categoryId: String, $userType: String) { relatedProductsQuery( productIds: $productIds filter: $filter currencyCode: $currencyCode measureSystem: $measureSystem locale: $locale siteId: $siteId categoryId: $categoryId userType: $userType ) { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } } } fragment BaseProductFields on Product { preconfiguredSku isActive endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId __typename } productAddonDescription productAddonMessage productAddonTitle productAddons { __typename ...ProductAddons } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } priceRangeMultiSkuDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } skuPriceInfo { ...SkuSalePrice __typename } multiSkuPriceInfo { ...SkuSalePrice __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords multiSkuAdditionalMessage relatedProductIds saleSwatchId productMessage __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment ProductAddons on ProductAddons { productAddonsInfo { id customProduct imageUrl productAddonTitle productAddonMessage productAddonDescription onSale longDescription displayName isActive saleInfo { saleSkus totalSkus percentSaleSkus showSaleMessage __typename } priceRangeDisplay { rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol hasOnlyOneSku priceRange { memberLowestListPrice __typename } __typename } colorizeInfo { colorizable __typename } alternateImages { imageUrl caption video sbrId __typename } productLineItem { availableOptions { type sortPriority optionTypeId options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } __typename } imageUrl __typename } __typename } fragment SkuSalePrice on SkuSalePrice { __typename skuListSaleprice skuMemberSalePrice skuSalePrice isMultiSku } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productIds&quot;: ${RelatedProduct2},
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">RelatedProductsQuery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query RelatedProductsQuery($productIds: [String!]!, $filter: String, $currencyCode: String, $measureSystem: String, $locale: String, $siteId: String, $categoryId: String, $userType: String) { relatedProductsQuery( productIds: $productIds filter: $filter currencyCode: $currencyCode measureSystem: $measureSystem locale: $locale siteId: $siteId categoryId: $categoryId userType: $userType ) { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } } } fragment BaseProductFields on Product { preconfiguredSku isActive endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId __typename } productAddonDescription productAddonMessage productAddonTitle productAddons { __typename ...ProductAddons } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } priceRangeMultiSkuDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } skuPriceInfo { ...SkuSalePrice __typename } multiSkuPriceInfo { ...SkuSalePrice __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords multiSkuAdditionalMessage relatedProductIds saleSwatchId productMessage __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } } fragment ProductAddons on ProductAddons { productAddonsInfo { id customProduct imageUrl productAddonTitle productAddonMessage productAddonDescription onSale longDescription displayName isActive saleInfo { saleSkus totalSkus percentSaleSkus showSaleMessage __typename } priceRangeDisplay { rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol hasOnlyOneSku priceRange { memberLowestListPrice __typename } __typename } colorizeInfo { colorizable __typename } alternateImages { imageUrl caption video sbrId __typename } productLineItem { availableOptions { type sortPriority optionTypeId options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } __typename } imageUrl __typename } __typename } fragment SkuSalePrice on SkuSalePrice { __typename skuListSaleprice skuMemberSalePrice skuSalePrice isMultiSku } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productIds&quot;: ${RelatedProduct2},
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">int count = Integer.parseInt(vars.get(&quot;RelatedProduct1_matchNr&quot;));
String delimiter = &quot;,&quot;;
StringBuffer sb = new StringBuffer();
for(int i=1;i&lt;=count;i++) { 
 sb.append(vars.get(&quot;RelatedProduct1_&quot; + i));
 if (i == count){
 break; //to eliminate comma after the array
 }else {
  sb.append(delimiter);
 }
}
 vars.put(&quot;RelatedProduct2&quot;,sb.toString());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.15_LineItemQuery-1_MainProduct" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">LineItemQuery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.16_GetAemModel-2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - RelatedProduct_matchNr" enabled="true">
              <stringProp name="IfController.condition">${__jexl3( ${RelatedProduct_matchNr} &gt; 0,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">RelatedProduct</stringProp>
                <stringProp name="ForeachController.returnVal">RelatedProduct</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${RelatedProduct_matchNr}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">Counter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.17_ProductImage_RelatedProduct" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">ProductImage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">ProductImage</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.18_LineItemQuery-2_RelatedProduct" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">LineItemQuery</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">LineItemQuery</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - availableOptions_matchNr" enabled="true">
              <stringProp name="IfController.condition">${__jexl3( ${availableOptions_matchNr} &gt; 0,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.19_LineItemQuery-1_MainProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;RH END CUSTOMER&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;RH END CUSTOMER&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">availableOptions</stringProp>
                <stringProp name="ForeachController.returnVal">availableOption</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${availableOptions_matchNr}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">Counter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.19_ProductImage_MainProduct" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">ProductImage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">ProductImage</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.20_LineItemQuery-3_MainProduct" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">LineItemQuery</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">LineItemQuery</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="false">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionId&quot;, selectedOptionIds)</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_LineItemQuery-4_MainProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.21_LineItemSkuQuery_MainProduct" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemSkuQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemSkuQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemSkuQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_SkuAvailabilityStatus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SkuAvailabilityStatus</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SkuAvailabilityStatus</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.20_ProductSwatchImage-2" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductSwatchImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductSwatchImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.21_CartProjection" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_GetBrandSubscriptionsByEmail" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="7.0_AddToCart" enabled="true">
          <stringProp name="IfController.condition">${__jexl3( ${fullSkuId_matchNr} &gt; 0 &amp;&amp; ${inventoryRemaining} &gt; 0,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="7.0_AddToCart" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="7.1_AddLineItemsToCart" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AddLineItemsToCart&quot;,&quot;variables&quot;:{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;lineItemsInput&quot;: {
    &quot;items&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;sku&quot;: &quot;${fullSkuId}&quot;,
        &quot;fusionId&quot;: &quot;&quot;,
        &quot;quantity&quot;: 1,
        &quot;brand&quot;: &quot;RH&quot;,
        &quot;giftTo&quot;: &quot;&quot;,
        &quot;giftFrom&quot;: &quot;&quot;,
        &quot;giftMessage&quot;: &quot;&quot;,
        &quot;spoTermsAccepted&quot;: false,
        &quot;spoTerms&quot;: null
      }
    ]
  }
},&quot;query&quot;:&quot;mutation AddLineItemsToCart($email: String!, $cartId: String!, $lineItemsInput: LineItemsInput!, $createCartInfo: CreateCartInfoInput) {\n  addLineItemsToCart(\n    email: $email\n    cartId: $cartId\n    lineItemsInput: $lineItemsInput\n    createCartInfo: $createCartInfo\n  ) {\n    id\n    createdAt\n    lastModifiedAt\n    cartPrice {\n      currencyCode\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AddLineItemsToCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation AddLineItemsToCart($email: String!, $cartId: String!, $lineItemsInput: LineItemsInput!, $createCartInfo: CreateCartInfoInput) {
  addLineItemsToCart(
    email: $email
    cartId: $cartId
    lineItemsInput: $lineItemsInput
    createCartInfo: $createCartInfo
  ) {
    id
    createdAt
    lastModifiedAt
    cartPrice {
      currencyCode
      __typename
    }
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;lineItemsInput&quot;: {
    &quot;items&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;sku&quot;: &quot;${fullSkuId}&quot;,
        &quot;fusionId&quot;: &quot;&quot;,
        &quot;quantity&quot;: 1,
        &quot;brand&quot;: &quot;RH&quot;,
        &quot;giftTo&quot;: &quot;&quot;,
        &quot;giftFrom&quot;: &quot;&quot;,
        &quot;giftMessage&quot;: &quot;&quot;,
        &quot;spoTermsAccepted&quot;: false,
        &quot;spoTerms&quot;: null
      }
    ]
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="7.2_CartProjection" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="8.0_ViewCart" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="false">
              <intProp name="MAX_THREAD_NUMBER">6</intProp>
              <boolProp name="PARENT_SAMPLE">false</boolProp>
              <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.1_AboveNavPromo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AboveNavPromo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.2_CatalogNavigation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.3_WORHMenu" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.4_GetAemModel-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/shopping-cart&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/shopping-cart&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.5_GlobalStylesheet" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.6_GetUserForSession" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserForSession</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.7_SaleCatalogNavigation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.8_GetAemModel-2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}	</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.9_CartProjection" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.10_ShoppingCart" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ShoppingCart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ShoppingCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String, $locale: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId locale: $locale ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode preferredLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ShoppingCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ShoppingCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String, $locale: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId locale: $locale ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode preferredLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.11_MemberPrice" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">MemberPrice</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query MemberPrice($country: String!, $brand: String!) { memberPrice(country: $country, brand: $brand) }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;brand&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">MemberPrice</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query MemberPrice($country: String!, $brand: String!) { memberPrice(country: $country, brand: $brand) }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;brand&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.12_ProductImage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!]) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds ) { productId imageUrl __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: [ &quot;${selectedOptionIds}&quot; ],
  &quot;productId&quot;: &quot;${productId}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!]) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds ) { productId imageUrl __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: [ &quot;${selectedOptionIds}&quot; ],
  &quot;productId&quot;: &quot;${productId}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.13_ProductDetailBulk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductDetailBulk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductDetailBulk($productBulkInput: ProductBulkInput!) { productDetailBulk(productBulkInput: $productBulkInput) { productId displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } personalizeInfo { feeLow feeHigh monogrammable waiveMonogramFee __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductDetailBulk</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductDetailBulk($productBulkInput: ProductBulkInput!) { productDetailBulk(productBulkInput: $productBulkInput) { productId displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } personalizeInfo { feeLow feeHigh monogrammable waiveMonogramFee __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.14_MonogramATGOptionsBulk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">MonogramATGOptionsBulk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query MonogramATGOptionsBulk($productBulkInput: ProductBulkInput!) { monogramATGOptionsBulk(productBulkInput: $productBulkInput) { productId fonts { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode borders { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode style { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode __typename } __typename } __typename } styles { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode borders { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode style { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode __typename } __typename } __typename } colors { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode borders { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode style { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">MonogramATGOptionsBulk</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query MonogramATGOptionsBulk($productBulkInput: ProductBulkInput!) { monogramATGOptionsBulk(productBulkInput: $productBulkInput) { productId fonts { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode borders { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode style { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode __typename } __typename } __typename } styles { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode borders { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode style { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode __typename } __typename } __typename } colors { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode borders { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode style { id displayName imageUrl altImageUrl minLength maxLength numberOfLines cwCode __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.15_ProductImageBulk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductImageBulk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductImageBulk($productBulkInput: ProductBulkInput!) { productImageBulk(productBulkInput: $productBulkInput) { productId imageUrl fullSkuId __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductImageBulk</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductImageBulk($productBulkInput: ProductBulkInput!) { productImageBulk(productBulkInput: $productBulkInput) { productId imageUrl fullSkuId __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.16_SkuRestrictionsBulk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SkuRestrictionsBulk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SkuRestrictionsBulk($productBulkInput: ProductBulkInput!) { skuRestrictionsBulk(productBulkInput: $productBulkInput) { fullSkuId spo membershipSku returnPolicyMessage restockingFee countryRestrictions mattressFeeLocation preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SkuRestrictionsBulk</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SkuRestrictionsBulk($productBulkInput: ProductBulkInput!) { skuRestrictionsBulk(productBulkInput: $productBulkInput) { fullSkuId spo membershipSku returnPolicyMessage restockingFee countryRestrictions mattressFeeLocation preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.17_GiftBoxDetailBulk" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GiftBoxDetailBulk</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GiftBoxDetailBulk($productBulkInput: ProductBulkInput!) { giftBoxDetailBulk(productBulkInput: $productBulkInput) { fullSkuId giftBox giftBoxFee __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GiftBoxDetailBulk</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GiftBoxDetailBulk($productBulkInput: ProductBulkInput!) { giftBoxDetailBulk(productBulkInput: $productBulkInput) { fullSkuId giftBox giftBoxFee __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="9.0_CheckoutAsGuest" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.1_GetAemModel-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/checkout-sign-in-register&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/checkout-sign-in-register&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.2_GetUserForSession" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserForSession</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.3_GetAemModel-2" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/address&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/address&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.4_GetUserPayments" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserPayments</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserPayments($userId: String!) { getUserPaymentMethods(userId: $userId) { userCardInfo { shopperRef cardInfo { pcid cardType expiryMonth expiryYear defaultCard __typename } billToAddress { firstName lastName companyName line1 line2 city state postalCode country phoneNumber __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserPayments</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserPayments($userId: String!) { getUserPaymentMethods(userId: $userId) { userCardInfo { shopperRef cardInfo { pcid cardType expiryMonth expiryYear defaultCard __typename } billToAddress { firstName lastName companyName line1 line2 city state postalCode country phoneNumber __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.5_GetCart" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetCart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId multiSku brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId multiSku brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10.0_ContinueToShippinngAddress" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.1_AnonymousToGuest" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AnonymousToGuest&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;cartId&quot;: &quot;${currentCartId}&quot;,
    &quot;userId&quot;: &quot;${userId}&quot;,
    &quot;email&quot;: &quot;${email}&quot;,
    &quot;firstName&quot;: &quot;Mathew&quot;,
    &quot;lastName&quot;: &quot;Thomas&quot;
  },
  &quot;region&quot;: &quot;US&quot;
},&quot;query&quot;:&quot;mutation AnonymousToGuest($input: AnonymousToGuestInput!, $region: String) {\n  anonymousToGuest(input: $input, region: $region) {\n    id\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AnonymousToGuest</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation AnonymousToGuest($input: AnonymousToGuestInput!, $region: String) {
  anonymousToGuest(input: $input, region: $region) {
    id
    __typename
  }
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;cartId&quot;: &quot;${currentCartId}&quot;,
    &quot;userId&quot;: &quot;${userId}&quot;,
    &quot;email&quot;: &quot;${email}&quot;,
    &quot;firstName&quot;: &quot;Mathew&quot;,
    &quot;lastName&quot;: &quot;Thomas&quot;
  },
  &quot;region&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.2_ValidatePostalCodeByCountryCode" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ValidatePostalCodeByCountryCode</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ValidatePostalCodeByCountryCode($countryCode: String!, $postalCode: String!) { validatePostalCodeByCountryCode( countryCode: $countryCode postalCode: $postalCode ) { ...PostalCodeValidation __typename } } fragment PostalCodeValidation on PostalCodeByCountryCodeResult { isValid __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ValidatePostalCodeByCountryCode</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ValidatePostalCodeByCountryCode($countryCode: String!, $postalCode: String!) { validatePostalCodeByCountryCode( countryCode: $countryCode postalCode: $postalCode ) { ...PostalCodeValidation __typename } } fragment PostalCodeValidation on PostalCodeByCountryCodeResult { isValid __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.3_AVSVerifyAddresses" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AVSVerifyAddresses</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AVSVerifyAddresses($addresses: AddressValidationListInput!, $email: String, $firstName: String, $lastName: String) { AVSVerifyAddresses( addresses: $addresses email: $email firstName: $firstName lastName: $lastName ) { ...AVSAddressValidation __typename } } fragment AVSAddressValidation on AVSAddressListValidationOutputType { records { AddressVerified AvsResponseCode AvsResponseDecision ResponseStatus Address { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } RecomendedAddresses { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } customerMessages addressType __typename } totalRecords __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;addresses&quot;: {
    &quot;records&quot;: [
      {
        &quot;addressType&quot;: &quot;shippingAddress&quot;,
        &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
        &quot;addressLine2&quot;: &quot;&quot;,
        &quot;city&quot;: &quot;Corte Madera&quot;,
        &quot;state&quot;: &quot;CA&quot;,
        &quot;postalCode&quot;: &quot;94925&quot;,
        &quot;countryCode&quot;: &quot;US&quot;,
        &quot;phone&quot;: &quot;3513213212&quot;,
        &quot;eveningPhone&quot;: &quot;&quot;
      }
    ]
  },
  &quot;firstName&quot;: null,
  &quot;lastName&quot;: null,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AVSVerifyAddresses</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AVSVerifyAddresses($addresses: AddressValidationListInput!, $email: String, $firstName: String, $lastName: String) { AVSVerifyAddresses( addresses: $addresses email: $email firstName: $firstName lastName: $lastName ) { ...AVSAddressValidation __typename } } fragment AVSAddressValidation on AVSAddressListValidationOutputType { records { AddressVerified AvsResponseCode AvsResponseDecision ResponseStatus Address { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } RecomendedAddresses { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } customerMessages addressType __typename } totalRecords __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;addresses&quot;: {
    &quot;records&quot;: [
      {
        &quot;addressType&quot;: &quot;shippingAddress&quot;,
        &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
        &quot;addressLine2&quot;: &quot;&quot;,
        &quot;city&quot;: &quot;Corte Madera&quot;,
        &quot;state&quot;: &quot;CA&quot;,
        &quot;postalCode&quot;: &quot;94925&quot;,
        &quot;countryCode&quot;: &quot;US&quot;,
        &quot;phone&quot;: &quot;3513213212&quot;,
        &quot;eveningPhone&quot;: &quot;&quot;
      }
    ]
  },
  &quot;firstName&quot;: null,
  &quot;lastName&quot;: null,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.4_updateCart" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;updateCart&quot;,&quot;variables&quot;:{
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;shouldEnhance&quot;: false
},&quot;query&quot;:&quot;mutation updateCart($email: String!, $cartId: String!, $updateCartInfo: UpdateCartInfo!) {\n  updateCart(email: $email, cartId: $cartId, updateCartInfo: $updateCartInfo) {\n    ...Cart\n    __typename\n  }\n}\n\nfragment Cart on CartType {\n  __typename\n  id\n  requestedDeliveryDate\n  postalCode\n  preferredLanguage\n  country\n  coordGroupType\n  coordGroupGroupable\n  coordGroupUserSelected\n  orderNumber\n  cartSavings\n  isUserMember\n  giftBoxFee\n  hasGiftBox\n  hasGiftFromRegistry\n  hasGiftFromMemberRegistry\n  giftRegistryIdList\n  rushShippable\n  guest {\n    userId\n    ctId\n    atgUserId\n    cwUserId\n    email\n    type\n    typeId\n    sourceCode\n    shopperRef\n    __typename\n  }\n  removedItems {\n    invalidRegion {\n      sku\n      options {\n        id\n        type\n        value\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  lineItems {\n    restrictions {\n      ...LineItemRestrictions\n      __typename\n    }\n    restrictionsApply\n    giftFrom\n    giftTo\n    isMonogramFee\n    shipVia\n    shipViaCode\n    isMonogrammable\n    isPersonalizable\n    fusionId\n    monogram {\n      styleId\n      description\n      maxLines\n      fontCode\n      fontColorCode\n      borderCode\n      lines\n      fulfillmentCode\n      __typename\n    }\n    lineId\n    quantity\n    maxCartQuantity\n    sku\n    skuType\n    multiSkuId\n    brand\n    displayName\n    giftBoxDetail {\n      giftBoxFee\n      giftBoxCurrencyCode\n      __typename\n    }\n    giftWrap\n    deliveryEta\n    deliveryEtaStart\n    deliveryEtaEnd\n    coordGroup\n    registryId\n    spoTerms\n    spoTermsAccepted\n    spoTermsAcceptedDate\n    isMembershipSku\n    productId\n    price {\n      itemPrice\n      memberPrice\n      priceStatus\n      priceType\n      currencyCode\n      originalPrice\n      totalPrice\n      salePrice\n      finalPrice\n      salePriceLabel\n      isOnClearance\n      isOnSale\n      showMemberPrice\n      fees\n      itemShippingSurcharge\n      __typename\n    }\n    options {\n      id\n      type\n      value\n      sortPriority\n      __typename\n    }\n    isGiftFromRegistry\n    linkedLineItemId\n    skuCustomization {\n      type\n      mountType\n      lining\n      panel\n      controlType\n      controlPosition\n      controlLength\n      tiltType\n      controlAndTilt\n      trim\n      width\n      length\n      diameter\n      roomLabel\n      bracketColor\n      rollType\n      fulfillmentCode\n      __typename\n    }\n    childSafety\n    availabilityStatus\n    __typename\n  }\n  shipVia\n  cartPrice {\n    subtotal\n    tax\n    taxDetail {\n      amount\n      name\n      country\n      state\n      imposition\n      rate\n      __typename\n    }\n    totalPrice\n    feeTotal\n    currencyCode\n    isFree\n    fees {\n      feeType\n      quantity\n      value\n      unitCost\n      linkedLineItemId\n      __typename\n    }\n    freight {\n      unlimited\n      ground\n      next\n      second\n      shippingSurcharge\n      __typename\n    }\n    discounts {\n      discountCodeTotal\n      __typename\n    }\n    preBillAmount\n    remainingToBill\n    memberSavings\n    employeeSavings\n    __typename\n  }\n  shipAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  billAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  payments {\n    totalAmountRemaining\n    totalAmountCovered\n    appliedPayments {\n      id\n      paymentMethodType\n      paymentType\n      lastFour\n      amountCovered\n      currencyCode\n      rhPaymentPlan\n      catchAllPayment\n      __typename\n    }\n    __typename\n  }\n  createdAt\n  lastModifiedAt\n  totalLines\n  discountCodes {\n    code\n    name\n    description\n    __typename\n  }\n  brand\n  gallery {\n    galleryId\n    __typename\n  }\n  shipLabelSidemark\n  giftMessage\n  employeeDiscount {\n    description\n    regularDiscount\n    saleDiscount\n    __typename\n  }\n}\n\nfragment LineItemRestrictions on LineItemRestrictionsType {\n  type\n  sku\n  category\n  states\n  countries\n  postalRanges\n  __typename\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">updateCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation updateCart($email: String!, $cartId: String!, $updateCartInfo: UpdateCartInfo!) {
  updateCart(email: $email, cartId: $cartId, updateCartInfo: $updateCartInfo) {
    ...Cart
    __typename
  }
}

fragment Cart on CartType {
  __typename
  id
  requestedDeliveryDate
  postalCode
  preferredLanguage
  country
  coordGroupType
  coordGroupGroupable
  coordGroupUserSelected
  orderNumber
  cartSavings
  isUserMember
  giftBoxFee
  hasGiftBox
  hasGiftFromRegistry
  hasGiftFromMemberRegistry
  giftRegistryIdList
  rushShippable
  guest {
    userId
    ctId
    atgUserId
    cwUserId
    email
    type
    typeId
    sourceCode
    shopperRef
    __typename
  }
  removedItems {
    invalidRegion {
      sku
      options {
        id
        type
        value
        __typename
      }
      __typename
    }
    __typename
  }
  lineItems {
    restrictions {
      ...LineItemRestrictions
      __typename
    }
    restrictionsApply
    giftFrom
    giftTo
    isMonogramFee
    shipVia
    shipViaCode
    isMonogrammable
    isPersonalizable
    fusionId
    monogram {
      styleId
      description
      maxLines
      fontCode
      fontColorCode
      borderCode
      lines
      fulfillmentCode
      __typename
    }
    lineId
    quantity
    maxCartQuantity
    sku
    skuType
    multiSkuId
    brand
    displayName
    giftBoxDetail {
      giftBoxFee
      giftBoxCurrencyCode
      __typename
    }
    giftWrap
    deliveryEta
    deliveryEtaStart
    deliveryEtaEnd
    coordGroup
    registryId
    spoTerms
    spoTermsAccepted
    spoTermsAcceptedDate
    isMembershipSku
    productId
    price {
      itemPrice
      memberPrice
      priceStatus
      priceType
      currencyCode
      originalPrice
      totalPrice
      salePrice
      finalPrice
      salePriceLabel
      isOnClearance
      isOnSale
      showMemberPrice
      fees
      itemShippingSurcharge
      __typename
    }
    options {
      id
      type
      value
      sortPriority
      __typename
    }
    isGiftFromRegistry
    linkedLineItemId
    skuCustomization {
      type
      mountType
      lining
      panel
      controlType
      controlPosition
      controlLength
      tiltType
      controlAndTilt
      trim
      width
      length
      diameter
      roomLabel
      bracketColor
      rollType
      fulfillmentCode
      __typename
    }
    childSafety
    availabilityStatus
    __typename
  }
  shipVia
  cartPrice {
    subtotal
    tax
    taxDetail {
      amount
      name
      country
      state
      imposition
      rate
      __typename
    }
    totalPrice
    feeTotal
    currencyCode
    isFree
    fees {
      feeType
      quantity
      value
      unitCost
      linkedLineItemId
      __typename
    }
    freight {
      unlimited
      ground
      next
      second
      shippingSurcharge
      __typename
    }
    discounts {
      discountCodeTotal
      __typename
    }
    preBillAmount
    remainingToBill
    memberSavings
    employeeSavings
    __typename
  }
  shipAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  billAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  payments {
    totalAmountRemaining
    totalAmountCovered
    appliedPayments {
      id
      paymentMethodType
      paymentType
      lastFour
      amountCovered
      currencyCode
      rhPaymentPlan
      catchAllPayment
      __typename
    }
    __typename
  }
  createdAt
  lastModifiedAt
  totalLines
  discountCodes {
    code
    name
    description
    __typename
  }
  brand
  gallery {
    galleryId
    __typename
  }
  shipLabelSidemark
  giftMessage
  employeeDiscount {
    description
    regularDiscount
    saleDiscount
    __typename
  }
}

fragment LineItemRestrictions on LineItemRestrictionsType {
  type
  sku
  category
  states
  countries
  postalRanges
  __typename
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;shouldEnhance&quot;: false
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.6_SetCartAddresses" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SetCartAddresses&quot;,&quot;variables&quot;:{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;shippingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Rd&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skk@yopmail.com&quot;,
    &quot;firstName&quot;: &quot;Rohit&quot;,
    &quot;lastName&quot;: &quot;polard&quot;,
    &quot;phone&quot;: &quot;2542343247&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925-1214&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;verified&quot;
  },
  &quot;billingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skk@yopmail.com&quot;,
    &quot;firstName&quot;: &quot;Rohit&quot;,
    &quot;lastName&quot;: &quot;polard&quot;,
    &quot;phone&quot;: &quot;2542343247&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;unverified&quot;
  }
},&quot;query&quot;:&quot;mutation SetCartAddresses($email: String!, $cartId: String!, $shippingAddress: AddressInput!, $billingAddress: AddressInput, $updateCartInfo: UpdateCartInfo) {\n  setCartAddresses(\n    email: $email\n    cartId: $cartId\n    shippingAddress: $shippingAddress\n    billingAddress: $billingAddress\n    updateCartInfo: $updateCartInfo\n  ) {\n    ...Cart\n    __typename\n  }\n}\n\nfragment Cart on CartType {\n  __typename\n  id\n  requestedDeliveryDate\n  postalCode\n  preferredLanguage\n  displayLanguage\n  country\n  coordGroupType\n  coordGroupGroupable\n  coordGroupUserSelected\n  orderNumber\n  cartSavings\n  isUserMember\n  giftBoxFee\n  hasGiftBox\n  hasGiftFromRegistry\n  hasGiftFromMemberRegistry\n  giftRegistryIdList\n  rushShippable\n  guest {\n    userId\n    ctId\n    atgUserId\n    cwUserId\n    email\n    type\n    typeId\n    sourceCode\n    shopperRef\n    __typename\n  }\n  removedItems {\n    invalidRegion {\n      sku\n      options {\n        id\n        type\n        value\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  lineItems {\n    restrictions {\n      ...LineItemRestrictions\n      __typename\n    }\n    restrictionsApply\n    giftFrom\n    giftTo\n    isMonogramFee\n    shipVia\n    shipViaCode\n    isMonogrammable\n    isPersonalizable\n    fusionId\n    monogram {\n      styleId\n      description\n      maxLines\n      fontCode\n      fontColorCode\n      borderCode\n      lines\n      fulfillmentCode\n      __typename\n    }\n    lineId\n    quantity\n    maxCartQuantity\n    sku\n    skuType\n    multiSkuId\n    multiSku\n    brand\n    displayName\n    giftBoxDetail {\n      giftBoxFee\n      giftBoxCurrencyCode\n      __typename\n    }\n    giftWrap\n    deliveryEta\n    deliveryEtaStart\n    deliveryEtaEnd\n    coordGroup\n    registryId\n    spoTerms\n    spoTermsAccepted\n    spoTermsAcceptedDate\n    isMembershipSku\n    productId\n    price {\n      itemPrice\n      memberPrice\n      priceStatus\n      priceType\n      currencyCode\n      originalPrice\n      totalPrice\n      salePrice\n      finalPrice\n      salePriceLabel\n      isOnClearance\n      isOnSale\n      showMemberPrice\n      fees\n      itemShippingSurcharge\n      __typename\n    }\n    options {\n      id\n      type\n      value\n      sortPriority\n      __typename\n    }\n    isGiftFromRegistry\n    linkedLineItemId\n    skuCustomization {\n      type\n      mountType\n      lining\n      panel\n      controlType\n      controlPosition\n      controlLength\n      tiltType\n      controlAndTilt\n      trim\n      width\n      length\n      diameter\n      roomLabel\n      bracketColor\n      rollType\n      fulfillmentCode\n      __typename\n    }\n    childSafety\n    availabilityStatus\n    __typename\n  }\n  shipVia\n  cartPrice {\n    subtotal\n    tax\n    taxDetail {\n      amount\n      name\n      country\n      state\n      imposition\n      rate\n      __typename\n    }\n    totalPrice\n    feeTotal\n    currencyCode\n    isFree\n    fees {\n      feeType\n      quantity\n      value\n      unitCost\n      linkedLineItemId\n      __typename\n    }\n    freight {\n      unlimited\n      ground\n      next\n      second\n      shippingSurcharge\n      __typename\n    }\n    discounts {\n      discountCodeTotal\n      __typename\n    }\n    preBillAmount\n    remainingToBill\n    memberSavings\n    employeeSavings\n    __typename\n  }\n  shipAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  billAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  payments {\n    totalAmountRemaining\n    totalAmountCovered\n    appliedPayments {\n      id\n      paymentMethodType\n      paymentType\n      lastFour\n      amountCovered\n      currencyCode\n      rhPaymentPlan\n      catchAllPayment\n      __typename\n    }\n    __typename\n  }\n  createdAt\n  lastModifiedAt\n  totalLines\n  discountCodes {\n    code\n    name\n    description\n    __typename\n  }\n  brand\n  gallery {\n    galleryId\n    __typename\n  }\n  shipLabelSidemark\n  giftMessage\n  employeeDiscount {\n    description\n    regularDiscount\n    saleDiscount\n    __typename\n  }\n}\n\nfragment LineItemRestrictions on LineItemRestrictionsType {\n  type\n  sku\n  category\n  states\n  countries\n  postalRanges\n  __typename\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SetCartAddresses</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">mutation SetCartAddresses($email: String!, $cartId: String!, $shippingAddress: AddressInput!, $billingAddress: AddressInput, $updateCartInfo: UpdateCartInfo) {
  setCartAddresses(
    email: $email
    cartId: $cartId
    shippingAddress: $shippingAddress
    billingAddress: $billingAddress
    updateCartInfo: $updateCartInfo
  ) {
    ...Cart
    __typename
  }
}

fragment Cart on CartType {
  __typename
  id
  requestedDeliveryDate
  postalCode
  preferredLanguage
  displayLanguage
  country
  coordGroupType
  coordGroupGroupable
  coordGroupUserSelected
  orderNumber
  cartSavings
  isUserMember
  giftBoxFee
  hasGiftBox
  hasGiftFromRegistry
  hasGiftFromMemberRegistry
  giftRegistryIdList
  rushShippable
  guest {
    userId
    ctId
    atgUserId
    cwUserId
    email
    type
    typeId
    sourceCode
    shopperRef
    __typename
  }
  removedItems {
    invalidRegion {
      sku
      options {
        id
        type
        value
        __typename
      }
      __typename
    }
    __typename
  }
  lineItems {
    restrictions {
      ...LineItemRestrictions
      __typename
    }
    restrictionsApply
    giftFrom
    giftTo
    isMonogramFee
    shipVia
    shipViaCode
    isMonogrammable
    isPersonalizable
    fusionId
    monogram {
      styleId
      description
      maxLines
      fontCode
      fontColorCode
      borderCode
      lines
      fulfillmentCode
      __typename
    }
    lineId
    quantity
    maxCartQuantity
    sku
    skuType
    multiSkuId
    multiSku
    brand
    displayName
    giftBoxDetail {
      giftBoxFee
      giftBoxCurrencyCode
      __typename
    }
    giftWrap
    deliveryEta
    deliveryEtaStart
    deliveryEtaEnd
    coordGroup
    registryId
    spoTerms
    spoTermsAccepted
    spoTermsAcceptedDate
    isMembershipSku
    productId
    price {
      itemPrice
      memberPrice
      priceStatus
      priceType
      currencyCode
      originalPrice
      totalPrice
      salePrice
      finalPrice
      salePriceLabel
      isOnClearance
      isOnSale
      showMemberPrice
      fees
      itemShippingSurcharge
      __typename
    }
    options {
      id
      type
      value
      sortPriority
      __typename
    }
    isGiftFromRegistry
    linkedLineItemId
    skuCustomization {
      type
      mountType
      lining
      panel
      controlType
      controlPosition
      controlLength
      tiltType
      controlAndTilt
      trim
      width
      length
      diameter
      roomLabel
      bracketColor
      rollType
      fulfillmentCode
      __typename
    }
    childSafety
    availabilityStatus
    __typename
  }
  shipVia
  cartPrice {
    subtotal
    tax
    taxDetail {
      amount
      name
      country
      state
      imposition
      rate
      __typename
    }
    totalPrice
    feeTotal
    currencyCode
    isFree
    fees {
      feeType
      quantity
      value
      unitCost
      linkedLineItemId
      __typename
    }
    freight {
      unlimited
      ground
      next
      second
      shippingSurcharge
      __typename
    }
    discounts {
      discountCodeTotal
      __typename
    }
    preBillAmount
    remainingToBill
    memberSavings
    employeeSavings
    __typename
  }
  shipAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  billAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  payments {
    totalAmountRemaining
    totalAmountCovered
    appliedPayments {
      id
      paymentMethodType
      paymentType
      lastFour
      amountCovered
      currencyCode
      rhPaymentPlan
      catchAllPayment
      __typename
    }
    __typename
  }
  createdAt
  lastModifiedAt
  totalLines
  discountCodes {
    code
    name
    description
    __typename
  }
  brand
  gallery {
    galleryId
    __typename
  }
  shipLabelSidemark
  giftMessage
  employeeDiscount {
    description
    regularDiscount
    saleDiscount
    __typename
  }
}

fragment LineItemRestrictions on LineItemRestrictionsType {
  type
  sku
  category
  states
  countries
  postalRanges
  __typename
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;shippingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Rd&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skk@yopmail.com&quot;,
    &quot;firstName&quot;: &quot;Rohit&quot;,
    &quot;lastName&quot;: &quot;polard&quot;,
    &quot;phone&quot;: &quot;2542343247&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925-1214&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;verified&quot;
  },
  &quot;billingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skk@yopmail.com&quot;,
    &quot;firstName&quot;: &quot;Rohit&quot;,
    &quot;lastName&quot;: &quot;polard&quot;,
    &quot;phone&quot;: &quot;2542343247&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;unverified&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/location-select</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">rh-estore-client</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="x-operation" elementType="Header">
                    <stringProp name="Header.name">x-operation</stringProp>
                    <stringProp name="Header.value">Search</stringProp>
                  </elementProp>
                  <elementProp name="Client-Origin" elementType="Header">
                    <stringProp name="Header.name">Client-Origin</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value"> </stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/checkout/address.jsps</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.7_GetUserForSession" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserForSession</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.5_GetCart" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetCart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId multiSku brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId multiSku brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.8_GetAemModel-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/payment&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/payment&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.9_CartProjection" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.10_GetCart" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetCart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId multiSku brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId multiSku brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.11_GetCart" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetCart</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename } </stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="false">
              <intProp name="MAX_THREAD_NUMBER">6</intProp>
              <boolProp name="PARENT_SAMPLE">false</boolProp>
              <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
            </com.blazemeter.jmeter.controller.ParallelSampler>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">5000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GraphQL-CSR" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">30</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="host" elementType="Argument">
              <stringProp name="Argument.name">host</stringProp>
              <stringProp name="Argument.value">${__P(host,stg2.rhnonprod.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">stg2.rhnonprod.com?outdoor=true</stringProp>
            </elementProp>
            <elementProp name="path" elementType="Argument">
              <stringProp name="Argument.name">path</stringProp>
              <stringProp name="Argument.value">rh-experience-layer-v1-stg2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="env" elementType="Argument">
              <stringProp name="Argument.name">env</stringProp>
              <stringProp name="Argument.value">${__P(env,stg2)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies">
            <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_AEM_RENDER_CONTROL" elementType="Cookie" testname="FEATURE_AEM_RENDER_CONTROL">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_WISTIA_OPTIMIZATIONS" elementType="Cookie" testname="FEATURE_WISTIA_OPTIMIZATIONS">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="fusion_search" elementType="Cookie" testname="fusion_search">
              <stringProp name="Cookie.value">true</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="endpoint" elementType="Cookie" testname="endpoint">
              <stringProp name="Cookie.value">stg2</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
            <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
              <stringProp name="Cookie.value">false</stringProp>
              <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="Cookie.path">/</stringProp>
              <boolProp name="Cookie.secure">false</boolProp>
              <longProp name="Cookie.expires">0</longProp>
              <boolProp name="Cookie.path_specified">true</boolProp>
              <boolProp name="Cookie.domain_specified">true</boolProp>
            </elementProp>
          </collectionProp>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host}</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="x-request-id" elementType="Header">
              <stringProp name="Header.name">x-request-id</stringProp>
              <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Mode" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
              <stringProp name="Header.value">cors</stringProp>
            </elementProp>
            <elementProp name="Referer" elementType="Header">
              <stringProp name="Header.name">Referer</stringProp>
              <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
            </elementProp>
            <elementProp name="apollographql-client-name" elementType="Header">
              <stringProp name="Header.name">apollographql-client-name</stringProp>
              <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Site" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
              <stringProp name="Header.value">same-origin</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
            </elementProp>
            <elementProp name="x-operation" elementType="Header">
              <stringProp name="Header.name">x-operation</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="Client-Origin" elementType="Header">
              <stringProp name="Header.name">Client-Origin</stringProp>
              <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
            <elementProp name="authorization" elementType="Header">
              <stringProp name="Header.name">authorization</stringProp>
              <stringProp name="Header.value"></stringProp>
            </elementProp>
            <elementProp name="content-type" elementType="Header">
              <stringProp name="Header.name">content-type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
            </elementProp>
            <elementProp name="Sec-Fetch-Dest" elementType="Header">
              <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
              <stringProp name="Header.value">empty</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.0_Homepage" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">none</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-User" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                    <stringProp name="Header.value">?1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">document</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
                <collectionProp name="CookieManager.cookies">
                  <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="PROTECT_FEATURE_SSR" elementType="Cookie" testname="PROTECT_FEATURE_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                  <elementProp name="FEATURE_AEM_SSR" elementType="Cookie" testname="FEATURE_AEM_SSR">
                    <stringProp name="Cookie.value">true</stringProp>
                    <stringProp name="Cookie.domain">rh.com</stringProp>
                    <stringProp name="Cookie.path">/</stringProp>
                    <boolProp name="Cookie.secure">false</boolProp>
                    <longProp name="Cookie.expires">0</longProp>
                    <boolProp name="Cookie.path_specified">true</boolProp>
                    <boolProp name="Cookie.domain_specified">true</boolProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="CookieManager.clearEachIteration">false</boolProp>
                <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
              </CookieManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.0_Homepage" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.1_AboveNavPromo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AboveNavPromo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.2_GetAemModel" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/home&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/home&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.3_GlobalStylesheet" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.4_GetUserForSession" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserForSession</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean, $doNotMutateCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart doNotMutateCart: $doNotMutateCart ) { sessionId rhuid location currentCartId validAssociate location rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true,
  &quot;doNotMutateCart&quot;: false
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean, $doNotMutateCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart doNotMutateCart: $doNotMutateCart ) { sessionId rhuid location currentCartId validAssociate location rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true,
  &quot;doNotMutateCart&quot;: false
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="email" enabled="true">
                <stringProp name="TestPlan.comments">e05e4753a0884a61a7ec5aa1e4b03c93@some.com</stringProp>
                <stringProp name="JSONPostProcessor.referenceNames">email</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.email</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="currentCartId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">currentCartId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.currentCartId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhuid</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="firstName" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">firstName</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.firstName</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="lastName" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">lastName</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.lastName</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.io.File;
import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;


String username = vars.get(&quot;userId&quot;);
//String csrfToken = vars.get(&quot;csrfToken&quot;);

File file = new File(&quot;C:\\Performance_Testing\\JMeter_Scripts\\US\\FeatureTesting\\token2.csv&quot;);
FileWriter fstream = new FileWriter(file, true);

BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;\n&quot;+userId+);


out.close();
fstream.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.io.File;
import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;


String username = vars.get(&quot;userId&quot;);
//String csrfToken = vars.get(&quot;csrfToken&quot;);

File file = new File(&quot;C:\\Performance_Testing\\JMeter_Scripts\\US\\FeatureTesting\\token2.csv&quot;);
FileWriter fstream = new FileWriter(file, true);

BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;\n&quot;+userId+);


out.close();
fstream.close();</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import java.io.File;
import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;


String username = vars.get(&quot;userId&quot;);
//String csrfToken = vars.get(&quot;optionsId&quot;);

File file = new File(&quot;C:\\Performance_Testing\\id1.csv&quot;);
FileWriter fstream = new FileWriter(file, true);

BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;\n&quot;+username);


out.close();
fstream.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.5_GetAemModel" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/home&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/home&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.5_CartProjection" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.7_CatalogNavigation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CollectionGalleryIds" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">CollectionGalleryIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories[0].childCategories[?(@.targetUrl contains &apos;collections&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ProductGalleryIds" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">ProductGalleryIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories..[?(@.targetUrl contains &apos;products&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="CollectionGalleryIds" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">int CollectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger()
int ProductGalleryIds_matchNr = vars.get(&quot;ProductGalleryIds_matchNr&quot;).toInteger()

Random random = new Random()
int CollectionGalleryIds_index = random.nextInt(CollectionGalleryIds_matchNr) + 1
int ProductGalleryIds_index = random.nextInt(ProductGalleryIds_matchNr) + 1

String CollectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot;+CollectionGalleryIds_index)
String ProductGalleryId = vars.get(&quot;ProductGalleryIds_&quot;+ProductGalleryIds_index)
//log.info(&quot;CollectionGalleryId: &quot;+CollectionGalleryId)
//log.info(&quot;ProductGalleryId: &quot;+ProductGalleryId)
vars.put(&quot;CollectionGalleryId&quot;,CollectionGalleryId)
vars.put(&quot;ProductGalleryIds&quot;,ProductGalleryId)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.8_WORHMenu" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.9_SaleCatalogNavigation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="1.10_AboveNavPromo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AboveNavPromo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.0_Auth" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/auth/realms/staging/protocol/openid-connect/auth" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                    <stringProp name="Argument.value">rh-mobile-frontend</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                    <stringProp name="Argument.value">https://stg2.rhnonprod.com/silent-check-sso.html</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="state" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">state</stringProp>
                    <stringProp name="Argument.value">${__UUID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_mode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_mode</stringProp>
                    <stringProp name="Argument.value">fragment</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                    <stringProp name="Argument.value">code</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                    <stringProp name="Argument.value">openid</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nonce" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nonce</stringProp>
                    <stringProp name="Argument.value">${__UUID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="prompt" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">prompt</stringProp>
                    <stringProp name="Argument.value">none</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">stg2.rhnonprod.com</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/auth/realms/staging/protocol/openid-connect/auth?</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">https://rh.com/silent-check-sso.html</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">iframe</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Cookie" elementType="Header">
                    <stringProp name="Header.name">Cookie</stringProp>
                    <stringProp name="Header.value">NEWEXP=true; ui_asset_path=/rh-mobile-frontend-v1-shark/; endpoint=shark; FEATURE_INTERNATIONAL=true; FEATURE_SUPPRESS_UK=false; FEATURE_AEM_RENDER_CONTROL=true; FEATURE_WISTIA_OPTIMIZATIONS=true; fusion_search=true; PF_EXP=DESKTOP; NEWX0422=true</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Ch-Ua" elementType="Header">
                    <stringProp name="Header.name">Sec-Ch-Ua</stringProp>
                    <stringProp name="Header.value">&quot;Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;115&quot;, &quot;Chromium&quot;;v=&quot;115&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Ch-Ua-Mobile" elementType="Header">
                    <stringProp name="Header.name">Sec-Ch-Ua-Mobile</stringProp>
                    <stringProp name="Header.value">?0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Ch-Ua-Platform" elementType="Header">
                    <stringProp name="Header.name">Sec-Ch-Ua-Platform</stringProp>
                    <stringProp name="Header.value">&quot;Windows&quot;</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value"> iframe</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">navigate</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value"> same-site</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="3.0_Collection Gallery" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CollectionGalleryId" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">CG.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">CollectionGalleryId</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.1_AboveNavPromo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">AboveNavPromo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">AboveNavPromo</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-AboveNavPromo</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.2_Catalog_Navigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CollectionGalleryIds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CollectionGalleryIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories[*].childCategories[?(@.targetUrl contains &apos;collections&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ProductGalleryIds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ProductGalleryIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.catalogNavigation.childCategories..[?(@.targetUrl contains &apos;products&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="CollectionGalleryIds" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">int CollectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger()
int ProductGalleryIds_matchNr = vars.get(&quot;ProductGalleryIds_matchNr&quot;).toInteger()

Random random = new Random()
int CollectionGalleryIds_index = random.nextInt(CollectionGalleryIds_matchNr) + 1
int ProductGalleryIds_index = random.nextInt(ProductGalleryIds_matchNr) + 1

String CollectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot;+CollectionGalleryIds_index)
String ProductGalleryId = vars.get(&quot;ProductGalleryIds_&quot;+ProductGalleryIds_index)
//log.info(&quot;CollectionGalleryId: &quot;+CollectionGalleryId)
//log.info(&quot;ProductGalleryId: &quot;+ProductGalleryId)
vars.put(&quot;CollectionGalleryId&quot;,CollectionGalleryId)
vars.put(&quot;ProductGalleryIds&quot;,ProductGalleryId)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev-Perf_CG-Catalog_Navigation_API</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.3_WORHMenu" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">WORHMenu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-WORHMenu-1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.4_PromoDisplayContent" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">PromoDisplayContent</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;context&quot;: &quot;CategorySitewideBanner&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">PromoDisplayContent</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query PromoDisplayContent($context: String!, $deviceType: String = &quot;mobile&quot;, $siteId: String!) { promoDisplayContent(context: $context, deviceType: $deviceType, siteId: $siteId) { ...PromoDisplayFields __typename } } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku priceRange { memberLowestListPrice __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;mobile&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;context&quot;: &quot;CategorySitewideBanner&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-PromoDisplayContent</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.5_CollectionGallery" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CollectionGallery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CollectionGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $countryCode: String, $userType: String, $siteId: String, $measureSystem: String, $locale: String) { collectionGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode countryCode: $countryCode userType: $userType siteId: $siteId measureSystem: $measureSystem locale: $locale ) { amountRemaining nextStart collectionGallery { ...CollectionCategoryFields __typename } __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubtitle3 bannerSubSubTitle bannerSubtitle3 bannerSwatchImage dynamicSwatches { totalNumSwatchIds moreNumSwatchIds top5SwatchIds { id sale imageUrl displayName imageRef __typename } __typename } promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts stockInfo { totalSkus inStock inStockQty __typename } stockedDeliveryMessage specialOrderDeliveryMessage additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } stockInfo { ...Instock_qtyFields __typename } headerConfig { title template promoDisplay { promoDisplay { banners { type value __typename } dynamicText { attribute value __typename } MediaText { MEDIA __typename } __typename } __typename } __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus } fragment Instock_qtyFields on StockInfo { __typename totalSkus inStock inStockQty }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${CollectionGalleryId}&quot;,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;count&quot;: 15,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;US&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CollectionGallery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CollectionGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $countryCode: String, $userType: String, $siteId: String, $measureSystem: String, $locale: String) { collectionGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode countryCode: $countryCode userType: $userType siteId: $siteId measureSystem: $measureSystem locale: $locale ) { amountRemaining nextStart collectionGallery { ...CollectionCategoryFields __typename } __typename } } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubtitle3 bannerSubSubTitle bannerSubtitle3 bannerSwatchImage dynamicSwatches { totalNumSwatchIds moreNumSwatchIds top5SwatchIds { id sale imageUrl displayName imageRef __typename } __typename } promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts stockInfo { totalSkus inStock inStockQty __typename } stockedDeliveryMessage specialOrderDeliveryMessage additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } stockInfo { ...Instock_qtyFields __typename } headerConfig { title template promoDisplay { promoDisplay { banners { type value __typename } dynamicText { attribute value __typename } MediaText { MEDIA __typename } __typename } __typename } __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus } fragment Instock_qtyFields on StockInfo { __typename totalSkus inStock inStockQty }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${CollectionGalleryId}&quot;,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;count&quot;: 15,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;US&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ProductGalleryId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">ProductGalleryId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.collectionGallery.collectionGallery.[*].[?(@.hasProducts == true)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="ProductGalleryId" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import java.util.Random;

String productGalleryId = vars.get(&quot;ProductGalleryId&quot;);
Random random = new Random();

if (productGalleryId.equals(&quot;NA&quot;)) {
    int collectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger();
    int productGalleryIds_matchNr = vars.get(&quot;ProductGalleryIds_matchNr&quot;).toInteger();
    int collectionGalleryIds_index = random.nextInt(collectionGalleryIds_matchNr) + 1;
    int productGalleryIds_index = random.nextInt(productGalleryIds_matchNr) + 1;
    String collectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot; + collectionGalleryIds_index);
    productGalleryId = vars.get(&quot;ProductGalleryIds_&quot; + productGalleryIds_index);
    vars.put(&quot;CollectionGalleryId&quot;, collectionGalleryId);
    vars.put(&quot;ProductGalleryId&quot;, productGalleryId);
} else {
    int collectionGalleryIds_matchNr = vars.get(&quot;CollectionGalleryIds_matchNr&quot;).toInteger();
    int collectionGalleryIds_index = random.nextInt(collectionGalleryIds_matchNr) + 1;
    String collectionGalleryId = vars.get(&quot;CollectionGalleryIds_&quot; + collectionGalleryIds_index);
    vars.put(&quot;CollectionGalleryId&quot;, collectionGalleryId);
}

//log.info(&quot;CollectionGalleryId: &quot; + vars.get(&quot;CollectionGalleryId&quot;));
//log.info(&quot;ProductGalleryId: &quot; + vars.get(&quot;ProductGalleryId&quot;));</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/location-select</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">CollectionGallery</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/category/collections.jsp?categoryId=${CollectionGalleryId}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.6_GetAemModel" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/collections&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/collections&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-GetAemModel-1</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.7_GlobalStylesheet" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-GlobalStylesheet</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.8_GetUserForSession" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: false
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: false
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="email" enabled="true">
              <stringProp name="TestPlan.comments">e05e4753a0884a61a7ec5aa1e4b03c93@some.com</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">email</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.email</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="currentCartId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="userId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">userId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhuid</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="firstName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">firstName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.firstName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="lastName" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">lastName</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.rhUser.lastName</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-GetUserForSession</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.9_SaleCatalogNavigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-CatalogNavigation-2</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.10_GetAemModel" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!) { hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-GetAemModel-2</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="3.11_CartProjection" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">eStore-Stg2/cartcheckoutdev_CG-CartProjection</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.TimesVsThreadsGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times vs Threads" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
            <longProp name="interval_grouping">500</longProp>
            <boolProp name="graph_aggregated">false</boolProp>
            <stringProp name="include_sample_labels"></stringProp>
            <stringProp name="exclude_sample_labels"></stringProp>
            <stringProp name="start_offset"></stringProp>
            <stringProp name="end_offset"></stringProp>
            <boolProp name="include_checkbox_state">false</boolProp>
            <boolProp name="exclude_checkbox_state">false</boolProp>
          </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="4.0_Product Gallery" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="ProductGalleryId" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">PG.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">ProductGalleryId</stringProp>
          </CSVDataSet>
          <hashTree/>
          <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="false">
            <intProp name="MAX_THREAD_NUMBER">6</intProp>
            <boolProp name="PARENT_SAMPLE">false</boolProp>
            <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
          </com.blazemeter.jmeter.controller.ParallelSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.1_AboveNavPromo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">AboveNavPromo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.2_CatalogNavigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.3_WORHMenu-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">WORHMenu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.4_Search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Search&quot;,&quot;variables&quot;:{
  &quot;ntt&quot;: &quot;category:${ProductGalleryId}&quot;,
  &quot;nrpp&quot;: 48,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;nextgenDriven&quot;: false
},&quot;query&quot;:&quot;query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String, $nextgenDriven: Boolean, $maxSearchTab: Boolean, $isSearchBoxUse: Boolean) {\n  search(\n    ntt: $ntt\n    contentType: $contentType\n    n: $n\n    nrpp: $nrpp\n    ns: $ns\n    no: $no\n    country: $country\n    currencyCode: $currencyCode\n    userType: $userType\n    site: $site\n    infiniteScroll: $infiniteScroll\n    categoryId: $categoryId\n    sale: $sale\n    locale: $locale\n    nextgenDriven: $nextgenDriven\n    maxSearchTab: $maxSearchTab\n    isSearchBoxUse: $isSearchBoxUse\n  ) {\n    redirectUrl\n    stocked\n    zeroResults {\n      ...ZeroResultFields\n      __typename\n    }\n    adjustedSearches {\n      ...AdjustedSearchFields\n      __typename\n    }\n    sizeFacets\n    materialFacets\n    resultList {\n      lastRecNum\n      firstRecNum\n      recsPerPage\n      totalNumRecs\n      records {\n        recordType\n        product {\n          newPdpLayout\n          altImageUrl\n          imageUrl\n          galleryDescription\n          alternateImages {\n            imageUrl\n            __typename\n          }\n          displayName\n          anchor\n          repositoryId\n          colorizable\n          imageFlip\n          newProduct\n          emptyProduct\n          metaProductComponent\n          removeFromBrowse\n          pgCrop\n          pgCropRules\n          rhr\n          pdpImageLayout\n          skuPriceInfo {\n            fullSkuId\n            currencySymbol\n            listPrice\n            salePrice\n            memberPrice\n            tradePrice\n            contractPrice\n            nextgenDriven\n            onSale\n            onClearance\n            showMemberPrice\n            skuOptions {\n              id\n              optionType\n              label\n              __typename\n            }\n            __typename\n          }\n          metaProduct\n          priceInfo {\n            currencySymbol\n            isCustomProduct\n            isRetail\n            isUnavailable\n            priceFilter\n            isSale\n            priceMessage\n            priceRange {\n              allOnSale\n              assetId\n              currencyApplied\n              highestFullSkuId\n              highestPaidFullSkuId\n              lowestFullSkuId\n              lowestPaidFullSkuId\n              noPriceRange\n              onClearance\n              onSale\n              onSaleAndOnClearance\n              previewMode\n              salePriceListId\n              tradeBest\n              __typename\n            }\n            rangeType\n            showMemberPrice\n            strikePriceLabel\n            priceMessagePrice\n            listPrices\n            listPriceLabel\n            salePrices\n            salePriceLabel\n            memberPrices\n            memberPriceLabel\n            lowestMemberPrice\n            lowestSalePrice\n            overridePriceLabel\n            skulowestListPrice\n            skulowestMemberPrice\n            skulowestSalePrice\n            nextGenDriven\n            nextGenDrivenOnSale\n            __typename\n          }\n          swatchInfo {\n            swatchesToDisplay {\n              imageRef\n              imageUrl\n              swatchId\n              displayName\n              __typename\n            }\n            swatchProductImages {\n              imageUrl\n              swatchId\n              __typename\n            }\n            numAdditionalSwatchesAvailable\n            numAdditionalSaleSwatchesAvailable\n            __typename\n          }\n          galleryDescription\n          percentSaleSkus\n          lowestskuPriceInfo {\n            skuListSaleprice\n            skuMemberSalePrice\n            skuSalePrice\n            __typename\n          }\n          __typename\n        }\n        sku {\n          fullSkuId\n          __typename\n        }\n        __typename\n      }\n      sortOptions {\n        navigationState\n        label\n        selected\n        __typename\n      }\n      __typename\n    }\n    resultTabs {\n      ...ResultTab\n      __typename\n    }\n    tabInfo {\n      tabs {\n        site\n        numResults\n        tabNo\n        displayName\n        activeTab\n        __typename\n      }\n      __typename\n    }\n    booleanFacets {\n      ...RefinementMenu\n      __typename\n    }\n    refinementMenus {\n      ...RefinementMenu\n      __typename\n    }\n    otherInfo {\n      ...OtherInfo\n      __typename\n    }\n    instructionResultList {\n      ...InstructionResultList\n      __typename\n    }\n    productCarousel {\n      ...ProductCarousel\n      __typename\n    }\n    promoDisplay {\n      ...PromoDisplayFields\n      __typename\n    }\n    searchQueryId\n    filterQueries\n    skuSearch\n    q\n    sku_siteId\n    ruleExecuted\n    saleMemberInfo {\n      ...SaleMemberInfoFields\n      __typename\n    }\n    ATGCollectionGalleryInfo {\n      collectionGallery {\n        ...ATGCollectionGalleryInfo\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PromoDisplayFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  subItems {\n    ...SubItem\n    __typename\n  }\n  template\n  text\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n  title\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Layer on PromoDisplayLayer {\n  __typename\n  layerType\n  label\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  dynamicText {\n    verticalAlign\n    horizontalAlign\n    classes\n    promoId\n    styles\n    topCoordinate\n    rightCoordinate\n    bottomCoordinate\n    leftCoordinate\n    width\n    modalType\n    __typename\n  }\n  htmlText\n  shortText\n  link\n  modal\n  path\n}\n\nfragment DynamicText on PromoDisplayDynamicText {\n  __typename\n  layout\n  alt\n  width\n  style\n  height\n  coords\n  productIds\n  categoryId\n  wistia\n  transitionStartStyles\n  transitionEndStyles\n  transitionInDelay\n  exclusionParam\n  modalType\n  addbanner\n  autoplay\n  slidetime\n  easing\n  pauseOnHover\n  effecttime\n  resetOffScreen\n}\n\nfragment CatalogAsset on PromoDisplayCatalogAsset {\n  __typename\n  skuId\n  categoryId\n  productId\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  quickLook\n  id\n}\n\nfragment SubItem on PromoDisplay {\n  __typename\n  ...SubItemFields\n  subItems {\n    ...SubItemFields\n    __typename\n  }\n}\n\nfragment SubItemFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  template\n  text\n  title\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n}\n\nfragment CategoryProductFields on CategoryProduct {\n  __typename\n  id\n  displayName\n  imageUrl\n  imageFlip\n  altImages {\n    imageUrl\n    __typename\n  }\n  galleryDescription\n  newProduct\n  type\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  uxAttributes {\n    triggerSwatchImage\n    productType\n    giftCert\n    __typename\n  }\n  customProduct\n  pgCrop\n  pgCropRules\n  rhr\n  pdpImageLayout\n  seoDescription\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  priceFilter\n  hasOnlyOneSku\n}\n\nfragment ZeroResultFields on SearchZeroResults {\n  __typename\n  searchTerms\n  otherBrandSearchResults {\n    brandResultCount\n    brandName\n    brandLink {\n      navigationState\n      siteState {\n        companyCode\n        properties {\n          brandName\n          __typename\n        }\n        __typename\n      }\n      host\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AdjustedSearchFields on AdjustedSearch {\n  __typename\n  autoPhrased\n  adjustedTerms\n  spellCorrected\n  originalTerms\n}\n\nfragment InstructionResultList on InstructionResultList {\n  __typename\n  firstRecNum\n  lastRecNum\n  recsPerPage\n  totalNumRecs\n  name\n  records {\n    productDisplayName\n    link\n    label\n    __typename\n  }\n}\n\nfragment OtherInfo on SearchOtherInfo {\n  __typename\n  results {\n    displayName\n    link {\n      navigationState\n      siteState {\n        properties {\n          brandName\n          __typename\n        }\n        companyCode\n        __typename\n      }\n      host\n      __typename\n    }\n    resultCount\n    selected\n    __typename\n  }\n}\n\nfragment ResultTab on SearchResultTab {\n  __typename\n  companyCode\n  resultCount\n  displayName\n  link {\n    navigationState\n    siteState {\n      properties {\n        brandName\n        __typename\n      }\n      companyCode\n      __typename\n    }\n    host\n    __typename\n  }\n  selected\n}\n\nfragment RefinementMenu on SearchRefinementMenu {\n  __typename\n  displayName\n  name\n  ancestors {\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    host\n    label\n    __typename\n  }\n  dimensionName\n  numRefinementsToShowInitially\n  multiSelect\n  refinements {\n    ...RefinementLink\n    __typename\n  }\n  key\n  childRefinements {\n    __typename\n    displayName\n    name\n    ancestors {\n      navigationState\n      siteState {\n        companyCode\n        __typename\n      }\n      host\n      label\n      __typename\n    }\n    dimensionName\n    numRefinementsToShowInitially\n    multiSelect\n    refinements {\n      ...RefinementLink\n      __typename\n    }\n    key\n  }\n}\n\nfragment RefinementLink on SearchRefinementLink {\n  ... on SearchRefinementPlainLink {\n    __typename\n    navigationState\n    label\n    localeLabel\n    count\n    multiSelect\n    siteState {\n      companyCode\n      __typename\n    }\n    isSelected\n  }\n  ... on SearchRefinementImageLink {\n    __typename\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    label\n    count\n    multiSelect\n    isSelected\n  }\n  __typename\n}\n\nfragment ProductCarousel on SearchProductCarousel {\n  __typename\n  maxRecordsBasedOnPrevSearch\n  records {\n    recordType\n    product {\n      altImageUrl\n      imageUrl\n      displayName\n      repositoryId\n      colorizable\n      removeFromBrowse\n      priceInfo {\n        currencySymbol\n        isCustomProduct\n        isRetail\n        isUnavailable\n        priceFilter\n        isSale\n        priceMessage\n        priceRange {\n          allOnSale\n          assetId\n          currencyApplied\n          highestFullSkuId\n          highestPaidFullSkuId\n          lowestFullSkuId\n          lowestPaidFullSkuId\n          noPriceRange\n          onClearance\n          onSale\n          onSaleAndOnClearance\n          previewMode\n          salePriceListId\n          tradeBest\n          __typename\n        }\n        rangeType\n        showMemberPrice\n        strikePriceLabel\n        listPrices\n        listPriceLabel\n        salePrices\n        salePriceLabel\n        memberPrices\n        memberPriceLabel\n        __typename\n      }\n      swatchInfo {\n        swatchesToDisplay {\n          imageUrl\n          swatchId\n          __typename\n        }\n        numAdditionalSwatchesAvailable\n        numAdditionalSaleSwatchesAvailable\n        __typename\n      }\n      __typename\n    }\n    sku {\n      fullSkuId\n      __typename\n    }\n    __typename\n  }\n  title\n  name\n}\n\nfragment SaleMemberInfoFields on SaleMemberInfoResponse {\n  __typename\n  pgMemberSavings {\n    ...MemberSavingsFields\n    __typename\n  }\n  pgSaleStats {\n    ...SaleStatsFields\n    __typename\n  }\n  stockInfo {\n    ...Instock_qtyFields\n    __typename\n  }\n  headerConfig {\n    title\n    template\n    promoDisplay {\n      promoDisplay {\n        banners {\n          type\n          value\n          __typename\n        }\n        dynamicText {\n          attribute\n          value\n          __typename\n        }\n        MediaText {\n          MEDIA\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment MemberSavingsFields on PgMemberSaving {\n  __typename\n  count\n  memberSavingsMin\n  memberSavingsMax\n}\n\nfragment SaleStatsFields on PgSaleStats {\n  __typename\n  nonSaleSkus\n  percentSaleSkus\n  saleSkus\n  totalSkus\n}\n\nfragment Instock_qtyFields on StockInfo {\n  __typename\n  totalSkus\n  inStock\n  inStockQty\n}\n\nfragment ATGCollectionGalleryInfo on CollectionCategory {\n  __typename\n  id\n  displayName\n  forceSaleFlag\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">Search</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String, $nextgenDriven: Boolean, $maxSearchTab: Boolean, $isSearchBoxUse: Boolean) {
  search(
    ntt: $ntt
    contentType: $contentType
    n: $n
    nrpp: $nrpp
    ns: $ns
    no: $no
    country: $country
    currencyCode: $currencyCode
    userType: $userType
    site: $site
    infiniteScroll: $infiniteScroll
    categoryId: $categoryId
    sale: $sale
    locale: $locale
    nextgenDriven: $nextgenDriven
    maxSearchTab: $maxSearchTab
    isSearchBoxUse: $isSearchBoxUse
  ) {
    redirectUrl
    stocked
    zeroResults {
      ...ZeroResultFields
      __typename
    }
    adjustedSearches {
      ...AdjustedSearchFields
      __typename
    }
    sizeFacets
    materialFacets
    resultList {
      lastRecNum
      firstRecNum
      recsPerPage
      totalNumRecs
      records {
        recordType
        product {
          newPdpLayout
          altImageUrl
          imageUrl
          galleryDescription
          alternateImages {
            imageUrl
            __typename
          }
          displayName
          anchor
          repositoryId
          colorizable
          imageFlip
          newProduct
          emptyProduct
          metaProductComponent
          removeFromBrowse
          pgCrop
          pgCropRules
          rhr
          pdpImageLayout
          skuPriceInfo {
            fullSkuId
            currencySymbol
            listPrice
            salePrice
            memberPrice
            tradePrice
            contractPrice
            nextgenDriven
            onSale
            onClearance
            showMemberPrice
            skuOptions {
              id
              optionType
              label
              __typename
            }
            __typename
          }
          metaProduct
          priceInfo {
            currencySymbol
            isCustomProduct
            isRetail
            isUnavailable
            priceFilter
            isSale
            priceMessage
            priceRange {
              allOnSale
              assetId
              currencyApplied
              highestFullSkuId
              highestPaidFullSkuId
              lowestFullSkuId
              lowestPaidFullSkuId
              noPriceRange
              onClearance
              onSale
              onSaleAndOnClearance
              previewMode
              salePriceListId
              tradeBest
              __typename
            }
            rangeType
            showMemberPrice
            strikePriceLabel
            priceMessagePrice
            listPrices
            listPriceLabel
            salePrices
            salePriceLabel
            memberPrices
            memberPriceLabel
            lowestMemberPrice
            lowestSalePrice
            overridePriceLabel
            skulowestListPrice
            skulowestMemberPrice
            skulowestSalePrice
            nextGenDriven
            nextGenDrivenOnSale
            __typename
          }
          swatchInfo {
            swatchesToDisplay {
              imageRef
              imageUrl
              swatchId
              displayName
              __typename
            }
            swatchProductImages {
              imageUrl
              swatchId
              __typename
            }
            numAdditionalSwatchesAvailable
            numAdditionalSaleSwatchesAvailable
            __typename
          }
          galleryDescription
          percentSaleSkus
          lowestskuPriceInfo {
            skuListSaleprice
            skuMemberSalePrice
            skuSalePrice
            __typename
          }
          __typename
        }
        sku {
          fullSkuId
          __typename
        }
        __typename
      }
      sortOptions {
        navigationState
        label
        selected
        __typename
      }
      __typename
    }
    resultTabs {
      ...ResultTab
      __typename
    }
    tabInfo {
      tabs {
        site
        numResults
        tabNo
        displayName
        activeTab
        __typename
      }
      __typename
    }
    booleanFacets {
      ...RefinementMenu
      __typename
    }
    refinementMenus {
      ...RefinementMenu
      __typename
    }
    otherInfo {
      ...OtherInfo
      __typename
    }
    instructionResultList {
      ...InstructionResultList
      __typename
    }
    productCarousel {
      ...ProductCarousel
      __typename
    }
    promoDisplay {
      ...PromoDisplayFields
      __typename
    }
    searchQueryId
    filterQueries
    skuSearch
    q
    sku_siteId
    ruleExecuted
    saleMemberInfo {
      ...SaleMemberInfoFields
      __typename
    }
    ATGCollectionGalleryInfo {
      collectionGallery {
        ...ATGCollectionGalleryInfo
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment PromoDisplayFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  subItems {
    ...SubItem
    __typename
  }
  template
  text
  imageUrl
  linkType
  linkUrl
  targetUrl
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
  title
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
}

fragment Layer on PromoDisplayLayer {
  __typename
  layerType
  label
  leftCoordinate
  topCoordinate
  flyoutDirection
  dynamicText {
    verticalAlign
    horizontalAlign
    classes
    promoId
    styles
    topCoordinate
    rightCoordinate
    bottomCoordinate
    leftCoordinate
    width
    modalType
    __typename
  }
  htmlText
  shortText
  link
  modal
  path
}

fragment DynamicText on PromoDisplayDynamicText {
  __typename
  layout
  alt
  width
  style
  height
  coords
  productIds
  categoryId
  wistia
  transitionStartStyles
  transitionEndStyles
  transitionInDelay
  exclusionParam
  modalType
  addbanner
  autoplay
  slidetime
  easing
  pauseOnHover
  effecttime
  resetOffScreen
}

fragment CatalogAsset on PromoDisplayCatalogAsset {
  __typename
  skuId
  categoryId
  productId
  leftCoordinate
  topCoordinate
  flyoutDirection
  quickLook
  id
}

fragment SubItem on PromoDisplay {
  __typename
  ...SubItemFields
  subItems {
    ...SubItemFields
    __typename
  }
}

fragment SubItemFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  template
  text
  title
  imageUrl
  linkType
  linkUrl
  targetUrl
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
}

fragment CategoryProductFields on CategoryProduct {
  __typename
  id
  displayName
  imageUrl
  imageFlip
  altImages {
    imageUrl
    __typename
  }
  galleryDescription
  newProduct
  type
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  uxAttributes {
    triggerSwatchImage
    productType
    giftCert
    __typename
  }
  customProduct
  pgCrop
  pgCropRules
  rhr
  pdpImageLayout
  seoDescription
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  priceFilter
  hasOnlyOneSku
}

fragment ZeroResultFields on SearchZeroResults {
  __typename
  searchTerms
  otherBrandSearchResults {
    brandResultCount
    brandName
    brandLink {
      navigationState
      siteState {
        companyCode
        properties {
          brandName
          __typename
        }
        __typename
      }
      host
      __typename
    }
    __typename
  }
}

fragment AdjustedSearchFields on AdjustedSearch {
  __typename
  autoPhrased
  adjustedTerms
  spellCorrected
  originalTerms
}

fragment InstructionResultList on InstructionResultList {
  __typename
  firstRecNum
  lastRecNum
  recsPerPage
  totalNumRecs
  name
  records {
    productDisplayName
    link
    label
    __typename
  }
}

fragment OtherInfo on SearchOtherInfo {
  __typename
  results {
    displayName
    link {
      navigationState
      siteState {
        properties {
          brandName
          __typename
        }
        companyCode
        __typename
      }
      host
      __typename
    }
    resultCount
    selected
    __typename
  }
}

fragment ResultTab on SearchResultTab {
  __typename
  companyCode
  resultCount
  displayName
  link {
    navigationState
    siteState {
      properties {
        brandName
        __typename
      }
      companyCode
      __typename
    }
    host
    __typename
  }
  selected
}

fragment RefinementMenu on SearchRefinementMenu {
  __typename
  displayName
  name
  ancestors {
    navigationState
    siteState {
      companyCode
      __typename
    }
    host
    label
    __typename
  }
  dimensionName
  numRefinementsToShowInitially
  multiSelect
  refinements {
    ...RefinementLink
    __typename
  }
  key
  childRefinements {
    __typename
    displayName
    name
    ancestors {
      navigationState
      siteState {
        companyCode
        __typename
      }
      host
      label
      __typename
    }
    dimensionName
    numRefinementsToShowInitially
    multiSelect
    refinements {
      ...RefinementLink
      __typename
    }
    key
  }
}

fragment RefinementLink on SearchRefinementLink {
  ... on SearchRefinementPlainLink {
    __typename
    navigationState
    label
    localeLabel
    count
    multiSelect
    siteState {
      companyCode
      __typename
    }
    isSelected
  }
  ... on SearchRefinementImageLink {
    __typename
    navigationState
    siteState {
      companyCode
      __typename
    }
    label
    count
    multiSelect
    isSelected
  }
  __typename
}

fragment ProductCarousel on SearchProductCarousel {
  __typename
  maxRecordsBasedOnPrevSearch
  records {
    recordType
    product {
      altImageUrl
      imageUrl
      displayName
      repositoryId
      colorizable
      removeFromBrowse
      priceInfo {
        currencySymbol
        isCustomProduct
        isRetail
        isUnavailable
        priceFilter
        isSale
        priceMessage
        priceRange {
          allOnSale
          assetId
          currencyApplied
          highestFullSkuId
          highestPaidFullSkuId
          lowestFullSkuId
          lowestPaidFullSkuId
          noPriceRange
          onClearance
          onSale
          onSaleAndOnClearance
          previewMode
          salePriceListId
          tradeBest
          __typename
        }
        rangeType
        showMemberPrice
        strikePriceLabel
        listPrices
        listPriceLabel
        salePrices
        salePriceLabel
        memberPrices
        memberPriceLabel
        __typename
      }
      swatchInfo {
        swatchesToDisplay {
          imageUrl
          swatchId
          __typename
        }
        numAdditionalSwatchesAvailable
        numAdditionalSaleSwatchesAvailable
        __typename
      }
      __typename
    }
    sku {
      fullSkuId
      __typename
    }
    __typename
  }
  title
  name
}

fragment SaleMemberInfoFields on SaleMemberInfoResponse {
  __typename
  pgMemberSavings {
    ...MemberSavingsFields
    __typename
  }
  pgSaleStats {
    ...SaleStatsFields
    __typename
  }
  stockInfo {
    ...Instock_qtyFields
    __typename
  }
  headerConfig {
    title
    template
    promoDisplay {
      promoDisplay {
        banners {
          type
          value
          __typename
        }
        dynamicText {
          attribute
          value
          __typename
        }
        MediaText {
          MEDIA
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment MemberSavingsFields on PgMemberSaving {
  __typename
  count
  memberSavingsMin
  memberSavingsMax
}

fragment SaleStatsFields on PgSaleStats {
  __typename
  nonSaleSkus
  percentSaleSkus
  saleSkus
  totalSkus
}

fragment Instock_qtyFields on StockInfo {
  __typename
  totalSkus
  inStock
  inStockQty
}

fragment ATGCollectionGalleryInfo on CollectionCategory {
  __typename
  id
  displayName
  forceSaleFlag
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;ntt&quot;: &quot;category:${ProductGalleryId}&quot;,
  &quot;nrpp&quot;: 48,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;nextgenDriven&quot;: false
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">${ProductGalleryId}</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/location-select</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">Search</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/category/products.jsp?categoryId=${ProductGalleryId}&amp;sale=false&amp;parentCatId=cat15790016&amp;pgterm=category%3A${ProductGalleryId}&amp;fromCG=true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="repositoryId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">repositoryId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.search.resultList.records[*].product.repositoryId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="swatchId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">SwatchID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.search.resultList.records[*].product.swatchInfo.swatchesToDisplay[*].swatchId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.5_ProductGallery" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">ProductGallery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query ProductGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $siteId: String, $measureSystem: String, $countryCode: String, $locale: String, $parentCatId: String) { productGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode siteId: $siteId measureSystem: $measureSystem locale: $locale countryCode: $countryCode parentCatId: $parentCatId ) { amountRemaining nextStart categoryLayout productGallery { ... on CollectionCategory { ...CollectionCategoryFields isAnchor(categoryId: $categoryId, filter: $filter) __typename } ... on CategoryProduct { ...CategoryProductFields __typename } __typename } __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } stockInfo { ...Instock_qtyFields __typename } headerConfig { title template promoDisplay { promoDisplay { banners { type value __typename } dynamicText { attribute value __typename } MediaText { MEDIA __typename } __typename } __typename } __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus } fragment Instock_qtyFields on StockInfo { __typename totalSkus inStock inStockQty }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ProductGallery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ProductGallery($categoryId: String!, $filter: String, $start: Int = 0, $count: Int, $currencyCode: String, $siteId: String, $measureSystem: String, $countryCode: String, $locale: String, $parentCatId: String) { productGallery( categoryId: $categoryId filter: $filter start: $start count: $count currencyCode: $currencyCode siteId: $siteId measureSystem: $measureSystem locale: $locale countryCode: $countryCode parentCatId: $parentCatId ) { amountRemaining nextStart categoryLayout productGallery { ... on CollectionCategory { ...CollectionCategoryFields isAnchor(categoryId: $categoryId, filter: $filter) __typename } ... on CategoryProduct { ...CategoryProductFields __typename } __typename } __typename } } fragment CategoryProductFields on CategoryProduct { __typename id displayName imageUrl imageFlip altImages { imageUrl __typename } galleryDescription newProduct type priceRangeDisplay { ...PriceRangeDisplay __typename } uxAttributes { triggerSwatchImage productType giftCert __typename } customProduct pgCrop pgCropRules rhr pdpImageLayout seoDescription } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku } fragment CollectionCategoryFields on CollectionCategory { __typename id type displayName collection hasProducts subTemplate onSale introText cgBannerImage cgBannerTemplate showSwatches pgCrop pgCropRules uxAttributes { showSpecial forceSaleFlag forceTextileSaleFlag __typename } priceInfo { priceCopy currencySymbol lowestPriceSku listPrice memberPrice salePrice __typename } bannerCopy bannerTitle bannerSubTitle bannerSubSubTitle bannerSwatchImage promotionDisplayItems { addbanner { ...PromoDisplayFields __typename } custombanner { ...PromoDisplayFields __typename } eventbanner { ...PromoDisplayFields __typename } salesectionbanner { ...PromoDisplayFields __typename } __typename } saleBannerCopy { text __typename } forceSaleFlag saleMemberInfo { ...SaleMemberInfoFields __typename } hasShellProducts additionalBannerCopy keywords seoDescription saleMessageEnabled onCategoryFinishSale } fragment PromoDisplayFields on PromoDisplay { __typename id name displayType marketingPriority subItems { ...SubItem __typename } template text imageUrl linkType linkUrl targetUrl dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } title products { productGallery { ...CategoryProductFields __typename } __typename } } fragment Layer on PromoDisplayLayer { __typename layerType label leftCoordinate topCoordinate flyoutDirection dynamicText { verticalAlign horizontalAlign classes promoId styles topCoordinate rightCoordinate bottomCoordinate leftCoordinate width modalType __typename } htmlText shortText link modal path } fragment DynamicText on PromoDisplayDynamicText { __typename layout alt width style height coords productIds categoryId wistia transitionStartStyles transitionEndStyles transitionInDelay exclusionParam modalType addbanner autoplay slidetime easing pauseOnHover effecttime resetOffScreen } fragment CatalogAsset on PromoDisplayCatalogAsset { __typename skuId categoryId productId leftCoordinate topCoordinate flyoutDirection quickLook id } fragment SubItem on PromoDisplay { __typename ...SubItemFields subItems { ...SubItemFields __typename } } fragment SubItemFields on PromoDisplay { __typename id name displayType marketingPriority products { productGallery { ...CategoryProductFields __typename } __typename } template text title imageUrl linkType linkUrl targetUrl products { productGallery { ...CategoryProductFields __typename } __typename } dynamicText { ...DynamicText __typename } catalogAssets { ...CatalogAsset __typename } layers { ...Layer __typename } } fragment SaleMemberInfoFields on SaleMemberInfoResponse { __typename pgMemberSavings { ...MemberSavingsFields __typename } pgSaleStats { ...SaleStatsFields __typename } stockInfo { ...Instock_qtyFields __typename } headerConfig { title template promoDisplay { promoDisplay { banners { type value __typename } dynamicText { attribute value __typename } MediaText { MEDIA __typename } __typename } __typename } __typename } } fragment MemberSavingsFields on PgMemberSaving { __typename count memberSavingsMin memberSavingsMax } fragment SaleStatsFields on PgSaleStats { __typename nonSaleSkus percentSaleSkus saleSkus totalSkus } fragment Instock_qtyFields on StockInfo { __typename totalSkus inStock inStockQty }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;start&quot;: 0,
  &quot;categoryId&quot;: &quot;${ProductGalleryId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}
</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="productIds" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">productIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productGallery.productGallery.[*].[?(@.type == &apos;product&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              <stringProp name="TestPlan.comments">$.data.productGallery.productGallery.[*].[?(@.type == &apos;product&apos;)].id</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="productId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">productId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productGallery.productGallery[2].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              <stringProp name="TestPlan.comments">$.data.productGallery.productGallery.[*].[?(@.type == &apos;product&apos;)].id</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/location-select</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">Search</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/category/products.jsp?categoryId=${ProductGalleryId}&amp;sale=false&amp;parentCatId=cat15790016&amp;pgterm=category%3A${ProductGalleryId}&amp;fromCG=true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.5_GetAemModel-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/products&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/products&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.6_GlobalStylesheet" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.7_GetUserForSession" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean, $doNotMutateCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart doNotMutateCart: $doNotMutateCart ) { sessionId rhuid location currentCartId validAssociate location rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true,
  &quot;doNotMutateCart&quot;: false
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean, $doNotMutateCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart doNotMutateCart: $doNotMutateCart ) { sessionId rhuid location currentCartId validAssociate location rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true,
  &quot;doNotMutateCart&quot;: false
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="currentCartId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.getUserForSession.currentCartId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.8_SaleCatalogNavigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.9_CartProjection" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Product_matchNr" enabled="false">
            <stringProp name="IfController.condition">${__jexl3( ${repositoryId_matchNr} &gt; 0,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="TestPlan.comments">${__jexl3( ${fullSkuId_matchNr} &gt; 0 &amp;&amp; ${inventoryRemaining} &gt; 0,)} || ${__jexl3( ${Product_matchNr} &gt; 0,)}</stringProp>
          </IfController>
          <hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
              <stringProp name="ForeachController.inputVal">repositoryId</stringProp>
              <stringProp name="ForeachController.returnVal">repositoryId</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${repositoryId_matchNr}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">Counter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.10_ProductImage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${__V(repositoryId_${Counter},)}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${SwatchId}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${__V(repositoryId_${Counter},)}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${SwatchId}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">// Get the SwatchID from the JSON extractor
def swatchID = vars.get(&quot;SwatchID&quot;)

// Log the SwatchID for verification (optional)
log.info(&quot;SwatchID: &quot; + swatchID)

// Set the SwatchID as a parameter in the HTTP request
vars.put(&quot;SwatchId&quot;, swatchID)
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.17_ProductImage_RelatedProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">ProductImage</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.18_LineItemQuery-2_RelatedProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.10_ProductImage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${repositoryId}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${SwatchID}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${repositoryId}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${SwatchID}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">// Get the SwatchID from the JSON extractor
def swatchID = vars.get(&quot;SwatchID&quot;)

// Log the SwatchID for verification (optional)
log.info(&quot;SwatchID: &quot; + swatchID)

// Set the SwatchID as a parameter in the HTTP request
vars.put(&quot;SwatchID&quot;, swatchID)
</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="false">
              <stringProp name="ForeachController.inputVal">swatchId</stringProp>
              <stringProp name="ForeachController.returnVal">swatchId1</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.10_ProductImage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${Product}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${swatchId}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${Product}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${swatchId}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="false">
            <stringProp name="WhileController.condition">${__jexl3( ${Product_matchNr}*${swatchId_matchNr},)} =!</stringProp>
          </WhileController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${Product_matchNr}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.10_ProductImage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${__V(Product_${Counter},)}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${swatchId}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${__V(Product_${Counter},)}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${swatchId}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Product_matchNr" enabled="false">
            <stringProp name="IfController.condition">${__jexl3( ${Product_matchNr} &gt; 0,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="TestPlan.comments">${__jexl3( ${fullSkuId_matchNr} &gt; 0 &amp;&amp; ${inventoryRemaining} &gt; 0,)} || ${__jexl3( ${Product_matchNr} &gt; 0,)}</stringProp>
          </IfController>
          <hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
              <stringProp name="ForeachController.inputVal">Product</stringProp>
              <stringProp name="ForeachController.returnVal">Product</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${Product_matchNr}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">Counter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">3</stringProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="4.10_ProductImage" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">ProductImage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${__V(Product_${Counter},)}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${swatchId}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${__V(Product_${Counter},)}&quot;,
  &quot;swatchIds&quot;: [
    &quot;${swatchId}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script"></stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.17_ProductImage_RelatedProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">ProductImage</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.18_LineItemQuery-2_RelatedProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="5.0_Search" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PGTerm" enabled="true">
            <stringProp name="filename">pgterms.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">pgterm</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.1_AboveNavPromo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">AboveNavPromo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.2_CatalogNavigation-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.3_WORHMenu-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">WORHMenu</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.4_Search" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Search&quot;,&quot;variables&quot;:{
  &quot;ntt&quot;: &quot;${__urlencode(${pgterm})}&quot;,
  &quot;nrpp&quot;: 48,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;nextgenDriven&quot;: false
},&quot;query&quot;:&quot;query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String, $nextgenDriven: Boolean) {\n  search(\n    ntt: $ntt\n    contentType: $contentType\n    n: $n\n    nrpp: $nrpp\n    ns: $ns\n    no: $no\n    country: $country\n    currencyCode: $currencyCode\n    userType: $userType\n    site: $site\n    infiniteScroll: $infiniteScroll\n    categoryId: $categoryId\n    sale: $sale\n    locale: $locale\n    nextgenDriven: $nextgenDriven\n  ) {\n    redirectUrl\n    stocked\n    zeroResults {\n      ...ZeroResultFields\n      __typename\n    }\n    adjustedSearches {\n      ...AdjustedSearchFields\n      __typename\n    }\n    sizeFacets\n    materialFacets\n    resultList {\n      lastRecNum\n      firstRecNum\n      recsPerPage\n      totalNumRecs\n      records {\n        recordType\n        product {\n          newPdpLayout\n          altImageUrl\n          imageUrl\n          galleryDescription\n          alternateImages {\n            imageUrl\n            __typename\n          }\n          displayName\n          anchor\n          repositoryId\n          colorizable\n          imageFlip\n          newProduct\n          emptyProduct\n          metaProductComponent\n          removeFromBrowse\n          pgCrop\n          pgCropRules\n          rhr\n          pdpImageLayout\n          skuPriceInfo {\n            fullSkuId\n            currencySymbol\n            listPrice\n            salePrice\n            memberPrice\n            tradePrice\n            contractPrice\n            nextgenDriven\n            onSale\n            onClearance\n            showMemberPrice\n            skuOptions {\n              id\n              optionType\n              label\n              __typename\n            }\n            __typename\n          }\n          metaProduct\n          priceInfo {\n            currencySymbol\n            isCustomProduct\n            isRetail\n            isUnavailable\n            priceFilter\n            isSale\n            priceMessage\n            priceRange {\n              allOnSale\n              assetId\n              currencyApplied\n              highestFullSkuId\n              highestPaidFullSkuId\n              lowestFullSkuId\n              lowestPaidFullSkuId\n              noPriceRange\n              onClearance\n              onSale\n              onSaleAndOnClearance\n              previewMode\n              salePriceListId\n              tradeBest\n              __typename\n            }\n            rangeType\n            showMemberPrice\n            strikePriceLabel\n            priceMessagePrice\n            listPrices\n            listPriceLabel\n            salePrices\n            salePriceLabel\n            memberPrices\n            memberPriceLabel\n            lowestMemberPrice\n            lowestSalePrice\n            overridePriceLabel\n            skulowestListPrice\n            skulowestMemberPrice\n            skulowestSalePrice\n            nextGenDriven\n            nextGenDrivenOnSale\n            __typename\n          }\n          swatchInfo {\n            swatchesToDisplay {\n              imageRef\n              imageUrl\n              swatchId\n              displayName\n              __typename\n            }\n            swatchProductImages {\n              imageUrl\n              swatchId\n              __typename\n            }\n            numAdditionalSwatchesAvailable\n            numAdditionalSaleSwatchesAvailable\n            __typename\n          }\n          galleryDescription\n          percentSaleSkus\n          lowestskuPriceInfo {\n            skuListSaleprice\n            skuMemberSalePrice\n            skuSalePrice\n            __typename\n          }\n          __typename\n        }\n        sku {\n          fullSkuId\n          __typename\n        }\n        __typename\n      }\n      sortOptions {\n        navigationState\n        label\n        selected\n        __typename\n      }\n      __typename\n    }\n    resultTabs {\n      ...ResultTab\n      __typename\n    }\n    tabInfo {\n      tabs {\n        site\n        numResults\n        tabNo\n        displayName\n        __typename\n      }\n      __typename\n    }\n    booleanFacets {\n      ...RefinementMenu\n      __typename\n    }\n    refinementMenus {\n      ...RefinementMenu\n      __typename\n    }\n    otherInfo {\n      ...OtherInfo\n      __typename\n    }\n    instructionResultList {\n      ...InstructionResultList\n      __typename\n    }\n    productCarousel {\n      ...ProductCarousel\n      __typename\n    }\n    promoDisplay {\n      ...PromoDisplayFields\n      __typename\n    }\n    searchQueryId\n    filterQueries\n    skuSearch\n    q\n    sku_siteId\n    ruleExecuted\n    saleMemberInfo {\n      ...SaleMemberInfoFields\n      __typename\n    }\n    ATGCollectionGalleryInfo {\n      collectionGallery {\n        ...ATGCollectionGalleryInfo\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment PromoDisplayFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  subItems {\n    ...SubItem\n    __typename\n  }\n  template\n  text\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n  title\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Layer on PromoDisplayLayer {\n  __typename\n  layerType\n  label\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  dynamicText {\n    verticalAlign\n    horizontalAlign\n    classes\n    promoId\n    styles\n    topCoordinate\n    rightCoordinate\n    bottomCoordinate\n    leftCoordinate\n    width\n    modalType\n    __typename\n  }\n  htmlText\n  shortText\n  link\n  modal\n  path\n}\n\nfragment DynamicText on PromoDisplayDynamicText {\n  __typename\n  layout\n  alt\n  width\n  style\n  height\n  coords\n  productIds\n  categoryId\n  wistia\n  transitionStartStyles\n  transitionEndStyles\n  transitionInDelay\n  exclusionParam\n  modalType\n  addbanner\n  autoplay\n  slidetime\n  easing\n  pauseOnHover\n  effecttime\n  resetOffScreen\n}\n\nfragment CatalogAsset on PromoDisplayCatalogAsset {\n  __typename\n  skuId\n  categoryId\n  productId\n  leftCoordinate\n  topCoordinate\n  flyoutDirection\n  quickLook\n  id\n}\n\nfragment SubItem on PromoDisplay {\n  __typename\n  ...SubItemFields\n  subItems {\n    ...SubItemFields\n    __typename\n  }\n}\n\nfragment SubItemFields on PromoDisplay {\n  __typename\n  id\n  name\n  displayType\n  marketingPriority\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  template\n  text\n  title\n  imageUrl\n  linkType\n  linkUrl\n  targetUrl\n  products {\n    productGallery {\n      ...CategoryProductFields\n      __typename\n    }\n    __typename\n  }\n  dynamicText {\n    ...DynamicText\n    __typename\n  }\n  catalogAssets {\n    ...CatalogAsset\n    __typename\n  }\n  layers {\n    ...Layer\n    __typename\n  }\n}\n\nfragment CategoryProductFields on CategoryProduct {\n  __typename\n  id\n  displayName\n  imageUrl\n  imageFlip\n  altImages {\n    imageUrl\n    __typename\n  }\n  galleryDescription\n  newProduct\n  type\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  uxAttributes {\n    triggerSwatchImage\n    productType\n    giftCert\n    __typename\n  }\n  customProduct\n  pgCrop\n  pgCropRules\n  rhr\n  pdpImageLayout\n  seoDescription\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n}\n\nfragment ZeroResultFields on SearchZeroResults {\n  __typename\n  searchTerms\n  otherBrandSearchResults {\n    brandResultCount\n    brandName\n    brandLink {\n      navigationState\n      siteState {\n        companyCode\n        properties {\n          brandName\n          __typename\n        }\n        __typename\n      }\n      host\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment AdjustedSearchFields on AdjustedSearch {\n  __typename\n  autoPhrased\n  adjustedTerms\n  spellCorrected\n  originalTerms\n}\n\nfragment InstructionResultList on InstructionResultList {\n  __typename\n  firstRecNum\n  lastRecNum\n  recsPerPage\n  totalNumRecs\n  name\n  records {\n    productDisplayName\n    link\n    label\n    __typename\n  }\n}\n\nfragment OtherInfo on SearchOtherInfo {\n  __typename\n  results {\n    displayName\n    link {\n      navigationState\n      siteState {\n        properties {\n          brandName\n          __typename\n        }\n        companyCode\n        __typename\n      }\n      host\n      __typename\n    }\n    resultCount\n    selected\n    __typename\n  }\n}\n\nfragment ResultTab on SearchResultTab {\n  __typename\n  companyCode\n  resultCount\n  displayName\n  link {\n    navigationState\n    siteState {\n      properties {\n        brandName\n        __typename\n      }\n      companyCode\n      __typename\n    }\n    host\n    __typename\n  }\n  selected\n}\n\nfragment RefinementMenu on SearchRefinementMenu {\n  __typename\n  displayName\n  name\n  ancestors {\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    host\n    label\n    __typename\n  }\n  dimensionName\n  numRefinementsToShowInitially\n  multiSelect\n  refinements {\n    ...RefinementLink\n    __typename\n  }\n  key\n  childRefinements {\n    __typename\n    displayName\n    name\n    ancestors {\n      navigationState\n      siteState {\n        companyCode\n        __typename\n      }\n      host\n      label\n      __typename\n    }\n    dimensionName\n    numRefinementsToShowInitially\n    multiSelect\n    refinements {\n      ...RefinementLink\n      __typename\n    }\n    key\n  }\n}\n\nfragment RefinementLink on SearchRefinementLink {\n  ... on SearchRefinementPlainLink {\n    __typename\n    navigationState\n    label\n    localeLabel\n    count\n    multiSelect\n    siteState {\n      companyCode\n      __typename\n    }\n    isSelected\n  }\n  ... on SearchRefinementImageLink {\n    __typename\n    navigationState\n    siteState {\n      companyCode\n      __typename\n    }\n    label\n    count\n    multiSelect\n    isSelected\n  }\n  __typename\n}\n\nfragment ProductCarousel on SearchProductCarousel {\n  __typename\n  maxRecordsBasedOnPrevSearch\n  records {\n    recordType\n    product {\n      altImageUrl\n      imageUrl\n      displayName\n      repositoryId\n      colorizable\n      removeFromBrowse\n      priceInfo {\n        currencySymbol\n        isCustomProduct\n        isRetail\n        isUnavailable\n        priceFilter\n        isSale\n        priceMessage\n        priceRange {\n          allOnSale\n          assetId\n          currencyApplied\n          highestFullSkuId\n          highestPaidFullSkuId\n          lowestFullSkuId\n          lowestPaidFullSkuId\n          noPriceRange\n          onClearance\n          onSale\n          onSaleAndOnClearance\n          previewMode\n          salePriceListId\n          tradeBest\n          __typename\n        }\n        rangeType\n        showMemberPrice\n        strikePriceLabel\n        listPrices\n        listPriceLabel\n        salePrices\n        salePriceLabel\n        memberPrices\n        memberPriceLabel\n        __typename\n      }\n      swatchInfo {\n        swatchesToDisplay {\n          imageUrl\n          swatchId\n          __typename\n        }\n        numAdditionalSwatchesAvailable\n        numAdditionalSaleSwatchesAvailable\n        __typename\n      }\n      __typename\n    }\n    sku {\n      fullSkuId\n      __typename\n    }\n    __typename\n  }\n  title\n  name\n}\n\nfragment SaleMemberInfoFields on SaleMemberInfoResponse {\n  __typename\n  pgMemberSavings {\n    ...MemberSavingsFields\n    __typename\n  }\n  pgSaleStats {\n    ...SaleStatsFields\n    __typename\n  }\n  stockInfo {\n    ...Instock_qtyFields\n    __typename\n  }\n  headerConfig {\n    title\n    template\n    promoDisplay {\n      promoDisplay {\n        banners {\n          type\n          value\n          __typename\n        }\n        dynamicText {\n          attribute\n          value\n          __typename\n        }\n        MediaText {\n          MEDIA\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment MemberSavingsFields on PgMemberSaving {\n  __typename\n  count\n  memberSavingsMin\n  memberSavingsMax\n}\n\nfragment SaleStatsFields on PgSaleStats {\n  __typename\n  nonSaleSkus\n  percentSaleSkus\n  saleSkus\n  totalSkus\n}\n\nfragment Instock_qtyFields on StockInfo {\n  __typename\n  totalSkus\n  inStock\n  inStockQty\n}\n\nfragment ATGCollectionGalleryInfo on CollectionCategory {\n  __typename\n  id\n  displayName\n  forceSaleFlag\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">Search</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query Search($ntt: String!, $contentType: String, $n: String, $nrpp: Int, $ns: String, $no: Int, $country: String, $currencyCode: String, $userType: String, $site: String, $infiniteScroll: Boolean, $categoryId: String, $sale: Boolean, $locale: String, $nextgenDriven: Boolean) {
  search(
    ntt: $ntt
    contentType: $contentType
    n: $n
    nrpp: $nrpp
    ns: $ns
    no: $no
    country: $country
    currencyCode: $currencyCode
    userType: $userType
    site: $site
    infiniteScroll: $infiniteScroll
    categoryId: $categoryId
    sale: $sale
    locale: $locale
    nextgenDriven: $nextgenDriven
  ) {
    redirectUrl
    stocked
    zeroResults {
      ...ZeroResultFields
      __typename
    }
    adjustedSearches {
      ...AdjustedSearchFields
      __typename
    }
    sizeFacets
    materialFacets
    resultList {
      lastRecNum
      firstRecNum
      recsPerPage
      totalNumRecs
      records {
        recordType
        product {
          newPdpLayout
          altImageUrl
          imageUrl
          galleryDescription
          alternateImages {
            imageUrl
            __typename
          }
          displayName
          anchor
          repositoryId
          colorizable
          imageFlip
          newProduct
          emptyProduct
          metaProductComponent
          removeFromBrowse
          pgCrop
          pgCropRules
          rhr
          pdpImageLayout
          skuPriceInfo {
            fullSkuId
            currencySymbol
            listPrice
            salePrice
            memberPrice
            tradePrice
            contractPrice
            nextgenDriven
            onSale
            onClearance
            showMemberPrice
            skuOptions {
              id
              optionType
              label
              __typename
            }
            __typename
          }
          metaProduct
          priceInfo {
            currencySymbol
            isCustomProduct
            isRetail
            isUnavailable
            priceFilter
            isSale
            priceMessage
            priceRange {
              allOnSale
              assetId
              currencyApplied
              highestFullSkuId
              highestPaidFullSkuId
              lowestFullSkuId
              lowestPaidFullSkuId
              noPriceRange
              onClearance
              onSale
              onSaleAndOnClearance
              previewMode
              salePriceListId
              tradeBest
              __typename
            }
            rangeType
            showMemberPrice
            strikePriceLabel
            priceMessagePrice
            listPrices
            listPriceLabel
            salePrices
            salePriceLabel
            memberPrices
            memberPriceLabel
            lowestMemberPrice
            lowestSalePrice
            overridePriceLabel
            skulowestListPrice
            skulowestMemberPrice
            skulowestSalePrice
            nextGenDriven
            nextGenDrivenOnSale
            __typename
          }
          swatchInfo {
            swatchesToDisplay {
              imageRef
              imageUrl
              swatchId
              displayName
              __typename
            }
            swatchProductImages {
              imageUrl
              swatchId
              __typename
            }
            numAdditionalSwatchesAvailable
            numAdditionalSaleSwatchesAvailable
            __typename
          }
          galleryDescription
          percentSaleSkus
          lowestskuPriceInfo {
            skuListSaleprice
            skuMemberSalePrice
            skuSalePrice
            __typename
          }
          __typename
        }
        sku {
          fullSkuId
          __typename
        }
        __typename
      }
      sortOptions {
        navigationState
        label
        selected
        __typename
      }
      __typename
    }
    resultTabs {
      ...ResultTab
      __typename
    }
    tabInfo {
      tabs {
        site
        numResults
        tabNo
        displayName
        __typename
      }
      __typename
    }
    booleanFacets {
      ...RefinementMenu
      __typename
    }
    refinementMenus {
      ...RefinementMenu
      __typename
    }
    otherInfo {
      ...OtherInfo
      __typename
    }
    instructionResultList {
      ...InstructionResultList
      __typename
    }
    productCarousel {
      ...ProductCarousel
      __typename
    }
    promoDisplay {
      ...PromoDisplayFields
      __typename
    }
    searchQueryId
    filterQueries
    skuSearch
    q
    sku_siteId
    ruleExecuted
    saleMemberInfo {
      ...SaleMemberInfoFields
      __typename
    }
    ATGCollectionGalleryInfo {
      collectionGallery {
        ...ATGCollectionGalleryInfo
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment PromoDisplayFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  subItems {
    ...SubItem
    __typename
  }
  template
  text
  imageUrl
  linkType
  linkUrl
  targetUrl
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
  title
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
}

fragment Layer on PromoDisplayLayer {
  __typename
  layerType
  label
  leftCoordinate
  topCoordinate
  flyoutDirection
  dynamicText {
    verticalAlign
    horizontalAlign
    classes
    promoId
    styles
    topCoordinate
    rightCoordinate
    bottomCoordinate
    leftCoordinate
    width
    modalType
    __typename
  }
  htmlText
  shortText
  link
  modal
  path
}

fragment DynamicText on PromoDisplayDynamicText {
  __typename
  layout
  alt
  width
  style
  height
  coords
  productIds
  categoryId
  wistia
  transitionStartStyles
  transitionEndStyles
  transitionInDelay
  exclusionParam
  modalType
  addbanner
  autoplay
  slidetime
  easing
  pauseOnHover
  effecttime
  resetOffScreen
}

fragment CatalogAsset on PromoDisplayCatalogAsset {
  __typename
  skuId
  categoryId
  productId
  leftCoordinate
  topCoordinate
  flyoutDirection
  quickLook
  id
}

fragment SubItem on PromoDisplay {
  __typename
  ...SubItemFields
  subItems {
    ...SubItemFields
    __typename
  }
}

fragment SubItemFields on PromoDisplay {
  __typename
  id
  name
  displayType
  marketingPriority
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  template
  text
  title
  imageUrl
  linkType
  linkUrl
  targetUrl
  products {
    productGallery {
      ...CategoryProductFields
      __typename
    }
    __typename
  }
  dynamicText {
    ...DynamicText
    __typename
  }
  catalogAssets {
    ...CatalogAsset
    __typename
  }
  layers {
    ...Layer
    __typename
  }
}

fragment CategoryProductFields on CategoryProduct {
  __typename
  id
  displayName
  imageUrl
  imageFlip
  altImages {
    imageUrl
    __typename
  }
  galleryDescription
  newProduct
  type
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  uxAttributes {
    triggerSwatchImage
    productType
    giftCert
    __typename
  }
  customProduct
  pgCrop
  pgCropRules
  rhr
  pdpImageLayout
  seoDescription
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
}

fragment ZeroResultFields on SearchZeroResults {
  __typename
  searchTerms
  otherBrandSearchResults {
    brandResultCount
    brandName
    brandLink {
      navigationState
      siteState {
        companyCode
        properties {
          brandName
          __typename
        }
        __typename
      }
      host
      __typename
    }
    __typename
  }
}

fragment AdjustedSearchFields on AdjustedSearch {
  __typename
  autoPhrased
  adjustedTerms
  spellCorrected
  originalTerms
}

fragment InstructionResultList on InstructionResultList {
  __typename
  firstRecNum
  lastRecNum
  recsPerPage
  totalNumRecs
  name
  records {
    productDisplayName
    link
    label
    __typename
  }
}

fragment OtherInfo on SearchOtherInfo {
  __typename
  results {
    displayName
    link {
      navigationState
      siteState {
        properties {
          brandName
          __typename
        }
        companyCode
        __typename
      }
      host
      __typename
    }
    resultCount
    selected
    __typename
  }
}

fragment ResultTab on SearchResultTab {
  __typename
  companyCode
  resultCount
  displayName
  link {
    navigationState
    siteState {
      properties {
        brandName
        __typename
      }
      companyCode
      __typename
    }
    host
    __typename
  }
  selected
}

fragment RefinementMenu on SearchRefinementMenu {
  __typename
  displayName
  name
  ancestors {
    navigationState
    siteState {
      companyCode
      __typename
    }
    host
    label
    __typename
  }
  dimensionName
  numRefinementsToShowInitially
  multiSelect
  refinements {
    ...RefinementLink
    __typename
  }
  key
  childRefinements {
    __typename
    displayName
    name
    ancestors {
      navigationState
      siteState {
        companyCode
        __typename
      }
      host
      label
      __typename
    }
    dimensionName
    numRefinementsToShowInitially
    multiSelect
    refinements {
      ...RefinementLink
      __typename
    }
    key
  }
}

fragment RefinementLink on SearchRefinementLink {
  ... on SearchRefinementPlainLink {
    __typename
    navigationState
    label
    localeLabel
    count
    multiSelect
    siteState {
      companyCode
      __typename
    }
    isSelected
  }
  ... on SearchRefinementImageLink {
    __typename
    navigationState
    siteState {
      companyCode
      __typename
    }
    label
    count
    multiSelect
    isSelected
  }
  __typename
}

fragment ProductCarousel on SearchProductCarousel {
  __typename
  maxRecordsBasedOnPrevSearch
  records {
    recordType
    product {
      altImageUrl
      imageUrl
      displayName
      repositoryId
      colorizable
      removeFromBrowse
      priceInfo {
        currencySymbol
        isCustomProduct
        isRetail
        isUnavailable
        priceFilter
        isSale
        priceMessage
        priceRange {
          allOnSale
          assetId
          currencyApplied
          highestFullSkuId
          highestPaidFullSkuId
          lowestFullSkuId
          lowestPaidFullSkuId
          noPriceRange
          onClearance
          onSale
          onSaleAndOnClearance
          previewMode
          salePriceListId
          tradeBest
          __typename
        }
        rangeType
        showMemberPrice
        strikePriceLabel
        listPrices
        listPriceLabel
        salePrices
        salePriceLabel
        memberPrices
        memberPriceLabel
        __typename
      }
      swatchInfo {
        swatchesToDisplay {
          imageUrl
          swatchId
          __typename
        }
        numAdditionalSwatchesAvailable
        numAdditionalSaleSwatchesAvailable
        __typename
      }
      __typename
    }
    sku {
      fullSkuId
      __typename
    }
    __typename
  }
  title
  name
}

fragment SaleMemberInfoFields on SaleMemberInfoResponse {
  __typename
  pgMemberSavings {
    ...MemberSavingsFields
    __typename
  }
  pgSaleStats {
    ...SaleStatsFields
    __typename
  }
  stockInfo {
    ...Instock_qtyFields
    __typename
  }
  headerConfig {
    title
    template
    promoDisplay {
      promoDisplay {
        banners {
          type
          value
          __typename
        }
        dynamicText {
          attribute
          value
          __typename
        }
        MediaText {
          MEDIA
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment MemberSavingsFields on PgMemberSaving {
  __typename
  count
  memberSavingsMin
  memberSavingsMax
}

fragment SaleStatsFields on PgSaleStats {
  __typename
  nonSaleSkus
  percentSaleSkus
  saleSkus
  totalSkus
}

fragment Instock_qtyFields on StockInfo {
  __typename
  totalSkus
  inStock
  inStockQty
}

fragment ATGCollectionGalleryInfo on CollectionCategory {
  __typename
  id
  displayName
  forceSaleFlag
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;ntt&quot;: &quot;${__urlencode(${pgterm})}&quot;,
  &quot;nrpp&quot;: 48,
  &quot;country&quot;: &quot;US&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;categoryId&quot;: &quot;&quot;,
  &quot;sale&quot;: false,
  &quot;site&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;nextgenDriven&quot;: false
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/location-select</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">Search</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"> </stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/category/products.jsp?categoryId=${ProductGalleryId}&amp;sale=false&amp;parentCatId=cat15790016&amp;pgterm=category%3A${ProductGalleryId}&amp;fromCG=true</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.5_GetAemModel-1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetAemModel</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/results&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!) { getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/results&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  }
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.6_GlobalStylesheet" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.7_GetUserForSession" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetUserForSession</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.8_SaleCatalogNavigation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.9_CartProjection" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">CartProjection</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="5.13_GetBrandSubscriptionsByEmail" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">3000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.0_Product Details" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PDPs" enabled="true">
              <stringProp name="filename">PDPs.txt</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames">productId</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.all</stringProp>
            </CSVDataSet>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.0_Product Details" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.1_AboveNavPromo" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">AboveNavPromo</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.2_CatalogNavigation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">CatalogNavigation</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.3_WORHMenu-1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">WORHMenu</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.4_SwatchDeliveryMessage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SwatchDeliveryMessage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-stocked-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">SwatchDeliveryMessage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-stocked-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.5_SwatchDeliveryMessage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SwatchDeliveryMessage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-spo-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">SwatchDeliveryMessage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-spo-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.6_GiftCardTerms" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GiftCardTerms</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GiftCardTerms($key: String = &quot;&quot;) { contentFragment(group: &quot;pages&quot;, key: $key) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;key&quot;: &quot;rh-gift-card-pdp&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GiftCardTerms</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GiftCardTerms($key: String = &quot;&quot;) { contentFragment(group: &quot;pages&quot;, key: $key) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;key&quot;: &quot;rh-gift-card-pdp&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.7_Product" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Product&quot;,&quot;variables&quot;:{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
},&quot;query&quot;:&quot;query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {\n  product(\n    productId: $productId\n    categoryId: $categoryId\n    filter: $filter\n    userType: $userType\n    currencyCode: $currencyCode\n    siteId: $siteId\n    measureSystem: $measureSystem\n    locale: $locale\n    postalCode: $postalCode\n  ) {\n    __typename\n    ...ProductFields\n  }\n}\n\nfragment ProductFields on Product {\n  __typename\n  ...BaseProductFields\n  personalizeInfo {\n    ...PersonalizeInfo\n    __typename\n  }\n  productLineItem(filter: $filter) {\n    ...LineItem\n    __typename\n  }\n  category\n  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {\n    productId\n    adapter\n    splitDisplay\n    faceoutSwatchId\n    swatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      customSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    finishSwatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  customProductType\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  carouselProdctDetails {\n    imageUrl\n    displayName\n    productId\n    sale\n    __typename\n  }\n  customProduct\n  productOptionGroupBean {\n    title\n    optionsList\n    __typename\n  }\n  swatchBean {\n    swatchId\n    primaryOptionId\n    __typename\n  }\n  fullSkuId\n  ctaLinks {\n    layerType\n    label\n    leftCoordinate\n    topCoordinate\n    flyoutDirection\n    htmlText\n    shortText\n    link\n    modal\n    path\n    __typename\n  }\n  productConfiguration {\n    __typename\n    ...ProductConfiguration\n  }\n}\n\nfragment BaseProductFields on Product {\n  newPdpLayout\n  collectionName\n  collectionCategoryId\n  autoplay\n  preconfiguredSku\n  isActive\n  videoUrl\n  endDate\n  subName\n  metaProduct\n  longDescription\n  merchMessage\n  targetUrl\n  emptyProduct\n  metaProductComponent\n  onSale\n  giftCert\n  featureList\n  dimensions\n  deliveryDimensions\n  careInstructions\n  fixedDisplaySku\n  layout\n  productListTitle\n  id\n  type\n  displayName\n  imageUrl\n  galleryDescription\n  newProduct\n  template\n  suppressSwatchCopy\n  alternateImages {\n    imageUrl\n    caption\n    video\n    sbrId\n    autoplay\n    lifestyleImage\n    sliderCss\n    __typename\n  }\n  productAddonDescription\n  productAddonMessage\n  productAddonTitle\n  productAddons {\n    __typename\n    ...ProductAddons\n  }\n  colorizeInfo {\n    colorizable\n    __typename\n  }\n  layout\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  priceRangeMultiSkuDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  index\n  rangeId\n  parentCategoryId\n  fileLinkUrls {\n    link\n    label\n    __typename\n  }\n  instock {\n    hasInStock\n    showInStockButton\n    showInStockMessage\n    __typename\n  }\n  saleInfo {\n    nonSaleSkus\n    saleSkus\n    totalSkus\n    percentSaleSkus\n    showSaleMessage\n    __typename\n  }\n  sale {\n    hasSale\n    showSaleButton\n    showSaleMessage\n    __typename\n  }\n  uxAttributes {\n    productType\n    triggerSwatchImage\n    giftCert\n    __typename\n  }\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  customProduct\n  rhr\n  showAllOptions\n  hideOptionSet\n  pdpImageLayout\n  pdpCrop\n  serviceSkuProduct\n  nextGenDriven\n  multiSkuAdditionalMessage\n  seoDescription\n  keywords\n  relatedProductIds\n  saleSwatchId\n  productMessage\n  swatch\n  __typename\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n}\n\nfragment ProductAddons on ProductAddons {\n  productAddonsInfo {\n    id\n    customProduct\n    imageUrl\n    productAddonTitle\n    productAddonMessage\n    productAddonDescription\n    onSale\n    longDescription\n    displayName\n    isActive\n    saleInfo {\n      saleSkus\n      totalSkus\n      percentSaleSkus\n      showSaleMessage\n      __typename\n    }\n    priceRangeDisplay {\n      rangeType\n      isUnavailable\n      isSale\n      showMemberPrice\n      skulowestListPrice\n      skulowestMemberPrice\n      skulowestSalePrice\n      nextGenDriven\n      nextGenDrivenOnSale\n      listPrices\n      salePrices\n      memberPrices\n      salePriceLabel\n      priceMessage\n      priceMessagePrice\n      listPriceLabel\n      memberPriceLabel\n      strikePriceLabel\n      currencySymbol\n      hasOnlyOneSku\n      __typename\n    }\n    colorizeInfo {\n      colorizable\n      __typename\n    }\n    alternateImages {\n      imageUrl\n      caption\n      video\n      sbrId\n      __typename\n    }\n    productLineItem {\n      availableOptions {\n        type\n        sortPriority\n        optionTypeId\n        options {\n          id\n          type\n          value\n          sortPriority\n          status\n          message\n          __typename\n        }\n        __typename\n      }\n      image {\n        productId\n        imageUrl\n        __typename\n      }\n      __typename\n    }\n    imageUrl\n    __typename\n  }\n  __typename\n}\n\nfragment PersonalizeInfo on ProductPersonalizeInfo {\n  __typename\n  description\n  features\n  feeLow\n  feeHigh\n  monogrammable\n  personalizable\n  waiveMonogramFee\n  styles {\n    image\n    previewImage\n    displayName\n    id\n    minLength\n    maxLength\n    numberOfLines\n    __typename\n  }\n  fonts {\n    image\n    previewImage\n    displayName\n    id\n    borders {\n      image\n      minLength\n      maxLength\n      numberOfLines\n      id\n      displayName\n      __typename\n    }\n    __typename\n  }\n  colors {\n    image\n    id\n    displayName\n    __typename\n  }\n}\n\nfragment Swatch on ProductSwatch {\n  __typename\n  swatchId\n  title\n  sortPriority\n  swatchGroupIndex\n  details\n  colorize\n  imageUrl\n  primaryOptionId\n  secondaryOptionId\n  featuredPallete\n  relatedSwatchBeans {\n    swatchId\n    title\n    sortPriority\n    swatchGroupIndex\n    details\n    colorize\n    imageUrl\n    primaryOptionId\n    secondaryOptionId\n    optionCopy\n    options {\n      id\n      label\n      optionType\n      sortPriority\n      __typename\n    }\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    __typename\n  }\n  optionCopy\n  options {\n    id\n    label\n    optionType\n    sortPriority\n    __typename\n  }\n  swatchImageSm {\n    url\n    width\n    height\n    __typename\n  }\n  swatchImageLg {\n    url\n    width\n    height\n    __typename\n  }\n  onSale\n}\n\nfragment LineItem on ProductLineItem {\n  __typename\n  sku {\n    ...Sku\n    __typename\n  }\n  availableOptions {\n    type\n    sortPriority\n    optionTypeId\n    adapter\n    options {\n      id\n      type\n      value\n      name\n      sortPriority\n      status\n      message\n      usa_list_price_f\n      usa_member_price_f\n      usa_sale_price_f\n      can_list_price_f\n      can_member_price_f\n      can_sale_price_f\n      gbr_list_price_f\n      gbr_member_price_f\n      gbr_sale_price_f\n      __typename\n    }\n    __typename\n  }\n  image {\n    productId\n    imageUrl\n    __typename\n  }\n  customProductOptions {\n    customProductInformation {\n      customProductType\n      cwCustomProductCode\n      maxWidth\n      maxLength\n      minWidth\n      minLength\n      minDiameter\n      maxDiameter\n      maxControlLength\n      minControlLength\n      widthFractionGap\n      lengthFractionGap\n      diameterFractionGap\n      shape\n      mountTypes {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      controlTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      panels {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      linings {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlPositions {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      rollTypes {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      bracketColors {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlsAndTilts {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      tiltTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      rugTrims {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      finish {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Sku on ProductSku {\n  __typename\n  info {\n    name\n    longDescription\n    imageUrl\n    maxOrderQty\n    skuPriceInfo {\n      currencySymbol\n      listPrice\n      salePrice\n      memberPrice\n      tradePrice\n      contractPrice\n      memberOriginalPrice\n      nextgenDriven\n      onSale\n      onClearance\n      showMemberPrice\n      customProductErrorCode\n      customProductErrorMsg\n      __typename\n    }\n    canadaShippable\n    dropship\n    shipViaCode\n    hasCasingSkus\n    casingProduct\n    replacementCushionProduct\n    __typename\n  }\n  inventory {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    inventoryOnHand\n    __typename\n  }\n  delivery {\n    postalCode\n    needPostalCode\n    deliveryEstimateStatus\n    deliveryEstimate\n    freightExempt\n    shippingSurcharge\n    shippingSurchargeAmount\n    freightExemptMessage\n    deliveryStateMessage\n    lineId\n    __typename\n  }\n  restrictions {\n    spo\n    giftCertificate\n    serviceSku\n    monogram\n    monogramMessage\n    returnPolicyMessage\n    preBillMessage\n    additionalMessages {\n      curbsideMessage\n      assemblyMessage\n      giftCardMessage\n      railroadMessage\n      mattressFeeMessage\n      cancellableMessage\n      finalSaleMessage\n      __typename\n    }\n    countryRestrictions\n    mattressFeeLocation\n    __typename\n  }\n  fulfillmentEta {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    startDateRange\n    endDateRange\n    eta\n    lineType\n    __typename\n  }\n}\n\nfragment ProductConfiguration on ProductInfoV3 {\n  productId\n  optionMatrix\n  instockOptionMatrix\n  preselectedOptions\n  swatchData {\n    __typename\n    ...ProductSwatchV2\n  }\n  optionDetails {\n    type\n    options {\n      id\n      typeId\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ProductSwatchV2 on ProductSwatchV2 {\n  productId\n  swatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  finishSwatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  __typename\n}\n\nfragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {\n  swatchGroupName\n  groupMaterial\n  swatches {\n    swatchId\n    title\n    imageUrl\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    onSale\n    optionCopy\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">Product</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {
  product(
    productId: $productId
    categoryId: $categoryId
    filter: $filter
    userType: $userType
    currencyCode: $currencyCode
    siteId: $siteId
    measureSystem: $measureSystem
    locale: $locale
    postalCode: $postalCode
  ) {
    __typename
    ...ProductFields
  }
}

fragment ProductFields on Product {
  __typename
  ...BaseProductFields
  personalizeInfo {
    ...PersonalizeInfo
    __typename
  }
  productLineItem(filter: $filter) {
    ...LineItem
    __typename
  }
  category
  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {
    productId
    adapter
    splitDisplay
    faceoutSwatchId
    swatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      customSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    finishSwatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    __typename
  }
  customProductType
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  carouselProdctDetails {
    imageUrl
    displayName
    productId
    sale
    __typename
  }
  customProduct
  productOptionGroupBean {
    title
    optionsList
    __typename
  }
  swatchBean {
    swatchId
    primaryOptionId
    __typename
  }
  fullSkuId
  ctaLinks {
    layerType
    label
    leftCoordinate
    topCoordinate
    flyoutDirection
    htmlText
    shortText
    link
    modal
    path
    __typename
  }
  productConfiguration {
    __typename
    ...ProductConfiguration
  }
}

fragment BaseProductFields on Product {
  newPdpLayout
  collectionName
  collectionCategoryId
  autoplay
  preconfiguredSku
  isActive
  videoUrl
  endDate
  subName
  metaProduct
  longDescription
  merchMessage
  targetUrl
  emptyProduct
  metaProductComponent
  onSale
  giftCert
  featureList
  dimensions
  deliveryDimensions
  careInstructions
  fixedDisplaySku
  layout
  productListTitle
  id
  type
  displayName
  imageUrl
  galleryDescription
  newProduct
  template
  suppressSwatchCopy
  alternateImages {
    imageUrl
    caption
    video
    sbrId
    autoplay
    lifestyleImage
    sliderCss
    __typename
  }
  productAddonDescription
  productAddonMessage
  productAddonTitle
  productAddons {
    __typename
    ...ProductAddons
  }
  colorizeInfo {
    colorizable
    __typename
  }
  layout
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  priceRangeMultiSkuDisplay {
    ...PriceRangeDisplay
    __typename
  }
  index
  rangeId
  parentCategoryId
  fileLinkUrls {
    link
    label
    __typename
  }
  instock {
    hasInStock
    showInStockButton
    showInStockMessage
    __typename
  }
  saleInfo {
    nonSaleSkus
    saleSkus
    totalSkus
    percentSaleSkus
    showSaleMessage
    __typename
  }
  sale {
    hasSale
    showSaleButton
    showSaleMessage
    __typename
  }
  uxAttributes {
    productType
    triggerSwatchImage
    giftCert
    __typename
  }
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  customProduct
  rhr
  showAllOptions
  hideOptionSet
  pdpImageLayout
  pdpCrop
  serviceSkuProduct
  nextGenDriven
  multiSkuAdditionalMessage
  seoDescription
  keywords
  relatedProductIds
  saleSwatchId
  productMessage
  swatch
  __typename
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
}

fragment ProductAddons on ProductAddons {
  productAddonsInfo {
    id
    customProduct
    imageUrl
    productAddonTitle
    productAddonMessage
    productAddonDescription
    onSale
    longDescription
    displayName
    isActive
    saleInfo {
      saleSkus
      totalSkus
      percentSaleSkus
      showSaleMessage
      __typename
    }
    priceRangeDisplay {
      rangeType
      isUnavailable
      isSale
      showMemberPrice
      skulowestListPrice
      skulowestMemberPrice
      skulowestSalePrice
      nextGenDriven
      nextGenDrivenOnSale
      listPrices
      salePrices
      memberPrices
      salePriceLabel
      priceMessage
      priceMessagePrice
      listPriceLabel
      memberPriceLabel
      strikePriceLabel
      currencySymbol
      hasOnlyOneSku
      __typename
    }
    colorizeInfo {
      colorizable
      __typename
    }
    alternateImages {
      imageUrl
      caption
      video
      sbrId
      __typename
    }
    productLineItem {
      availableOptions {
        type
        sortPriority
        optionTypeId
        options {
          id
          type
          value
          sortPriority
          status
          message
          __typename
        }
        __typename
      }
      image {
        productId
        imageUrl
        __typename
      }
      __typename
    }
    imageUrl
    __typename
  }
  __typename
}

fragment PersonalizeInfo on ProductPersonalizeInfo {
  __typename
  description
  features
  feeLow
  feeHigh
  monogrammable
  personalizable
  waiveMonogramFee
  styles {
    image
    previewImage
    displayName
    id
    minLength
    maxLength
    numberOfLines
    __typename
  }
  fonts {
    image
    previewImage
    displayName
    id
    borders {
      image
      minLength
      maxLength
      numberOfLines
      id
      displayName
      __typename
    }
    __typename
  }
  colors {
    image
    id
    displayName
    __typename
  }
}

fragment Swatch on ProductSwatch {
  __typename
  swatchId
  title
  sortPriority
  swatchGroupIndex
  details
  colorize
  imageUrl
  primaryOptionId
  secondaryOptionId
  featuredPallete
  relatedSwatchBeans {
    swatchId
    title
    sortPriority
    swatchGroupIndex
    details
    colorize
    imageUrl
    primaryOptionId
    secondaryOptionId
    optionCopy
    options {
      id
      label
      optionType
      sortPriority
      __typename
    }
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    __typename
  }
  optionCopy
  options {
    id
    label
    optionType
    sortPriority
    __typename
  }
  swatchImageSm {
    url
    width
    height
    __typename
  }
  swatchImageLg {
    url
    width
    height
    __typename
  }
  onSale
}

fragment LineItem on ProductLineItem {
  __typename
  sku {
    ...Sku
    __typename
  }
  availableOptions {
    type
    sortPriority
    optionTypeId
    adapter
    options {
      id
      type
      value
      name
      sortPriority
      status
      message
      usa_list_price_f
      usa_member_price_f
      usa_sale_price_f
      can_list_price_f
      can_member_price_f
      can_sale_price_f
      gbr_list_price_f
      gbr_member_price_f
      gbr_sale_price_f
      __typename
    }
    __typename
  }
  image {
    productId
    imageUrl
    __typename
  }
  customProductOptions {
    customProductInformation {
      customProductType
      cwCustomProductCode
      maxWidth
      maxLength
      minWidth
      minLength
      minDiameter
      maxDiameter
      maxControlLength
      minControlLength
      widthFractionGap
      lengthFractionGap
      diameterFractionGap
      shape
      mountTypes {
        id
        value
        status
        message
        code
        __typename
      }
      controlTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      panels {
        id
        value
        status
        message
        code
        __typename
      }
      linings {
        id
        value
        status
        message
        __typename
      }
      controlPositions {
        id
        value
        status
        message
        __typename
      }
      rollTypes {
        id
        value
        status
        message
        __typename
      }
      bracketColors {
        id
        value
        status
        message
        __typename
      }
      controlsAndTilts {
        id
        value
        status
        message
        __typename
      }
      tiltTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      rugTrims {
        id
        value
        status
        message
        code
        __typename
      }
      finish {
        id
        value
        status
        message
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment Sku on ProductSku {
  __typename
  info {
    name
    longDescription
    imageUrl
    maxOrderQty
    skuPriceInfo {
      currencySymbol
      listPrice
      salePrice
      memberPrice
      tradePrice
      contractPrice
      memberOriginalPrice
      nextgenDriven
      onSale
      onClearance
      showMemberPrice
      customProductErrorCode
      customProductErrorMsg
      __typename
    }
    canadaShippable
    dropship
    shipViaCode
    hasCasingSkus
    casingProduct
    replacementCushionProduct
    __typename
  }
  inventory {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    inventoryOnHand
    __typename
  }
  delivery {
    postalCode
    needPostalCode
    deliveryEstimateStatus
    deliveryEstimate
    freightExempt
    shippingSurcharge
    shippingSurchargeAmount
    freightExemptMessage
    deliveryStateMessage
    lineId
    __typename
  }
  restrictions {
    spo
    giftCertificate
    serviceSku
    monogram
    monogramMessage
    returnPolicyMessage
    preBillMessage
    additionalMessages {
      curbsideMessage
      assemblyMessage
      giftCardMessage
      railroadMessage
      mattressFeeMessage
      cancellableMessage
      finalSaleMessage
      __typename
    }
    countryRestrictions
    mattressFeeLocation
    __typename
  }
  fulfillmentEta {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    startDateRange
    endDateRange
    eta
    lineType
    __typename
  }
}

fragment ProductConfiguration on ProductInfoV3 {
  productId
  optionMatrix
  instockOptionMatrix
  preselectedOptions
  swatchData {
    __typename
    ...ProductSwatchV2
  }
  optionDetails {
    type
    options {
      id
      typeId
      value
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment ProductSwatchV2 on ProductSwatchV2 {
  productId
  swatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  finishSwatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  __typename
}

fragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {
  swatchGroupName
  groupMaterial
  swatches {
    swatchId
    title
    imageUrl
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    onSale
    optionCopy
    __typename
  }
  __typename
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct1" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct1</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds.[*]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOptions" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">availableOptions</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.productLineItem.availableOptions.[*]</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.8_UpsellProducts" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">UpsellProducts</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query UpsellProducts($productId: String!, $locale: String, $measureSystem: String, $currencyCode: String, $siteId: String, $userType: String) { upsellProducts( productId: $productId locale: $locale measureSystem: $measureSystem currencyCode: $currencyCode siteId: $siteId userType: $userType ) { upsellProducts { id type displayName imageUrl galleryDescription newProduct template pgCrop pgCropRules uxAttributes { productType triggerSwatchImage giftCert __typename } priceRangeDisplay { ...UpsellPriceRangeDisplay __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } index rangeId parentCategoryId rhr onSale metaProductComponent __typename } collectionName componentTitle __typename } } fragment UpsellPriceRangeDisplay on UpsellProductPriceRangeDisplay { __typename rangeType isSale isUnavailable showMemberPrice isRetail isCustomProduct listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol priceFilter overridePriceLabel nextGenDrivenOnSale skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">UpsellProducts</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query UpsellProducts($productId: String!, $locale: String, $measureSystem: String, $currencyCode: String, $siteId: String, $userType: String) { upsellProducts( productId: $productId locale: $locale measureSystem: $measureSystem currencyCode: $currencyCode siteId: $siteId userType: $userType ) { upsellProducts { id type displayName imageUrl galleryDescription newProduct template pgCrop pgCropRules uxAttributes { productType triggerSwatchImage giftCert __typename } priceRangeDisplay { ...UpsellPriceRangeDisplay __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } index rangeId parentCategoryId rhr onSale metaProductComponent __typename } collectionName componentTitle __typename } } fragment UpsellPriceRangeDisplay on UpsellProductPriceRangeDisplay { __typename rangeType isSale isUnavailable showMemberPrice isRetail isCustomProduct listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol priceFilter overridePriceLabel nextGenDrivenOnSale skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.9_ProductSwatchImage-1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductSwatchImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductSwatchImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.10_GetAemModel-1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/product&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/product&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.11_GlobalStylesheet" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.12_GetUserForSession" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetUserForSession</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.13_SaleCatalogNavigation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.14_RelatedProductsQuery" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">RelatedProductsQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query RelatedProductsQuery($productIds: [String!]!, $filter: String, $currencyCode: String, $measureSystem: String, $locale: String, $siteId: String, $categoryId: String, $userType: String) { relatedProductsQuery( productIds: $productIds filter: $filter currencyCode: $currencyCode measureSystem: $measureSystem locale: $locale siteId: $siteId categoryId: $categoryId userType: $userType ) { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } } } fragment BaseProductFields on Product { newPdpLayout collectionName collectionCategoryId autoplay preconfiguredSku isActive videoUrl endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId autoplay lifestyleImage sliderCss __typename } productAddonDescription productAddonMessage productAddonTitle productAddons { __typename ...ProductAddons } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords relatedProductIds saleSwatchId productMessage swatch category __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku } fragment ProductAddons on ProductAddons { productAddonsInfo { id customProduct imageUrl productAddonTitle productAddonMessage productAddonDescription onSale longDescription displayName isActive saleInfo { saleSkus totalSkus percentSaleSkus showSaleMessage __typename } priceRangeDisplay { rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol hasOnlyOneSku __typename } colorizeInfo { colorizable __typename } alternateImages { imageUrl caption video sbrId __typename } productLineItem { availableOptions { type sortPriority optionTypeId options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } __typename } imageUrl __typename } __typename } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productIds&quot;: ${RelatedProduct2},
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">RelatedProductsQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query RelatedProductsQuery($productIds: [String!]!, $filter: String, $currencyCode: String, $measureSystem: String, $locale: String, $siteId: String, $categoryId: String, $userType: String) { relatedProductsQuery( productIds: $productIds filter: $filter currencyCode: $currencyCode measureSystem: $measureSystem locale: $locale siteId: $siteId categoryId: $categoryId userType: $userType ) { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } } } fragment BaseProductFields on Product { newPdpLayout collectionName collectionCategoryId autoplay preconfiguredSku isActive videoUrl endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId autoplay lifestyleImage sliderCss __typename } productAddonDescription productAddonMessage productAddonTitle productAddons { __typename ...ProductAddons } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords relatedProductIds saleSwatchId productMessage swatch category __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku } fragment ProductAddons on ProductAddons { productAddonsInfo { id customProduct imageUrl productAddonTitle productAddonMessage productAddonDescription onSale longDescription displayName isActive saleInfo { saleSkus totalSkus percentSaleSkus showSaleMessage __typename } priceRangeDisplay { rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol hasOnlyOneSku __typename } colorizeInfo { colorizable __typename } alternateImages { imageUrl caption video sbrId __typename } productLineItem { availableOptions { type sortPriority optionTypeId options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } __typename } imageUrl __typename } __typename } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productIds&quot;: ${RelatedProduct2},
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">int count = Integer.parseInt(vars.get(&quot;RelatedProduct1_matchNr&quot;));
String delimiter = &quot;,&quot;;
StringBuffer sb = new StringBuffer();
for(int i=1;i&lt;=count;i++) { 
 sb.append(vars.get(&quot;RelatedProduct1_&quot; + i));
 if (i == count){
 break; //to eliminate comma after the array
 }else {
  sb.append(delimiter);
 }
}
 vars.put(&quot;RelatedProduct2&quot;,sb.toString());</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.15_ProductImage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="false">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.15_LineItemQuery-1_MainProduct" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.16_GetAemModel-2" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } } </stringProp>
                <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - RelatedProduct_matchNr" enabled="true">
                <stringProp name="IfController.condition">${__jexl3( ${RelatedProduct_matchNr} &gt; 0,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                  <stringProp name="ForeachController.inputVal">RelatedProduct</stringProp>
                  <stringProp name="ForeachController.returnVal">RelatedProduct</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                    <stringProp name="CounterConfig.start">1</stringProp>
                    <stringProp name="CounterConfig.end">${RelatedProduct_matchNr}</stringProp>
                    <stringProp name="CounterConfig.incr">1</stringProp>
                    <stringProp name="CounterConfig.name">Counter</stringProp>
                    <stringProp name="CounterConfig.format"></stringProp>
                    <boolProp name="CounterConfig.per_user">false</boolProp>
                  </CounterConfig>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.17_ProductImage_RelatedProduct" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">operationName</stringProp>
                          <stringProp name="Argument.value">ProductImage</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="query" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">query</stringProp>
                          <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">variables</stringProp>
                          <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                    <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                    <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="x-request-id" elementType="Header">
                          <stringProp name="Header.name">x-request-id</stringProp>
                          <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                        </elementProp>
                        <elementProp name="apollographql-client-name" elementType="Header">
                          <stringProp name="Header.name">apollographql-client-name</stringProp>
                          <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="x-operation" elementType="Header">
                          <stringProp name="Header.name">x-operation</stringProp>
                          <stringProp name="Header.value">ProductImage</stringProp>
                        </elementProp>
                        <elementProp name="Client-Origin" elementType="Header">
                          <stringProp name="Header.name">Client-Origin</stringProp>
                          <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="authorization" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                        </elementProp>
                        <elementProp name="content-type" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Dest" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.18_LineItemQuery-2_RelatedProduct" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">operationName</stringProp>
                          <stringProp name="Argument.value">LineItemQuery</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="query" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">query</stringProp>
                          <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">variables</stringProp>
                          <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                    <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                    <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="x-request-id" elementType="Header">
                          <stringProp name="Header.name">x-request-id</stringProp>
                          <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                        </elementProp>
                        <elementProp name="apollographql-client-name" elementType="Header">
                          <stringProp name="Header.name">apollographql-client-name</stringProp>
                          <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="x-operation" elementType="Header">
                          <stringProp name="Header.name">x-operation</stringProp>
                          <stringProp name="Header.value">LineItemQuery</stringProp>
                        </elementProp>
                        <elementProp name="Client-Origin" elementType="Header">
                          <stringProp name="Header.name">Client-Origin</stringProp>
                          <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="authorization" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                        </elementProp>
                        <elementProp name="content-type" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Dest" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - availableOptions_matchNr" enabled="true">
                <stringProp name="IfController.condition">${__jexl3( ${availableOptions_matchNr} &gt; 0,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.19_LineItemQuery-1_MainProduct" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">LineItemQuery</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;RH END CUSTOMER&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;RH END CUSTOMER&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">LineItemQuery</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                  <stringProp name="ForeachController.inputVal">availableOptions</stringProp>
                  <stringProp name="ForeachController.returnVal">availableOption</stringProp>
                  <boolProp name="ForeachController.useSeparator">true</boolProp>
                </ForeachController>
                <hashTree>
                  <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                    <stringProp name="CounterConfig.start">1</stringProp>
                    <stringProp name="CounterConfig.end">${availableOptions_matchNr}</stringProp>
                    <stringProp name="CounterConfig.incr">1</stringProp>
                    <stringProp name="CounterConfig.name">Counter</stringProp>
                    <stringProp name="CounterConfig.format"></stringProp>
                    <boolProp name="CounterConfig.per_user">false</boolProp>
                  </CounterConfig>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.19_ProductImage_MainProduct" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">operationName</stringProp>
                          <stringProp name="Argument.value">ProductImage</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="query" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">query</stringProp>
                          <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">variables</stringProp>
                          <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                    <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                    <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="TestPlan.comments">-${__counter(,coun)}</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="x-request-id" elementType="Header">
                          <stringProp name="Header.name">x-request-id</stringProp>
                          <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                        </elementProp>
                        <elementProp name="apollographql-client-name" elementType="Header">
                          <stringProp name="Header.name">apollographql-client-name</stringProp>
                          <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="x-operation" elementType="Header">
                          <stringProp name="Header.name">x-operation</stringProp>
                          <stringProp name="Header.value">ProductImage</stringProp>
                        </elementProp>
                        <elementProp name="Client-Origin" elementType="Header">
                          <stringProp name="Header.name">Client-Origin</stringProp>
                          <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="authorization" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                        </elementProp>
                        <elementProp name="content-type" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Dest" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Scope.variable">availableOption</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Scope.variable">availableOption</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.20_LineItemQuery-3_MainProduct" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">operationName</stringProp>
                          <stringProp name="Argument.value">LineItemQuery</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="query" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">query</stringProp>
                          <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                        <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                          <boolProp name="HTTPArgument.always_encode">true</boolProp>
                          <stringProp name="Argument.name">variables</stringProp>
                          <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                    <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                    <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                    <stringProp name="TestPlan.comments">-${coun}</stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="x-request-id" elementType="Header">
                          <stringProp name="Header.name">x-request-id</stringProp>
                          <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Mode" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                          <stringProp name="Header.value">cors</stringProp>
                        </elementProp>
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                        </elementProp>
                        <elementProp name="apollographql-client-name" elementType="Header">
                          <stringProp name="Header.name">apollographql-client-name</stringProp>
                          <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Site" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                          <stringProp name="Header.value">same-origin</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="x-operation" elementType="Header">
                          <stringProp name="Header.name">x-operation</stringProp>
                          <stringProp name="Header.value">LineItemQuery</stringProp>
                        </elementProp>
                        <elementProp name="Client-Origin" elementType="Header">
                          <stringProp name="Header.name">Client-Origin</stringProp>
                          <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                        <elementProp name="authorization" elementType="Header">
                          <stringProp name="Header.name">authorization</stringProp>
                          <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                        </elementProp>
                        <elementProp name="content-type" elementType="Header">
                          <stringProp name="Header.name">content-type</stringProp>
                          <stringProp name="Header.value">application/json</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                        </elementProp>
                        <elementProp name="Sec-Fetch-Dest" elementType="Header">
                          <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                          <stringProp name="Header.value">empty</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Scope.variable">availableOption</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="Scope.variable">availableOption</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="false">
                      <stringProp name="cacheKey">true</stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionId&quot;, selectedOptionIds)</stringProp>
                      <stringProp name="scriptLanguage">groovy</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_LineItemQuery-4_MainProduct" enabled="false">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">LineItemQuery</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">LineItemQuery</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.21_LineItemSkuQuery_MainProduct" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemSkuQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemSkuQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemSkuQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_GetSku" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetSku</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetSku</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">GetSku</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.21_MultiSkuCompopnents" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">MultiSkuCompopnents</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query MultiSkuCompopnents($productId: String!, $selectedOptionIds: [String!], $siteId: String!, $currencyCode: String, $countryCode: String!, $postalCode: String!, $locale: String!, $qty: Float) { pullMultiSkuComponents( productId: $productId selectedOptionIds: $selectedOptionIds currencyCode: $currencyCode siteId: $siteId countryCode: $countryCode postalCode: $postalCode locale: $locale qty: $qty ) { contractPrice listPrice memberPrice salePrice tradePrice components { delivery { fullSkuId postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage __typename } fullSkuId info { name productId longDescription imageUrl webPurchasable canadaShippable dropship shipViaCode upc sts maxOrderQty hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { fullSkuId atgSkuId inventoryCode inventoryOnHand inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString adapter failureMessage __typename } restrictions { spo giftCertificate membershipSku serviceSku monogram monogramMessage returnPolicyMessage countryRestrictions mattressFeeLocation preBillMessage __typename } __typename productId quantity } __typename minInventory skuInventory { fullSkuId atgSkuId inventoryCode inventoryOnHand inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString adapter failureMessage __typename } isSPO multiSkuSpoPreBillMessage multiSkuSpoReturnMessage multiSkuComponentsDeliveryInfo { fullSkuId postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage __typename } } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;USA&quot;,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;qty&quot;: 1
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MultiSkuCompopnents</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MultiSkuCompopnents($productId: String!, $selectedOptionIds: [String!], $siteId: String!, $currencyCode: String, $countryCode: String!, $postalCode: String!, $locale: String!, $qty: Float) { pullMultiSkuComponents( productId: $productId selectedOptionIds: $selectedOptionIds currencyCode: $currencyCode siteId: $siteId countryCode: $countryCode postalCode: $postalCode locale: $locale qty: $qty ) { contractPrice listPrice memberPrice salePrice tradePrice components { delivery { fullSkuId postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage __typename } fullSkuId info { name productId longDescription imageUrl webPurchasable canadaShippable dropship shipViaCode upc sts maxOrderQty hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { fullSkuId atgSkuId inventoryCode inventoryOnHand inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString adapter failureMessage __typename } restrictions { spo giftCertificate membershipSku serviceSku monogram monogramMessage returnPolicyMessage countryRestrictions mattressFeeLocation preBillMessage __typename } __typename productId quantity } __typename minInventory skuInventory { fullSkuId atgSkuId inventoryCode inventoryOnHand inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString adapter failureMessage __typename } isSPO multiSkuSpoPreBillMessage multiSkuSpoReturnMessage multiSkuComponentsDeliveryInfo { fullSkuId postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage __typename } } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;USA&quot;,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;qty&quot;: 1
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.pullMultiSkuComponents.skuInventory.fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">MultiSkuCompopnents</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_SkuAvailabilityStatus" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SkuAvailabilityStatus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">SkuAvailabilityStatus</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">SkuAvailabilityStatus</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.21_CartProjection" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">CartProjection</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_GetBrandSubscriptionsByEmail" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">1000</stringProp>
              <stringProp name="RandomTimer.range">100</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="7.0_AddToCart" enabled="true">
            <stringProp name="IfController.condition">${__jexl3( ${fullSkuId_matchNr} &gt; 0,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
            <stringProp name="TestPlan.comments">${__jexl3( ${fullSkuId_matchNr} &gt; 0 &amp;&amp; ${inventoryRemaining} &gt; 0,)}</stringProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="7.0_AddToCart" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="7.1_AddLineItemsToCart" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AddLineItemsToCart&quot;,&quot;variables&quot;:{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;lineItemsInput&quot;: {
    &quot;items&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;sku&quot;: &quot;${fullSkuId}&quot;,
        &quot;fusionId&quot;: &quot;&quot;,
        &quot;quantity&quot;: 1,
        &quot;brand&quot;: &quot;RH&quot;,
        &quot;giftTo&quot;: &quot;&quot;,
        &quot;giftFrom&quot;: &quot;&quot;,
        &quot;giftMessage&quot;: &quot;&quot;,
        &quot;spoTermsAccepted&quot;: false,
        &quot;spoTerms&quot;: null
      }
    ]
  }
},&quot;query&quot;:&quot;mutation AddLineItemsToCart($email: String!, $cartId: String!, $lineItemsInput: LineItemsInput!, $createCartInfo: CreateCartInfoInput) {\n  addLineItemsToCart(\n    email: $email\n    cartId: $cartId\n    lineItemsInput: $lineItemsInput\n    createCartInfo: $createCartInfo\n  ) {\n    id\n    createdAt\n    lastModifiedAt\n    cartPrice {\n      currencyCode\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">AddLineItemsToCart</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation AddLineItemsToCart($email: String!, $cartId: String!, $lineItemsInput: LineItemsInput!, $createCartInfo: CreateCartInfoInput) {
  addLineItemsToCart(
    email: $email
    cartId: $cartId
    lineItemsInput: $lineItemsInput
    createCartInfo: $createCartInfo
  ) {
    id
    createdAt
    lastModifiedAt
    cartPrice {
      currencyCode
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;lineItemsInput&quot;: {
    &quot;items&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;sku&quot;: &quot;${fullSkuId}&quot;,
        &quot;fusionId&quot;: &quot;&quot;,
        &quot;quantity&quot;: 1,
        &quot;brand&quot;: &quot;RH&quot;,
        &quot;giftTo&quot;: &quot;&quot;,
        &quot;giftFrom&quot;: &quot;&quot;,
        &quot;giftMessage&quot;: &quot;&quot;,
        &quot;spoTermsAccepted&quot;: false,
        &quot;spoTerms&quot;: null
      }
    ]
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="7.2_CartProjection" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">CartProjection</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">100</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="8.0_ViewCart" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.1_AboveNavPromo" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">AboveNavPromo</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.2_CatalogNavigation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">CatalogNavigation</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.3_WORHMenu" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">WORHMenu</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.4_GetAemModel-1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/checkout/shopping_cart&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/checkout/shopping_cart&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.5_GlobalStylesheet" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.6_GetUserForSession" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetUserForSession</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.7_SaleCatalogNavigation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.8_GetAemModel-2" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/marketing-email-popup&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.9_CartProjection" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">CartProjection</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.10_ShoppingCart" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ShoppingCart</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ShoppingCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String, $locale: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId locale: $locale ) { ...Cart __typename } } fragment Cart on CartType { __typename id billUpFront requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber schedulableOrder cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef sfContactId globalSfContactId __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd dc coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus imageUrl __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice itemTotal feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } priceAdjustments { adjustment adjustmentType reason targetType adjustedPrice priceBeforeAdjustment __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } soldToAddress { addressLine1 addressLine2 city state country companyName postalCode eveningPhone phone email firstName lastName __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment transactions { amount status type __typename } giftCardBalance customerEmail customerPhone paymentRequestSendByQR paymentRequestSendByEmail paymentRequestSendByTextMessage __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { ctId designerCart galleryId key orderClassification __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ShoppingCart</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ShoppingCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String, $locale: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId locale: $locale ) { ...Cart __typename } } fragment Cart on CartType { __typename id billUpFront requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber schedulableOrder cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef sfContactId globalSfContactId __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd dc coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus imageUrl __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice itemTotal feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } priceAdjustments { adjustment adjustmentType reason targetType adjustedPrice priceBeforeAdjustment __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } soldToAddress { addressLine1 addressLine2 city state country companyName postalCode eveningPhone phone email firstName lastName __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment transactions { amount status type __typename } giftCardBalance customerEmail customerPhone paymentRequestSendByQR paymentRequestSendByEmail paymentRequestSendByTextMessage __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { ctId designerCart galleryId key orderClassification __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.12_ProductImage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!]) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: [ &quot;${selectedOptionIds}&quot; ],
  &quot;productId&quot;: &quot;${productId}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!]) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: [ &quot;${selectedOptionIds}&quot; ],
  &quot;productId&quot;: &quot;${productId}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.13_ProductDetailBulk" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;ProductDetailBulk&quot;,&quot;variables&quot;:{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
},&quot;query&quot;:&quot;query ProductDetailBulk($productBulkInput: ProductBulkInput!) {\n  productDetailBulk(productBulkInput: $productBulkInput) {\n    productId\n    displayName\n    imageUrl\n    targetUrl\n    alternateImages {\n      imageUrl\n      caption\n      __typename\n    }\n    colorizeInfo {\n      colorizable\n      colorizeType\n      multicolor\n      __typename\n    }\n    personalizeInfo {\n      feeLow\n      feeHigh\n      monogrammable\n      waiveMonogramFee\n      __typename\n    }\n    category\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductDetailBulk</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductDetailBulk($productBulkInput: ProductBulkInput!) {
  productDetailBulk(productBulkInput: $productBulkInput) {
    productId
    displayName
    imageUrl
    targetUrl
    alternateImages {
      imageUrl
      caption
      __typename
    }
    colorizeInfo {
      colorizable
      colorizeType
      multicolor
      __typename
    }
    personalizeInfo {
      feeLow
      feeHigh
      monogrammable
      waiveMonogramFee
      __typename
    }
    category
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.14_MonogramATGOptionsBulk" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;MonogramATGOptionsBulk&quot;,&quot;variables&quot;:{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
},&quot;query&quot;:&quot;query MonogramATGOptionsBulk($productBulkInput: ProductBulkInput!) {\n  monogramATGOptionsBulk(productBulkInput: $productBulkInput) {\n    productId\n    fonts {\n      id\n      displayName\n      imageUrl\n      altImageUrl\n      minLength\n      maxLength\n      numberOfLines\n      cwCode\n      borders {\n        id\n        displayName\n        imageUrl\n        altImageUrl\n        minLength\n        maxLength\n        numberOfLines\n        cwCode\n        style {\n          id\n          displayName\n          imageUrl\n          altImageUrl\n          minLength\n          maxLength\n          numberOfLines\n          cwCode\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    styles {\n      id\n      displayName\n      imageUrl\n      altImageUrl\n      minLength\n      maxLength\n      numberOfLines\n      cwCode\n      borders {\n        id\n        displayName\n        imageUrl\n        altImageUrl\n        minLength\n        maxLength\n        numberOfLines\n        cwCode\n        style {\n          id\n          displayName\n          imageUrl\n          altImageUrl\n          minLength\n          maxLength\n          numberOfLines\n          cwCode\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    colors {\n      id\n      displayName\n      imageUrl\n      altImageUrl\n      minLength\n      maxLength\n      numberOfLines\n      cwCode\n      borders {\n        id\n        displayName\n        imageUrl\n        altImageUrl\n        minLength\n        maxLength\n        numberOfLines\n        cwCode\n        style {\n          id\n          displayName\n          imageUrl\n          altImageUrl\n          minLength\n          maxLength\n          numberOfLines\n          cwCode\n          __typename\n        }\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MonogramATGOptionsBulk</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MonogramATGOptionsBulk($productBulkInput: ProductBulkInput!) {
  monogramATGOptionsBulk(productBulkInput: $productBulkInput) {
    productId
    fonts {
      id
      displayName
      imageUrl
      altImageUrl
      minLength
      maxLength
      numberOfLines
      cwCode
      borders {
        id
        displayName
        imageUrl
        altImageUrl
        minLength
        maxLength
        numberOfLines
        cwCode
        style {
          id
          displayName
          imageUrl
          altImageUrl
          minLength
          maxLength
          numberOfLines
          cwCode
          __typename
        }
        __typename
      }
      __typename
    }
    styles {
      id
      displayName
      imageUrl
      altImageUrl
      minLength
      maxLength
      numberOfLines
      cwCode
      borders {
        id
        displayName
        imageUrl
        altImageUrl
        minLength
        maxLength
        numberOfLines
        cwCode
        style {
          id
          displayName
          imageUrl
          altImageUrl
          minLength
          maxLength
          numberOfLines
          cwCode
          __typename
        }
        __typename
      }
      __typename
    }
    colors {
      id
      displayName
      imageUrl
      altImageUrl
      minLength
      maxLength
      numberOfLines
      cwCode
      borders {
        id
        displayName
        imageUrl
        altImageUrl
        minLength
        maxLength
        numberOfLines
        cwCode
        style {
          id
          displayName
          imageUrl
          altImageUrl
          minLength
          maxLength
          numberOfLines
          cwCode
          __typename
        }
        __typename
      }
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.15_ProductImageBulk" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImageBulk</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImageBulk($productBulkInput: ProductBulkInput!) { productImageBulk(productBulkInput: $productBulkInput) { productId imageUrl fullSkuId __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImageBulk</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImageBulk($productBulkInput: ProductBulkInput!) { productImageBulk(productBulkInput: $productBulkInput) { productId imageUrl fullSkuId __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.16_SkuRestrictionsBulk" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SkuRestrictionsBulk&quot;,&quot;variables&quot;:{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
},&quot;query&quot;:&quot;query SkuRestrictionsBulk($productBulkInput: ProductBulkInput!) {\n  skuRestrictionsBulk(productBulkInput: $productBulkInput) {\n    fullSkuId\n    spo\n    membershipSku\n    returnPolicyMessage\n    restockingFee\n    countryRestrictions\n    mattressFeeLocation\n    preBillMessage\n    additionalMessages {\n      curbsideMessage\n      assemblyMessage\n      giftCardMessage\n      railroadMessage\n      mattressFeeMessage\n      cancellableMessage\n      finalSaleMessage\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">SkuRestrictionsBulk</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query SkuRestrictionsBulk($productBulkInput: ProductBulkInput!) {
  skuRestrictionsBulk(productBulkInput: $productBulkInput) {
    fullSkuId
    spo
    membershipSku
    returnPolicyMessage
    restockingFee
    countryRestrictions
    mattressFeeLocation
    preBillMessage
    additionalMessages {
      curbsideMessage
      assemblyMessage
      giftCardMessage
      railroadMessage
      mattressFeeMessage
      cancellableMessage
      finalSaleMessage
      __typename
    }
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.17_GiftBoxDetailBulk" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;GiftBoxDetailBulk&quot;,&quot;variables&quot;:{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
},&quot;query&quot;:&quot;query GiftBoxDetailBulk($productBulkInput: ProductBulkInput!) {\n  giftBoxDetailBulk(productBulkInput: $productBulkInput) {\n    fullSkuId\n    giftBox\n    giftBoxFee\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GiftBoxDetailBulk</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GiftBoxDetailBulk($productBulkInput: ProductBulkInput!) {
  giftBoxDetailBulk(productBulkInput: $productBulkInput) {
    fullSkuId
    giftBox
    giftBoxFee
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productBulkInput&quot;: {
    &quot;products&quot;: [
      {
        &quot;productId&quot;: &quot;${productId}&quot;,
        &quot;fullSkuId&quot;: &quot;${fullSkuId}&quot;,
        &quot;options&quot;: [
          &quot;${selectedOptionIds}&quot;
        ],
        &quot;monogram&quot;: false,
        &quot;siteId&quot;: &quot;RH&quot;
      }
    ]
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="8.11_MemberPrice" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">MemberPrice</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query MemberPrice($country: String!, $brand: String!) { memberPrice(country: $country, brand: $brand) }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;brand&quot;: &quot;RH&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">MemberPrice</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query MemberPrice($country: String!, $brand: String!) { memberPrice(country: $country, brand: $brand) }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;brand&quot;: &quot;RH&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">100</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="9.0_CheckoutAsGuest" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.1_GetAemModel-1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/checkout-sign-in-register&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/checkout-sign-in-register&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.2_GetUserForSession" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetUserForSession</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean, $doNotMutateCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart doNotMutateCart: $doNotMutateCart ) { sessionId rhuid location currentCartId validAssociate location rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean, $doNotMutateCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart doNotMutateCart: $doNotMutateCart ) { sessionId rhuid location currentCartId validAssociate location rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.3_GetAemModel-2" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/address&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/address&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.3_GetAemModel-2" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/checkout/address&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/checkout/address&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.5_GetCart" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetCart</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id billUpFront requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber schedulableOrder cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef sfContactId globalSfContactId __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd dc coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus imageUrl __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice itemTotal feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } priceAdjustments { adjustment adjustmentType reason targetType adjustedPrice priceBeforeAdjustment __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } soldToAddress { addressLine1 addressLine2 city state country companyName postalCode eveningPhone phone email firstName lastName __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment transactions { amount status type __typename } giftCardBalance customerEmail customerPhone paymentRequestSendByQR paymentRequestSendByEmail paymentRequestSendByTextMessage __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { ctId designerCart galleryId key orderClassification __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id billUpFront requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber schedulableOrder cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef sfContactId globalSfContactId __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd dc coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus imageUrl __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice itemTotal feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } priceAdjustments { adjustment adjustmentType reason targetType adjustedPrice priceBeforeAdjustment __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } soldToAddress { addressLine1 addressLine2 city state country companyName postalCode eveningPhone phone email firstName lastName __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment transactions { amount status type __typename } giftCardBalance customerEmail customerPhone paymentRequestSendByQR paymentRequestSendByEmail paymentRequestSendByTextMessage __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { ctId designerCart galleryId key orderClassification __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="9.4_GetUserPayments" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetUserPayments</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetUserPayments($userId: String!) { getUserPaymentMethods(userId: $userId) { userCardInfo { shopperRef cardInfo { pcid cardType expiryMonth expiryYear defaultCard __typename } billToAddress { firstName lastName companyName line1 line2 city state postalCode country phoneNumber __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetUserPayments</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetUserPayments($userId: String!) { getUserPaymentMethods(userId: $userId) { userCardInfo { shopperRef cardInfo { pcid cardType expiryMonth expiryYear defaultCard __typename } billToAddress { firstName lastName companyName line1 line2 city state postalCode country phoneNumber __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">3000</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">100</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="10.0_ContinueToShippinngAddress" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.1_AnonymousToGuest" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;AnonymousToGuest&quot;,&quot;variables&quot;:{
  &quot;input&quot;: {
    &quot;cartId&quot;: &quot;${currentCartId}&quot;,
    &quot;userId&quot;: &quot;${userId}&quot;,
    &quot;email&quot;: &quot;${email}&quot;,
    &quot;firstName&quot;: &quot;Mathew&quot;,
    &quot;lastName&quot;: &quot;Thomas&quot;
  },
  &quot;region&quot;: &quot;US&quot;
},&quot;query&quot;:&quot;mutation AnonymousToGuest($input: AnonymousToGuestInput!, $region: String) {\n  anonymousToGuest(input: $input, region: $region) {\n    id\n    __typename\n  }\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">AnonymousToGuest</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation AnonymousToGuest($input: AnonymousToGuestInput!, $region: String) {
  anonymousToGuest(input: $input, region: $region) {
    id
    __typename
  }
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;input&quot;: {
    &quot;cartId&quot;: &quot;${currentCartId}&quot;,
    &quot;userId&quot;: &quot;${userId}&quot;,
    &quot;email&quot;: &quot;${email}&quot;,
    &quot;firstName&quot;: &quot;Mathew&quot;,
    &quot;lastName&quot;: &quot;Thomas&quot;
  },
  &quot;region&quot;: &quot;US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.2_ValidatePostalCodeByCountryCode" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ValidatePostalCodeByCountryCode</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ValidatePostalCodeByCountryCode($countryCode: String!, $postalCode: String!) { validatePostalCodeByCountryCode( countryCode: $countryCode postalCode: $postalCode ) { ...PostalCodeValidation __typename } } fragment PostalCodeValidation on PostalCodeByCountryCodeResult { isValid __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ValidatePostalCodeByCountryCode</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ValidatePostalCodeByCountryCode($countryCode: String!, $postalCode: String!) { validatePostalCodeByCountryCode( countryCode: $countryCode postalCode: $postalCode ) { ...PostalCodeValidation __typename } } fragment PostalCodeValidation on PostalCodeByCountryCodeResult { isValid __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.3_AVSVerifyAddresses" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">AVSVerifyAddresses</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query AVSVerifyAddresses($addresses: AddressValidationListInput!, $email: String, $firstName: String, $lastName: String) { AVSVerifyAddresses( addresses: $addresses email: $email firstName: $firstName lastName: $lastName ) { ...AVSAddressValidation __typename } } fragment AVSAddressValidation on AVSAddressListValidationOutputType { records { AddressVerified AvsResponseCode AvsResponseDecision ResponseStatus Address { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } RecomendedAddresses { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } customerMessages addressType __typename } totalRecords __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;addresses&quot;: {
    &quot;records&quot;: [
      {
        &quot;addressType&quot;: &quot;shippingAddress&quot;,
        &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
        &quot;addressLine2&quot;: &quot;&quot;,
        &quot;city&quot;: &quot;Corte Madera&quot;,
        &quot;state&quot;: &quot;CA&quot;,
        &quot;postalCode&quot;: &quot;94925&quot;,
        &quot;countryCode&quot;: &quot;US&quot;,
        &quot;phone&quot;: &quot;3513213212&quot;,
        &quot;eveningPhone&quot;: &quot;&quot;
      }
    ]
  },
  &quot;firstName&quot;: null,
  &quot;lastName&quot;: null,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">AVSVerifyAddresses</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query AVSVerifyAddresses($addresses: AddressValidationListInput!, $email: String, $firstName: String, $lastName: String) { AVSVerifyAddresses( addresses: $addresses email: $email firstName: $firstName lastName: $lastName ) { ...AVSAddressValidation __typename } } fragment AVSAddressValidation on AVSAddressListValidationOutputType { records { AddressVerified AvsResponseCode AvsResponseDecision ResponseStatus Address { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } RecomendedAddresses { FirstName LastName AddressLine1 AddressLine2 City StateProv PostalCode Country Email Phone EveningPhone ReferenceId addressType __typename } customerMessages addressType __typename } totalRecords __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;addresses&quot;: {
    &quot;records&quot;: [
      {
        &quot;addressType&quot;: &quot;shippingAddress&quot;,
        &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
        &quot;addressLine2&quot;: &quot;&quot;,
        &quot;city&quot;: &quot;Corte Madera&quot;,
        &quot;state&quot;: &quot;CA&quot;,
        &quot;postalCode&quot;: &quot;94925&quot;,
        &quot;countryCode&quot;: &quot;US&quot;,
        &quot;phone&quot;: &quot;3513213212&quot;,
        &quot;eveningPhone&quot;: &quot;&quot;
      }
    ]
  },
  &quot;firstName&quot;: null,
  &quot;lastName&quot;: null,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.4_updateCart" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;updateCart&quot;,&quot;variables&quot;:{
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;shouldEnhance&quot;: false
},&quot;query&quot;:&quot;mutation updateCart($email: String!, $cartId: String!, $updateCartInfo: UpdateCartInfo!) {\n  updateCart(email: $email, cartId: $cartId, updateCartInfo: $updateCartInfo) {\n    ...Cart\n    __typename\n  }\n}\n\nfragment Cart on CartType {\n  __typename\n  id\n  requestedDeliveryDate\n  postalCode\n  preferredLanguage\n  country\n  coordGroupType\n  coordGroupGroupable\n  coordGroupUserSelected\n  orderNumber\n  cartSavings\n  isUserMember\n  giftBoxFee\n  hasGiftBox\n  hasGiftFromRegistry\n  hasGiftFromMemberRegistry\n  giftRegistryIdList\n  rushShippable\n  guest {\n    userId\n    ctId\n    atgUserId\n    cwUserId\n    email\n    type\n    typeId\n    sourceCode\n    shopperRef\n    __typename\n  }\n  removedItems {\n    invalidRegion {\n      sku\n      options {\n        id\n        type\n        value\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  lineItems {\n    restrictions {\n      ...LineItemRestrictions\n      __typename\n    }\n    restrictionsApply\n    giftFrom\n    giftTo\n    isMonogramFee\n    shipVia\n    shipViaCode\n    isMonogrammable\n    isPersonalizable\n    fusionId\n    monogram {\n      styleId\n      description\n      maxLines\n      fontCode\n      fontColorCode\n      borderCode\n      lines\n      fulfillmentCode\n      __typename\n    }\n    lineId\n    quantity\n    maxCartQuantity\n    sku\n    skuType\n    multiSkuId\n    brand\n    displayName\n    giftBoxDetail {\n      giftBoxFee\n      giftBoxCurrencyCode\n      __typename\n    }\n    giftWrap\n    deliveryEta\n    deliveryEtaStart\n    deliveryEtaEnd\n    coordGroup\n    registryId\n    spoTerms\n    spoTermsAccepted\n    spoTermsAcceptedDate\n    isMembershipSku\n    productId\n    price {\n      itemPrice\n      memberPrice\n      priceStatus\n      priceType\n      currencyCode\n      originalPrice\n      totalPrice\n      salePrice\n      finalPrice\n      salePriceLabel\n      isOnClearance\n      isOnSale\n      showMemberPrice\n      fees\n      itemShippingSurcharge\n      __typename\n    }\n    options {\n      id\n      type\n      value\n      sortPriority\n      __typename\n    }\n    isGiftFromRegistry\n    linkedLineItemId\n    skuCustomization {\n      type\n      mountType\n      lining\n      panel\n      controlType\n      controlPosition\n      controlLength\n      tiltType\n      controlAndTilt\n      trim\n      width\n      length\n      diameter\n      roomLabel\n      bracketColor\n      rollType\n      fulfillmentCode\n      __typename\n    }\n    childSafety\n    availabilityStatus\n    __typename\n  }\n  shipVia\n  cartPrice {\n    subtotal\n    tax\n    taxDetail {\n      amount\n      name\n      country\n      state\n      imposition\n      rate\n      __typename\n    }\n    totalPrice\n    feeTotal\n    currencyCode\n    isFree\n    fees {\n      feeType\n      quantity\n      value\n      unitCost\n      linkedLineItemId\n      __typename\n    }\n    freight {\n      unlimited\n      ground\n      next\n      second\n      shippingSurcharge\n      __typename\n    }\n    discounts {\n      discountCodeTotal\n      __typename\n    }\n    preBillAmount\n    remainingToBill\n    memberSavings\n    employeeSavings\n    __typename\n  }\n  shipAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  billAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  payments {\n    totalAmountRemaining\n    totalAmountCovered\n    appliedPayments {\n      id\n      paymentMethodType\n      paymentType\n      lastFour\n      amountCovered\n      currencyCode\n      rhPaymentPlan\n      catchAllPayment\n      __typename\n    }\n    __typename\n  }\n  createdAt\n  lastModifiedAt\n  totalLines\n  discountCodes {\n    code\n    name\n    description\n    __typename\n  }\n  brand\n  gallery {\n    galleryId\n    __typename\n  }\n  shipLabelSidemark\n  giftMessage\n  employeeDiscount {\n    description\n    regularDiscount\n    saleDiscount\n    __typename\n  }\n}\n\nfragment LineItemRestrictions on LineItemRestrictionsType {\n  type\n  sku\n  category\n  states\n  countries\n  postalRanges\n  __typename\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">updateCart</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation updateCart($email: String!, $cartId: String!, $updateCartInfo: UpdateCartInfo!) {
  updateCart(email: $email, cartId: $cartId, updateCartInfo: $updateCartInfo) {
    ...Cart
    __typename
  }
}

fragment Cart on CartType {
  __typename
  id
  requestedDeliveryDate
  postalCode
  preferredLanguage
  country
  coordGroupType
  coordGroupGroupable
  coordGroupUserSelected
  orderNumber
  cartSavings
  isUserMember
  giftBoxFee
  hasGiftBox
  hasGiftFromRegistry
  hasGiftFromMemberRegistry
  giftRegistryIdList
  rushShippable
  guest {
    userId
    ctId
    atgUserId
    cwUserId
    email
    type
    typeId
    sourceCode
    shopperRef
    __typename
  }
  removedItems {
    invalidRegion {
      sku
      options {
        id
        type
        value
        __typename
      }
      __typename
    }
    __typename
  }
  lineItems {
    restrictions {
      ...LineItemRestrictions
      __typename
    }
    restrictionsApply
    giftFrom
    giftTo
    isMonogramFee
    shipVia
    shipViaCode
    isMonogrammable
    isPersonalizable
    fusionId
    monogram {
      styleId
      description
      maxLines
      fontCode
      fontColorCode
      borderCode
      lines
      fulfillmentCode
      __typename
    }
    lineId
    quantity
    maxCartQuantity
    sku
    skuType
    multiSkuId
    brand
    displayName
    giftBoxDetail {
      giftBoxFee
      giftBoxCurrencyCode
      __typename
    }
    giftWrap
    deliveryEta
    deliveryEtaStart
    deliveryEtaEnd
    coordGroup
    registryId
    spoTerms
    spoTermsAccepted
    spoTermsAcceptedDate
    isMembershipSku
    productId
    price {
      itemPrice
      memberPrice
      priceStatus
      priceType
      currencyCode
      originalPrice
      totalPrice
      salePrice
      finalPrice
      salePriceLabel
      isOnClearance
      isOnSale
      showMemberPrice
      fees
      itemShippingSurcharge
      __typename
    }
    options {
      id
      type
      value
      sortPriority
      __typename
    }
    isGiftFromRegistry
    linkedLineItemId
    skuCustomization {
      type
      mountType
      lining
      panel
      controlType
      controlPosition
      controlLength
      tiltType
      controlAndTilt
      trim
      width
      length
      diameter
      roomLabel
      bracketColor
      rollType
      fulfillmentCode
      __typename
    }
    childSafety
    availabilityStatus
    __typename
  }
  shipVia
  cartPrice {
    subtotal
    tax
    taxDetail {
      amount
      name
      country
      state
      imposition
      rate
      __typename
    }
    totalPrice
    feeTotal
    currencyCode
    isFree
    fees {
      feeType
      quantity
      value
      unitCost
      linkedLineItemId
      __typename
    }
    freight {
      unlimited
      ground
      next
      second
      shippingSurcharge
      __typename
    }
    discounts {
      discountCodeTotal
      __typename
    }
    preBillAmount
    remainingToBill
    memberSavings
    employeeSavings
    __typename
  }
  shipAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  billAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    __typename
  }
  payments {
    totalAmountRemaining
    totalAmountCovered
    appliedPayments {
      id
      paymentMethodType
      paymentType
      lastFour
      amountCovered
      currencyCode
      rhPaymentPlan
      catchAllPayment
      __typename
    }
    __typename
  }
  createdAt
  lastModifiedAt
  totalLines
  discountCodes {
    code
    name
    description
    __typename
  }
  brand
  gallery {
    galleryId
    __typename
  }
  shipLabelSidemark
  giftMessage
  employeeDiscount {
    description
    regularDiscount
    saleDiscount
    __typename
  }
}

fragment LineItemRestrictions on LineItemRestrictionsType {
  type
  sku
  category
  states
  countries
  postalRanges
  __typename
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;shouldEnhance&quot;: false
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.4_SetCartAddresses" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;SetCartAddresses&quot;,&quot;variables&quot;:{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;shippingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Rd&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skk@yopmail.com&quot;,
    &quot;firstName&quot;: &quot;Rohit&quot;,
    &quot;lastName&quot;: &quot;polard&quot;,
    &quot;phone&quot;: &quot;2542343247&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925-1214&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;verified&quot;
  },
  &quot;billingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skk@yopmail.com&quot;,
    &quot;firstName&quot;: &quot;Rohit&quot;,
    &quot;lastName&quot;: &quot;polard&quot;,
    &quot;phone&quot;: &quot;2542343247&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;unverified&quot;
  }
},&quot;query&quot;:&quot;mutation SetCartAddresses($email: String!, $cartId: String!, $shippingAddress: AddressInput!, $billingAddress: AddressInput, $updateCartInfo: UpdateCartInfo) {\n  setCartAddresses(\n    email: $email\n    cartId: $cartId\n    shippingAddress: $shippingAddress\n    billingAddress: $billingAddress\n    updateCartInfo: $updateCartInfo\n  ) {\n    ...Cart\n    __typename\n  }\n}\n\nfragment Cart on CartType {\n  __typename\n  id\n  billUpFront\n  requestedDeliveryDate\n  postalCode\n  preferredLanguage\n  displayLanguage\n  country\n  coordGroupType\n  coordGroupGroupable\n  coordGroupUserSelected\n  orderNumber\n  schedulableOrder\n  cartSavings\n  isUserMember\n  giftBoxFee\n  hasGiftBox\n  hasGiftFromRegistry\n  hasGiftFromMemberRegistry\n  giftRegistryIdList\n  rushShippable\n  guest {\n    userId\n    ctId\n    atgUserId\n    cwUserId\n    email\n    type\n    typeId\n    sourceCode\n    shopperRef\n    sfContactId\n    globalSfContactId\n    __typename\n  }\n  removedItems {\n    invalidRegion {\n      sku\n      options {\n        id\n        type\n        value\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  lineItems {\n    restrictions {\n      ...LineItemRestrictions\n      __typename\n    }\n    restrictionsApply\n    giftFrom\n    giftTo\n    isMonogramFee\n    shipVia\n    shipViaCode\n    isMonogrammable\n    isPersonalizable\n    fusionId\n    monogram {\n      styleId\n      description\n      maxLines\n      fontCode\n      fontColorCode\n      borderCode\n      lines\n      fulfillmentCode\n      __typename\n    }\n    lineId\n    quantity\n    maxCartQuantity\n    sku\n    skuType\n    multiSkuId\n    brand\n    displayName\n    giftBoxDetail {\n      giftBoxFee\n      giftBoxCurrencyCode\n      __typename\n    }\n    giftWrap\n    deliveryEta\n    deliveryEtaStart\n    deliveryEtaEnd\n    dc\n    coordGroup\n    registryId\n    spoTerms\n    spoTermsAccepted\n    spoTermsAcceptedDate\n    isMembershipSku\n    productId\n    price {\n      itemPrice\n      memberPrice\n      priceStatus\n      priceType\n      currencyCode\n      originalPrice\n      totalPrice\n      salePrice\n      finalPrice\n      salePriceLabel\n      isOnClearance\n      isOnSale\n      showMemberPrice\n      fees\n      itemShippingSurcharge\n      __typename\n    }\n    options {\n      id\n      type\n      value\n      sortPriority\n      __typename\n    }\n    isGiftFromRegistry\n    linkedLineItemId\n    skuCustomization {\n      type\n      mountType\n      lining\n      panel\n      controlType\n      controlPosition\n      controlLength\n      tiltType\n      controlAndTilt\n      trim\n      width\n      length\n      diameter\n      roomLabel\n      bracketColor\n      rollType\n      fulfillmentCode\n      __typename\n    }\n    childSafety\n    availabilityStatus\n    imageUrl\n    __typename\n  }\n  shipVia\n  cartPrice {\n    subtotal\n    tax\n    taxDetail {\n      amount\n      name\n      country\n      state\n      imposition\n      rate\n      __typename\n    }\n    totalPrice\n    itemTotal\n    feeTotal\n    currencyCode\n    isFree\n    fees {\n      feeType\n      quantity\n      value\n      unitCost\n      linkedLineItemId\n      __typename\n    }\n    freight {\n      unlimited\n      ground\n      next\n      second\n      shippingSurcharge\n      __typename\n    }\n    priceAdjustments {\n      adjustment\n      adjustmentType\n      reason\n      targetType\n      adjustedPrice\n      priceBeforeAdjustment\n      __typename\n    }\n    discounts {\n      discountCodeTotal\n      __typename\n    }\n    preBillAmount\n    remainingToBill\n    memberSavings\n    employeeSavings\n    __typename\n  }\n  soldToAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    companyName\n    postalCode\n    eveningPhone\n    phone\n    email\n    firstName\n    lastName\n    __typename\n  }\n  shipAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    companyName\n    __typename\n  }\n  billAddress {\n    addressLine1\n    addressLine2\n    city\n    state\n    country\n    postalCode\n    phone\n    eveningPhone\n    email\n    firstName\n    lastName\n    companyName\n    __typename\n  }\n  payments {\n    totalAmountRemaining\n    totalAmountCovered\n    appliedPayments {\n      id\n      paymentMethodType\n      paymentType\n      lastFour\n      amountCovered\n      currencyCode\n      rhPaymentPlan\n      catchAllPayment\n      transactions {\n        amount\n        status\n        type\n        __typename\n      }\n      giftCardBalance\n      customerEmail\n      customerPhone\n      paymentRequestSendByQR\n      paymentRequestSendByEmail\n      paymentRequestSendByTextMessage\n      __typename\n    }\n    __typename\n  }\n  createdAt\n  lastModifiedAt\n  totalLines\n  discountCodes {\n    code\n    name\n    description\n    __typename\n  }\n  brand\n  gallery {\n    ctId\n    designerCart\n    galleryId\n    key\n    orderClassification\n    __typename\n  }\n  shipLabelSidemark\n  giftMessage\n  employeeDiscount {\n    description\n    regularDiscount\n    saleDiscount\n    __typename\n  }\n}\n\nfragment LineItemRestrictions on LineItemRestrictionsType {\n  type\n  sku\n  category\n  states\n  countries\n  postalRanges\n  __typename\n}&quot;}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">SetCartAddresses</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">mutation SetCartAddresses($email: String!, $cartId: String!, $shippingAddress: AddressInput!, $billingAddress: AddressInput, $updateCartInfo: UpdateCartInfo) {
  setCartAddresses(
    email: $email
    cartId: $cartId
    shippingAddress: $shippingAddress
    billingAddress: $billingAddress
    updateCartInfo: $updateCartInfo
  ) {
    ...Cart
    __typename
  }
}

fragment Cart on CartType {
  __typename
  id
  billUpFront
  requestedDeliveryDate
  postalCode
  preferredLanguage
  displayLanguage
  country
  coordGroupType
  coordGroupGroupable
  coordGroupUserSelected
  orderNumber
  schedulableOrder
  cartSavings
  isUserMember
  giftBoxFee
  hasGiftBox
  hasGiftFromRegistry
  hasGiftFromMemberRegistry
  giftRegistryIdList
  rushShippable
  guest {
    userId
    ctId
    atgUserId
    cwUserId
    email
    type
    typeId
    sourceCode
    shopperRef
    sfContactId
    globalSfContactId
    __typename
  }
  removedItems {
    invalidRegion {
      sku
      options {
        id
        type
        value
        __typename
      }
      __typename
    }
    __typename
  }
  lineItems {
    restrictions {
      ...LineItemRestrictions
      __typename
    }
    restrictionsApply
    giftFrom
    giftTo
    isMonogramFee
    shipVia
    shipViaCode
    isMonogrammable
    isPersonalizable
    fusionId
    monogram {
      styleId
      description
      maxLines
      fontCode
      fontColorCode
      borderCode
      lines
      fulfillmentCode
      __typename
    }
    lineId
    quantity
    maxCartQuantity
    sku
    skuType
    multiSkuId
    brand
    displayName
    giftBoxDetail {
      giftBoxFee
      giftBoxCurrencyCode
      __typename
    }
    giftWrap
    deliveryEta
    deliveryEtaStart
    deliveryEtaEnd
    dc
    coordGroup
    registryId
    spoTerms
    spoTermsAccepted
    spoTermsAcceptedDate
    isMembershipSku
    productId
    price {
      itemPrice
      memberPrice
      priceStatus
      priceType
      currencyCode
      originalPrice
      totalPrice
      salePrice
      finalPrice
      salePriceLabel
      isOnClearance
      isOnSale
      showMemberPrice
      fees
      itemShippingSurcharge
      __typename
    }
    options {
      id
      type
      value
      sortPriority
      __typename
    }
    isGiftFromRegistry
    linkedLineItemId
    skuCustomization {
      type
      mountType
      lining
      panel
      controlType
      controlPosition
      controlLength
      tiltType
      controlAndTilt
      trim
      width
      length
      diameter
      roomLabel
      bracketColor
      rollType
      fulfillmentCode
      __typename
    }
    childSafety
    availabilityStatus
    imageUrl
    __typename
  }
  shipVia
  cartPrice {
    subtotal
    tax
    taxDetail {
      amount
      name
      country
      state
      imposition
      rate
      __typename
    }
    totalPrice
    itemTotal
    feeTotal
    currencyCode
    isFree
    fees {
      feeType
      quantity
      value
      unitCost
      linkedLineItemId
      __typename
    }
    freight {
      unlimited
      ground
      next
      second
      shippingSurcharge
      __typename
    }
    priceAdjustments {
      adjustment
      adjustmentType
      reason
      targetType
      adjustedPrice
      priceBeforeAdjustment
      __typename
    }
    discounts {
      discountCodeTotal
      __typename
    }
    preBillAmount
    remainingToBill
    memberSavings
    employeeSavings
    __typename
  }
  soldToAddress {
    addressLine1
    addressLine2
    city
    state
    country
    companyName
    postalCode
    eveningPhone
    phone
    email
    firstName
    lastName
    __typename
  }
  shipAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    companyName
    __typename
  }
  billAddress {
    addressLine1
    addressLine2
    city
    state
    country
    postalCode
    phone
    eveningPhone
    email
    firstName
    lastName
    companyName
    __typename
  }
  payments {
    totalAmountRemaining
    totalAmountCovered
    appliedPayments {
      id
      paymentMethodType
      paymentType
      lastFour
      amountCovered
      currencyCode
      rhPaymentPlan
      catchAllPayment
      transactions {
        amount
        status
        type
        __typename
      }
      giftCardBalance
      customerEmail
      customerPhone
      paymentRequestSendByQR
      paymentRequestSendByEmail
      paymentRequestSendByTextMessage
      __typename
    }
    __typename
  }
  createdAt
  lastModifiedAt
  totalLines
  discountCodes {
    code
    name
    description
    __typename
  }
  brand
  gallery {
    ctId
    designerCart
    galleryId
    key
    orderClassification
    __typename
  }
  shipLabelSidemark
  giftMessage
  employeeDiscount {
    description
    regularDiscount
    saleDiscount
    __typename
  }
}

fragment LineItemRestrictions on LineItemRestrictionsType {
  type
  sku
  category
  states
  countries
  postalRanges
  __typename
}</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;updateCartInfo&quot;: {
    &quot;shipLabelSidemark&quot;: null,
    &quot;giftMessage&quot;: [
      &quot;&quot;,
      &quot;&quot;,
      &quot;&quot;
    ]
  },
  &quot;shippingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Rd&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skk@yopmail.com&quot;,
    &quot;firstName&quot;: &quot;Rohit&quot;,
    &quot;lastName&quot;: &quot;polard&quot;,
    &quot;phone&quot;: &quot;2542343247&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925-1214&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;verified&quot;
  },
  &quot;billingAddress&quot;: {
    &quot;addressLine1&quot;: &quot;15 Koch Road&quot;,
    &quot;addressLine2&quot;: &quot;&quot;,
    &quot;city&quot;: &quot;Corte Madera&quot;,
    &quot;country&quot;: &quot;US&quot;,
    &quot;email&quot;: &quot;skk@yopmail.com&quot;,
    &quot;firstName&quot;: &quot;Rohit&quot;,
    &quot;lastName&quot;: &quot;polard&quot;,
    &quot;phone&quot;: &quot;2542343247&quot;,
    &quot;eveningPhone&quot;: &quot;&quot;,
    &quot;postalCode&quot;: &quot;94925&quot;,
    &quot;state&quot;: &quot;CA&quot;,
    &quot;avsStatus&quot;: &quot;unverified&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">Search</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"> </stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/checkout/address.jsps</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.5_GetUserForSession" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetUserForSession</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean, $doNotMutateCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart doNotMutateCart: $doNotMutateCart ) { sessionId rhuid location currentCartId validAssociate location rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean, $doNotMutateCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart doNotMutateCart: $doNotMutateCart ) { sessionId rhuid location currentCartId validAssociate location rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.6_GetCart" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetCart</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id billUpFront requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber schedulableOrder cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef sfContactId globalSfContactId __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd dc coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus imageUrl __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice itemTotal feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } priceAdjustments { adjustment adjustmentType reason targetType adjustedPrice priceBeforeAdjustment __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } soldToAddress { addressLine1 addressLine2 city state country companyName postalCode eveningPhone phone email firstName lastName __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment transactions { amount status type __typename } giftCardBalance customerEmail customerPhone paymentRequestSendByQR paymentRequestSendByEmail paymentRequestSendByTextMessage __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { ctId designerCart galleryId key orderClassification __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id billUpFront requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber schedulableOrder cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef sfContactId globalSfContactId __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd dc coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus imageUrl __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice itemTotal feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } priceAdjustments { adjustment adjustmentType reason targetType adjustedPrice priceBeforeAdjustment __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } soldToAddress { addressLine1 addressLine2 city state country companyName postalCode eveningPhone phone email firstName lastName __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment transactions { amount status type __typename } giftCardBalance customerEmail customerPhone paymentRequestSendByQR paymentRequestSendByEmail paymentRequestSendByTextMessage __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { ctId designerCart galleryId key orderClassification __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.7_GetAemModel-1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/payment&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/payment&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.7_GetAemModel-1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetAemModel</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/checkout/payment&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/checkout/payment&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.8_CartProjection" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">CartProjection</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.9_GetCart" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetCart</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id billUpFront requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber schedulableOrder cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef sfContactId globalSfContactId __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd dc coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus imageUrl __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice itemTotal feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } priceAdjustments { adjustment adjustmentType reason targetType adjustedPrice priceBeforeAdjustment __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } soldToAddress { addressLine1 addressLine2 city state country companyName postalCode eveningPhone phone email firstName lastName __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment transactions { amount status type __typename } giftCardBalance customerEmail customerPhone paymentRequestSendByQR paymentRequestSendByEmail paymentRequestSendByTextMessage __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { ctId designerCart galleryId key orderClassification __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id billUpFront requestedDeliveryDate postalCode preferredLanguage displayLanguage country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber schedulableOrder cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef sfContactId globalSfContactId __typename } removedItems { invalidRegion { sku options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo isMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd dc coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku productId price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus imageUrl __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice itemTotal feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } priceAdjustments { adjustment adjustmentType reason targetType adjustedPrice priceBeforeAdjustment __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } soldToAddress { addressLine1 addressLine2 city state country companyName postalCode eveningPhone phone email firstName lastName __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName companyName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment transactions { amount status type __typename } giftCardBalance customerEmail customerPhone paymentRequestSendByQR paymentRequestSendByEmail paymentRequestSendByTextMessage __typename } __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { ctId designerCart galleryId key orderClassification __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="10.11_GetCart" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetCart</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetCart</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetCart($cartId: String!, $email: String!, $siteId: String!, $requestType: String, $userType: String, $currencyCode: String) { getCart( cartId: $cartId email: $email requestType: $requestType userType: $userType currencyCode: $currencyCode siteId: $siteId ) { ...Cart __typename } } fragment Cart on CartType { __typename id requestedDeliveryDate postalCode country coordGroupType coordGroupGroupable coordGroupUserSelected orderNumber cartSavings isUserMember giftBoxFee hasGiftBox hasGiftFromRegistry hasGiftFromMemberRegistry giftRegistryIdList rushShippable guest { userId ctId atgUserId cwUserId email type typeId sourceCode shopperRef __typename } removedItems { invalidRegion { sku product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } options { id type value __typename } __typename } __typename } lineItems { restrictions { ...LineItemRestrictions __typename } restrictionsApply giftFrom giftTo personalizeInfo { feeHigh feeLow selectedFont { id displayName previewImage image borders { id __typename } __typename } selectedBorder { id image displayName minLength maxLength numberOfLines __typename } selectedStyle { id image minLength maxLength numberOfLines displayName previewImage __typename } selectedColor { id displayName image __typename } __typename } isMonogramFee shouldWaiveMonogramFee shipVia shipViaCode isMonogrammable isPersonalizable fusionId monogram { styleId description maxLines fontCode fontColorCode borderCode lines fulfillmentCode __typename } lineId quantity maxCartQuantity sku skuType multiSkuId brand displayName giftBoxDetail { giftBoxFee giftBoxCurrencyCode __typename } giftWrap deliveryEta deliveryEtaStart deliveryEtaEnd coordGroup registryId spoTerms spoTermsAccepted spoTermsAcceptedDate isMembershipSku availabilityInfo { displayText type props { href __typename } __typename } deliveryInfo { displayText type props { href __typename } __typename } productId product { displayName imageUrl targetUrl alternateImages { imageUrl caption __typename } colorizeInfo { colorizable colorizeType multicolor __typename } __typename } price { itemPrice memberPrice priceStatus priceType currencyCode originalPrice totalPrice salePrice finalPrice salePriceLabel isOnClearance isOnSale showMemberPrice fees itemShippingSurcharge __typename } options { id type value sortPriority __typename } isGiftFromRegistry webPurchasable linkedLineItemId skuCustomization { type mountType lining panel controlType controlPosition controlLength tiltType controlAndTilt trim width length diameter roomLabel bracketColor rollType fulfillmentCode __typename } childSafety availabilityStatus __typename } shipVia cartPrice { subtotal tax taxDetail { amount name country state imposition rate __typename } totalPrice feeTotal currencyCode isFree fees { feeType quantity value unitCost linkedLineItemId __typename } freight { unlimited ground next second shippingSurcharge __typename } discounts { discountCodeTotal __typename } preBillAmount remainingToBill memberSavings employeeSavings __typename } shipAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } billAddress { addressLine1 addressLine2 city state country postalCode phone eveningPhone email firstName lastName __typename } payments { totalAmountRemaining totalAmountCovered appliedPayments { id paymentMethodType paymentType lastFour amountCovered currencyCode rhPaymentPlan catchAllPayment __typename } __typename } importantInformation { type displayText __typename } createdAt lastModifiedAt totalLines discountCodes { code name description __typename } brand gallery { galleryId __typename } shipLabelSidemark giftMessage employeeDiscount { description regularDiscount saleDiscount __typename } } fragment LineItemRestrictions on LineItemRestrictionsType { type sku category states countries postalRanges __typename } </stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;cartId&quot;: &quot;${currentCartId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <com.blazemeter.jmeter.controller.ParallelSampler guiclass="com.blazemeter.jmeter.controller.ParallelControllerGui" testclass="com.blazemeter.jmeter.controller.ParallelSampler" testname="bzm - Parallel Controller" enabled="false">
                <intProp name="MAX_THREAD_NUMBER">6</intProp>
                <boolProp name="PARENT_SAMPLE">false</boolProp>
                <boolProp name="LIMIT_MAX_THREAD_NUMBER">false</boolProp>
              </com.blazemeter.jmeter.controller.ParallelSampler>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">5000</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
                <stringProp name="RandomTimer.range">100</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="PDP" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">20</stringProp>
        <stringProp name="ThreadGroup.ramp_time">40</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.0_Product Details (Old)" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PDPs" enabled="true">
            <stringProp name="filename">PDPs.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">productId</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="6.0_Product Details" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.1_AboveNavPromo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">AboveNavPromo</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">AboveNavPromo</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query AboveNavPromo($siteId: String!, $deviceType: String = &quot;mobile&quot;, $currencyCode: String = &quot;USA&quot;, $countryCode: String!) { aboveNavPromo( siteId: $siteId deviceType: $deviceType currencyCode: $currencyCode countryCode: $countryCode ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;deviceType&quot;: &quot;desktop&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;countryCode&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.2_CatalogNavigation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String, $countryCode: String) { catalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale countryCode: $countryCode ) { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl navImage displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: false,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.3_WORHMenu-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">WORHMenu</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">WORHMenu</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query WORHMenu($categoryId: String! = &quot;cat25070049&quot;, $locale: String) { worhMenu(categoryId: $categoryId, locale: $locale) { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;categoryId&quot;: &quot;cat25260015&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.4_SwatchDeliveryMessage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SwatchDeliveryMessage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-stocked-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SwatchDeliveryMessage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-stocked-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.5_SwatchDeliveryMessage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SwatchDeliveryMessage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-spo-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SwatchDeliveryMessage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SwatchDeliveryMessage { contentFragment( group: &quot;cloud-template&quot; key: &quot;cloud-spo-delivery-estimate-label&quot; ) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.6_GiftCardTerms" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GiftCardTerms</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GiftCardTerms($key: String = &quot;&quot;) { contentFragment(group: &quot;pages&quot;, key: $key) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;key&quot;: &quot;rh-gift-card-pdp&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GiftCardTerms</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GiftCardTerms($key: String = &quot;&quot;) { contentFragment(group: &quot;pages&quot;, key: $key) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;key&quot;: &quot;rh-gift-card-pdp&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.7_Product" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Product&quot;,&quot;variables&quot;:{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
},&quot;query&quot;:&quot;query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {\n  product(\n    productId: $productId\n    categoryId: $categoryId\n    filter: $filter\n    userType: $userType\n    currencyCode: $currencyCode\n    siteId: $siteId\n    measureSystem: $measureSystem\n    locale: $locale\n    postalCode: $postalCode\n  ) {\n    __typename\n    ...ProductFields\n  }\n}\n\nfragment ProductFields on Product {\n  __typename\n  ...BaseProductFields\n  personalizeInfo {\n    ...PersonalizeInfo\n    __typename\n  }\n  productLineItem(filter: $filter) {\n    ...LineItem\n    __typename\n  }\n  category\n  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {\n    productId\n    adapter\n    splitDisplay\n    faceoutSwatchId\n    swatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      customSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    finishSwatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  customProductType\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  carouselProdctDetails {\n    imageUrl\n    displayName\n    productId\n    sale\n    __typename\n  }\n  customProduct\n  productOptionGroupBean {\n    title\n    optionsList\n    __typename\n  }\n  swatchBean {\n    swatchId\n    primaryOptionId\n    __typename\n  }\n  fullSkuId\n  ctaLinks {\n    layerType\n    label\n    leftCoordinate\n    topCoordinate\n    flyoutDirection\n    htmlText\n    shortText\n    link\n    modal\n    path\n    __typename\n  }\n  productConfiguration {\n    __typename\n    ...ProductConfiguration\n  }\n}\n\nfragment BaseProductFields on Product {\n  newPdpLayout\n  collectionName\n  collectionCategoryId\n  autoplay\n  preconfiguredSku\n  isActive\n  videoUrl\n  endDate\n  subName\n  metaProduct\n  longDescription\n  merchMessage\n  targetUrl\n  emptyProduct\n  metaProductComponent\n  onSale\n  giftCert\n  featureList\n  dimensions\n  deliveryDimensions\n  careInstructions\n  fixedDisplaySku\n  layout\n  productListTitle\n  id\n  type\n  displayName\n  imageUrl\n  galleryDescription\n  newProduct\n  template\n  suppressSwatchCopy\n  alternateImages {\n    imageUrl\n    caption\n    video\n    sbrId\n    autoplay\n    lifestyleImage\n    sliderCss\n    __typename\n  }\n  productAddonDescription\n  productAddonMessage\n  productAddonTitle\n  productAddons {\n    __typename\n    ...ProductAddons\n  }\n  colorizeInfo {\n    colorizable\n    __typename\n  }\n  layout\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  priceRangeMultiSkuDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  index\n  rangeId\n  parentCategoryId\n  fileLinkUrls {\n    link\n    label\n    __typename\n  }\n  instock {\n    hasInStock\n    showInStockButton\n    showInStockMessage\n    __typename\n  }\n  saleInfo {\n    nonSaleSkus\n    saleSkus\n    totalSkus\n    percentSaleSkus\n    showSaleMessage\n    __typename\n  }\n  sale {\n    hasSale\n    showSaleButton\n    showSaleMessage\n    __typename\n  }\n  uxAttributes {\n    productType\n    triggerSwatchImage\n    giftCert\n    __typename\n  }\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  customProduct\n  rhr\n  showAllOptions\n  hideOptionSet\n  pdpImageLayout\n  pdpCrop\n  serviceSkuProduct\n  nextGenDriven\n  multiSkuAdditionalMessage\n  seoDescription\n  keywords\n  relatedProductIds\n  saleSwatchId\n  productMessage\n  swatch\n  __typename\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n}\n\nfragment ProductAddons on ProductAddons {\n  productAddonsInfo {\n    id\n    customProduct\n    imageUrl\n    productAddonTitle\n    productAddonMessage\n    productAddonDescription\n    onSale\n    longDescription\n    displayName\n    isActive\n    saleInfo {\n      saleSkus\n      totalSkus\n      percentSaleSkus\n      showSaleMessage\n      __typename\n    }\n    priceRangeDisplay {\n      rangeType\n      isUnavailable\n      isSale\n      showMemberPrice\n      skulowestListPrice\n      skulowestMemberPrice\n      skulowestSalePrice\n      nextGenDriven\n      nextGenDrivenOnSale\n      listPrices\n      salePrices\n      memberPrices\n      salePriceLabel\n      priceMessage\n      priceMessagePrice\n      listPriceLabel\n      memberPriceLabel\n      strikePriceLabel\n      currencySymbol\n      hasOnlyOneSku\n      __typename\n    }\n    colorizeInfo {\n      colorizable\n      __typename\n    }\n    alternateImages {\n      imageUrl\n      caption\n      video\n      sbrId\n      __typename\n    }\n    productLineItem {\n      availableOptions {\n        type\n        sortPriority\n        optionTypeId\n        options {\n          id\n          type\n          value\n          sortPriority\n          status\n          message\n          __typename\n        }\n        __typename\n      }\n      image {\n        productId\n        imageUrl\n        __typename\n      }\n      __typename\n    }\n    imageUrl\n    __typename\n  }\n  __typename\n}\n\nfragment PersonalizeInfo on ProductPersonalizeInfo {\n  __typename\n  description\n  features\n  feeLow\n  feeHigh\n  monogrammable\n  personalizable\n  waiveMonogramFee\n  styles {\n    image\n    previewImage\n    displayName\n    id\n    minLength\n    maxLength\n    numberOfLines\n    __typename\n  }\n  fonts {\n    image\n    previewImage\n    displayName\n    id\n    borders {\n      image\n      minLength\n      maxLength\n      numberOfLines\n      id\n      displayName\n      __typename\n    }\n    __typename\n  }\n  colors {\n    image\n    id\n    displayName\n    __typename\n  }\n}\n\nfragment Swatch on ProductSwatch {\n  __typename\n  swatchId\n  title\n  sortPriority\n  swatchGroupIndex\n  details\n  colorize\n  imageUrl\n  primaryOptionId\n  secondaryOptionId\n  featuredPallete\n  relatedSwatchBeans {\n    swatchId\n    title\n    sortPriority\n    swatchGroupIndex\n    details\n    colorize\n    imageUrl\n    primaryOptionId\n    secondaryOptionId\n    optionCopy\n    options {\n      id\n      label\n      optionType\n      sortPriority\n      __typename\n    }\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    __typename\n  }\n  optionCopy\n  options {\n    id\n    label\n    optionType\n    sortPriority\n    __typename\n  }\n  swatchImageSm {\n    url\n    width\n    height\n    __typename\n  }\n  swatchImageLg {\n    url\n    width\n    height\n    __typename\n  }\n  onSale\n}\n\nfragment LineItem on ProductLineItem {\n  __typename\n  sku {\n    ...Sku\n    __typename\n  }\n  availableOptions {\n    type\n    sortPriority\n    optionTypeId\n    adapter\n    options {\n      id\n      type\n      value\n      name\n      sortPriority\n      status\n      message\n      usa_list_price_f\n      usa_member_price_f\n      usa_sale_price_f\n      can_list_price_f\n      can_member_price_f\n      can_sale_price_f\n      gbr_list_price_f\n      gbr_member_price_f\n      gbr_sale_price_f\n      __typename\n    }\n    __typename\n  }\n  image {\n    productId\n    imageUrl\n    __typename\n  }\n  customProductOptions {\n    customProductInformation {\n      customProductType\n      cwCustomProductCode\n      maxWidth\n      maxLength\n      minWidth\n      minLength\n      minDiameter\n      maxDiameter\n      maxControlLength\n      minControlLength\n      widthFractionGap\n      lengthFractionGap\n      diameterFractionGap\n      shape\n      mountTypes {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      controlTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      panels {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      linings {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlPositions {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      rollTypes {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      bracketColors {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlsAndTilts {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      tiltTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      rugTrims {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      finish {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Sku on ProductSku {\n  __typename\n  info {\n    name\n    longDescription\n    imageUrl\n    maxOrderQty\n    skuPriceInfo {\n      currencySymbol\n      listPrice\n      salePrice\n      memberPrice\n      tradePrice\n      contractPrice\n      memberOriginalPrice\n      nextgenDriven\n      onSale\n      onClearance\n      showMemberPrice\n      customProductErrorCode\n      customProductErrorMsg\n      __typename\n    }\n    canadaShippable\n    dropship\n    shipViaCode\n    hasCasingSkus\n    casingProduct\n    replacementCushionProduct\n    __typename\n  }\n  inventory {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    inventoryOnHand\n    __typename\n  }\n  delivery {\n    postalCode\n    needPostalCode\n    deliveryEstimateStatus\n    deliveryEstimate\n    freightExempt\n    shippingSurcharge\n    shippingSurchargeAmount\n    freightExemptMessage\n    deliveryStateMessage\n    lineId\n    __typename\n  }\n  restrictions {\n    spo\n    giftCertificate\n    serviceSku\n    monogram\n    monogramMessage\n    returnPolicyMessage\n    preBillMessage\n    additionalMessages {\n      curbsideMessage\n      assemblyMessage\n      giftCardMessage\n      railroadMessage\n      mattressFeeMessage\n      cancellableMessage\n      finalSaleMessage\n      __typename\n    }\n    countryRestrictions\n    mattressFeeLocation\n    __typename\n  }\n  fulfillmentEta {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    startDateRange\n    endDateRange\n    eta\n    lineType\n    __typename\n  }\n}\n\nfragment ProductConfiguration on ProductInfoV3 {\n  productId\n  optionMatrix\n  instockOptionMatrix\n  preselectedOptions\n  swatchData {\n    __typename\n    ...ProductSwatchV2\n  }\n  optionDetails {\n    type\n    options {\n      id\n      typeId\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ProductSwatchV2 on ProductSwatchV2 {\n  productId\n  swatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  finishSwatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  __typename\n}\n\nfragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {\n  swatchGroupName\n  groupMaterial\n  swatches {\n    swatchId\n    title\n    imageUrl\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    onSale\n    optionCopy\n    __typename\n  }\n  __typename\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">Product</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {
  product(
    productId: $productId
    categoryId: $categoryId
    filter: $filter
    userType: $userType
    currencyCode: $currencyCode
    siteId: $siteId
    measureSystem: $measureSystem
    locale: $locale
    postalCode: $postalCode
  ) {
    __typename
    ...ProductFields
  }
}

fragment ProductFields on Product {
  __typename
  ...BaseProductFields
  personalizeInfo {
    ...PersonalizeInfo
    __typename
  }
  productLineItem(filter: $filter) {
    ...LineItem
    __typename
  }
  category
  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {
    productId
    adapter
    splitDisplay
    faceoutSwatchId
    swatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      customSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    finishSwatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    __typename
  }
  customProductType
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  carouselProdctDetails {
    imageUrl
    displayName
    productId
    sale
    __typename
  }
  customProduct
  productOptionGroupBean {
    title
    optionsList
    __typename
  }
  swatchBean {
    swatchId
    primaryOptionId
    __typename
  }
  fullSkuId
  ctaLinks {
    layerType
    label
    leftCoordinate
    topCoordinate
    flyoutDirection
    htmlText
    shortText
    link
    modal
    path
    __typename
  }
  productConfiguration {
    __typename
    ...ProductConfiguration
  }
}

fragment BaseProductFields on Product {
  newPdpLayout
  collectionName
  collectionCategoryId
  autoplay
  preconfiguredSku
  isActive
  videoUrl
  endDate
  subName
  metaProduct
  longDescription
  merchMessage
  targetUrl
  emptyProduct
  metaProductComponent
  onSale
  giftCert
  featureList
  dimensions
  deliveryDimensions
  careInstructions
  fixedDisplaySku
  layout
  productListTitle
  id
  type
  displayName
  imageUrl
  galleryDescription
  newProduct
  template
  suppressSwatchCopy
  alternateImages {
    imageUrl
    caption
    video
    sbrId
    autoplay
    lifestyleImage
    sliderCss
    __typename
  }
  productAddonDescription
  productAddonMessage
  productAddonTitle
  productAddons {
    __typename
    ...ProductAddons
  }
  colorizeInfo {
    colorizable
    __typename
  }
  layout
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  priceRangeMultiSkuDisplay {
    ...PriceRangeDisplay
    __typename
  }
  index
  rangeId
  parentCategoryId
  fileLinkUrls {
    link
    label
    __typename
  }
  instock {
    hasInStock
    showInStockButton
    showInStockMessage
    __typename
  }
  saleInfo {
    nonSaleSkus
    saleSkus
    totalSkus
    percentSaleSkus
    showSaleMessage
    __typename
  }
  sale {
    hasSale
    showSaleButton
    showSaleMessage
    __typename
  }
  uxAttributes {
    productType
    triggerSwatchImage
    giftCert
    __typename
  }
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  customProduct
  rhr
  showAllOptions
  hideOptionSet
  pdpImageLayout
  pdpCrop
  serviceSkuProduct
  nextGenDriven
  multiSkuAdditionalMessage
  seoDescription
  keywords
  relatedProductIds
  saleSwatchId
  productMessage
  swatch
  __typename
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
}

fragment ProductAddons on ProductAddons {
  productAddonsInfo {
    id
    customProduct
    imageUrl
    productAddonTitle
    productAddonMessage
    productAddonDescription
    onSale
    longDescription
    displayName
    isActive
    saleInfo {
      saleSkus
      totalSkus
      percentSaleSkus
      showSaleMessage
      __typename
    }
    priceRangeDisplay {
      rangeType
      isUnavailable
      isSale
      showMemberPrice
      skulowestListPrice
      skulowestMemberPrice
      skulowestSalePrice
      nextGenDriven
      nextGenDrivenOnSale
      listPrices
      salePrices
      memberPrices
      salePriceLabel
      priceMessage
      priceMessagePrice
      listPriceLabel
      memberPriceLabel
      strikePriceLabel
      currencySymbol
      hasOnlyOneSku
      __typename
    }
    colorizeInfo {
      colorizable
      __typename
    }
    alternateImages {
      imageUrl
      caption
      video
      sbrId
      __typename
    }
    productLineItem {
      availableOptions {
        type
        sortPriority
        optionTypeId
        options {
          id
          type
          value
          sortPriority
          status
          message
          __typename
        }
        __typename
      }
      image {
        productId
        imageUrl
        __typename
      }
      __typename
    }
    imageUrl
    __typename
  }
  __typename
}

fragment PersonalizeInfo on ProductPersonalizeInfo {
  __typename
  description
  features
  feeLow
  feeHigh
  monogrammable
  personalizable
  waiveMonogramFee
  styles {
    image
    previewImage
    displayName
    id
    minLength
    maxLength
    numberOfLines
    __typename
  }
  fonts {
    image
    previewImage
    displayName
    id
    borders {
      image
      minLength
      maxLength
      numberOfLines
      id
      displayName
      __typename
    }
    __typename
  }
  colors {
    image
    id
    displayName
    __typename
  }
}

fragment Swatch on ProductSwatch {
  __typename
  swatchId
  title
  sortPriority
  swatchGroupIndex
  details
  colorize
  imageUrl
  primaryOptionId
  secondaryOptionId
  featuredPallete
  relatedSwatchBeans {
    swatchId
    title
    sortPriority
    swatchGroupIndex
    details
    colorize
    imageUrl
    primaryOptionId
    secondaryOptionId
    optionCopy
    options {
      id
      label
      optionType
      sortPriority
      __typename
    }
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    __typename
  }
  optionCopy
  options {
    id
    label
    optionType
    sortPriority
    __typename
  }
  swatchImageSm {
    url
    width
    height
    __typename
  }
  swatchImageLg {
    url
    width
    height
    __typename
  }
  onSale
}

fragment LineItem on ProductLineItem {
  __typename
  sku {
    ...Sku
    __typename
  }
  availableOptions {
    type
    sortPriority
    optionTypeId
    adapter
    options {
      id
      type
      value
      name
      sortPriority
      status
      message
      usa_list_price_f
      usa_member_price_f
      usa_sale_price_f
      can_list_price_f
      can_member_price_f
      can_sale_price_f
      gbr_list_price_f
      gbr_member_price_f
      gbr_sale_price_f
      __typename
    }
    __typename
  }
  image {
    productId
    imageUrl
    __typename
  }
  customProductOptions {
    customProductInformation {
      customProductType
      cwCustomProductCode
      maxWidth
      maxLength
      minWidth
      minLength
      minDiameter
      maxDiameter
      maxControlLength
      minControlLength
      widthFractionGap
      lengthFractionGap
      diameterFractionGap
      shape
      mountTypes {
        id
        value
        status
        message
        code
        __typename
      }
      controlTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      panels {
        id
        value
        status
        message
        code
        __typename
      }
      linings {
        id
        value
        status
        message
        __typename
      }
      controlPositions {
        id
        value
        status
        message
        __typename
      }
      rollTypes {
        id
        value
        status
        message
        __typename
      }
      bracketColors {
        id
        value
        status
        message
        __typename
      }
      controlsAndTilts {
        id
        value
        status
        message
        __typename
      }
      tiltTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      rugTrims {
        id
        value
        status
        message
        code
        __typename
      }
      finish {
        id
        value
        status
        message
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment Sku on ProductSku {
  __typename
  info {
    name
    longDescription
    imageUrl
    maxOrderQty
    skuPriceInfo {
      currencySymbol
      listPrice
      salePrice
      memberPrice
      tradePrice
      contractPrice
      memberOriginalPrice
      nextgenDriven
      onSale
      onClearance
      showMemberPrice
      customProductErrorCode
      customProductErrorMsg
      __typename
    }
    canadaShippable
    dropship
    shipViaCode
    hasCasingSkus
    casingProduct
    replacementCushionProduct
    __typename
  }
  inventory {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    inventoryOnHand
    __typename
  }
  delivery {
    postalCode
    needPostalCode
    deliveryEstimateStatus
    deliveryEstimate
    freightExempt
    shippingSurcharge
    shippingSurchargeAmount
    freightExemptMessage
    deliveryStateMessage
    lineId
    __typename
  }
  restrictions {
    spo
    giftCertificate
    serviceSku
    monogram
    monogramMessage
    returnPolicyMessage
    preBillMessage
    additionalMessages {
      curbsideMessage
      assemblyMessage
      giftCardMessage
      railroadMessage
      mattressFeeMessage
      cancellableMessage
      finalSaleMessage
      __typename
    }
    countryRestrictions
    mattressFeeLocation
    __typename
  }
  fulfillmentEta {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    startDateRange
    endDateRange
    eta
    lineType
    __typename
  }
}

fragment ProductConfiguration on ProductInfoV3 {
  productId
  optionMatrix
  instockOptionMatrix
  preselectedOptions
  swatchData {
    __typename
    ...ProductSwatchV2
  }
  optionDetails {
    type
    options {
      id
      typeId
      value
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment ProductSwatchV2 on ProductSwatchV2 {
  productId
  swatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  finishSwatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  __typename
}

fragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {
  swatchGroupName
  groupMaterial
  swatches {
    swatchId
    title
    imageUrl
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    onSale
    optionCopy
    __typename
  }
  __typename
}</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct1" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds.[*]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOptions" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">availableOptions</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.productLineItem.availableOptions.[*]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.8_UpsellProducts" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">UpsellProducts</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query UpsellProducts($productId: String!, $locale: String, $measureSystem: String, $currencyCode: String, $siteId: String, $userType: String) { upsellProducts( productId: $productId locale: $locale measureSystem: $measureSystem currencyCode: $currencyCode siteId: $siteId userType: $userType ) { upsellProducts { id type displayName imageUrl galleryDescription newProduct template pgCrop pgCropRules uxAttributes { productType triggerSwatchImage giftCert __typename } priceRangeDisplay { ...UpsellPriceRangeDisplay __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } index rangeId parentCategoryId rhr onSale metaProductComponent __typename } collectionName componentTitle __typename } } fragment UpsellPriceRangeDisplay on UpsellProductPriceRangeDisplay { __typename rangeType isSale isUnavailable showMemberPrice isRetail isCustomProduct listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol priceFilter overridePriceLabel nextGenDrivenOnSale skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">UpsellProducts</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query UpsellProducts($productId: String!, $locale: String, $measureSystem: String, $currencyCode: String, $siteId: String, $userType: String) { upsellProducts( productId: $productId locale: $locale measureSystem: $measureSystem currencyCode: $currencyCode siteId: $siteId userType: $userType ) { upsellProducts { id type displayName imageUrl galleryDescription newProduct template pgCrop pgCropRules uxAttributes { productType triggerSwatchImage giftCert __typename } priceRangeDisplay { ...UpsellPriceRangeDisplay __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } index rangeId parentCategoryId rhr onSale metaProductComponent __typename } collectionName componentTitle __typename } } fragment UpsellPriceRangeDisplay on UpsellProductPriceRangeDisplay { __typename rangeType isSale isUnavailable showMemberPrice isRetail isCustomProduct listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol priceFilter overridePriceLabel nextGenDrivenOnSale skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.9_ProductSwatchImage-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductSwatchImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductSwatchImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductSwatchImage($productId: String!, $optionIds: [String!], $siteId: String, $locale: String, $trimOptionIds: [String!], $fullskuId: String) { product( productId: $productId categoryId: null filter: null userType: null siteId: $siteId currencyCode: null measureSystem: null locale: $locale ) { productSwatchImage( optionIds: $optionIds siteId: $siteId locale: $locale trimOptionIds: $trimOptionIds fullskuId: $fullskuId ) { imageUrl __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;optionIds&quot;: [],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;trimOptionIds&quot;: null,
  &quot;fullskuId&quot;: &quot;&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.10_GetAemModel-1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/product&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;aemModelInput&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en/admin/product&quot;
  },
  &quot;footerLinks&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/footer-links&quot;
  },
  &quot;hamburgerNav&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/hamburger-nav&quot;
  },
  &quot;emailSignupContent&quot;: {
    &quot;modelPath&quot;: &quot;/rh/us/en//admin/marketing-email-popup&quot;
  }
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.11_GlobalStylesheet" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GlobalStylesheet</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GlobalStylesheet</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GlobalStylesheet { contentFragment(group: &quot;stylesheets&quot;, key: &quot;global&quot;) { text __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.12_GetUserForSession" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetUserForSession</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetUserForSession</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetUserForSession($useCartBroker: Boolean!, $country: String, $postalCode: String, $createCart: Boolean) { getUserForSession( useCartBroker: $useCartBroker country: $country postalCode: $postalCode createCart: $createCart ) { sessionId rhuid currentCartId validAssociate rhUser { id firstName lastName email userType gender globalSfContactId sfContactId sfAccountType company shopperRef createdDate locale defaultShippingAddressId postalCode akamaiCountryCode __typename } membershipInfo { ...MembershipInfo __typename } cookiePreferences { userSavedCookiePreferences preferencesFunctionalityCookie thirdPartyAnalyticsCookie strictlyNecessaryCookie analyticsCookie userAcceptedAllCookies cookieRules __typename } __typename } } fragment MembershipInfo on MembershipInfoType { membershipSkuIsOnCart userHasMembershipStatus userHasActiveMembership userHasCancelledMembership userHasExpiredMembership membershipStatusDescription membershipSkuPrice currencyCode membershipId __typename }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;useCartBroker&quot;: true,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;country&quot;: &quot;US&quot;,
  &quot;createCart&quot;: true
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.13_SaleCatalogNavigation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SaleCatalogNavigation</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SaleCatalogNavigation</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SaleCatalogNavigation($filter: String, $siteId: String! = &quot;RH&quot;, $mobile: Boolean = true, $locale: String) { saleCatalogNavigation( filter: $filter siteId: $siteId mobile: $mobile locale: $locale ) { ...CatalogNavigationFragment __typename } } fragment CatalogNavigationFragment on SaleNavigationElement { __typename id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName navImage linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } childCategories { id targetUrl displayName linkType uxAttributes { selectorId __typename } __typename } __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;mobile&quot;: true,
  &quot;filter&quot;: &quot;sale&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.14_RelatedProductsQuery" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">RelatedProductsQuery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query RelatedProductsQuery($productIds: [String!]!, $filter: String, $currencyCode: String, $measureSystem: String, $locale: String, $siteId: String, $categoryId: String, $userType: String) { relatedProductsQuery( productIds: $productIds filter: $filter currencyCode: $currencyCode measureSystem: $measureSystem locale: $locale siteId: $siteId categoryId: $categoryId userType: $userType ) { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } } } fragment BaseProductFields on Product { newPdpLayout collectionName collectionCategoryId autoplay preconfiguredSku isActive videoUrl endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId autoplay lifestyleImage sliderCss __typename } productAddonDescription productAddonMessage productAddonTitle productAddons { __typename ...ProductAddons } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords relatedProductIds saleSwatchId productMessage swatch category __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku } fragment ProductAddons on ProductAddons { productAddonsInfo { id customProduct imageUrl productAddonTitle productAddonMessage productAddonDescription onSale longDescription displayName isActive saleInfo { saleSkus totalSkus percentSaleSkus showSaleMessage __typename } priceRangeDisplay { rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol hasOnlyOneSku __typename } colorizeInfo { colorizable __typename } alternateImages { imageUrl caption video sbrId __typename } productLineItem { availableOptions { type sortPriority optionTypeId options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } __typename } imageUrl __typename } __typename } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productIds&quot;: ${RelatedProduct2},
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">RelatedProductsQuery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query RelatedProductsQuery($productIds: [String!]!, $filter: String, $currencyCode: String, $measureSystem: String, $locale: String, $siteId: String, $categoryId: String, $userType: String) { relatedProductsQuery( productIds: $productIds filter: $filter currencyCode: $currencyCode measureSystem: $measureSystem locale: $locale siteId: $siteId categoryId: $categoryId userType: $userType ) { __typename ...BaseProductFields personalizeInfo { ...PersonalizeInfo __typename } productLineItem(filter: $filter) { ...LineItem __typename } } } fragment BaseProductFields on Product { newPdpLayout collectionName collectionCategoryId autoplay preconfiguredSku isActive videoUrl endDate subName metaProduct longDescription merchMessage targetUrl emptyProduct metaProductComponent onSale giftCert featureList dimensions deliveryDimensions careInstructions fixedDisplaySku layout productListTitle id type displayName imageUrl galleryDescription newProduct template suppressSwatchCopy alternateImages { imageUrl caption video sbrId autoplay lifestyleImage sliderCss __typename } productAddonDescription productAddonMessage productAddonTitle productAddons { __typename ...ProductAddons } colorizeInfo { colorizable __typename } layout priceRangeDisplay { ...PriceRangeDisplay __typename } index rangeId parentCategoryId fileLinkUrls { link label __typename } instock { hasInStock showInStockButton showInStockMessage __typename } saleInfo { nonSaleSkus saleSkus totalSkus percentSaleSkus showSaleMessage __typename } sale { hasSale showSaleButton showSaleMessage __typename } uxAttributes { productType triggerSwatchImage giftCert __typename } swatchesToBuy { atgSkuId swatchId productId fullSkuId __typename } customProduct rhr showAllOptions hideOptionSet pdpImageLayout pdpCrop serviceSkuProduct nextGenDriven multiSkuAdditionalMessage seoDescription keywords relatedProductIds saleSwatchId productMessage swatch category __typename } fragment PriceRangeDisplay on ProductPriceRangeDisplay { __typename rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol overridePriceLabel overrideLineLevelPriceLabel overrideLowestSkuListPrice overrideLowestSkuSalePrice overrideLowestSkuMemberPrice priceFilter hasOnlyOneSku } fragment ProductAddons on ProductAddons { productAddonsInfo { id customProduct imageUrl productAddonTitle productAddonMessage productAddonDescription onSale longDescription displayName isActive saleInfo { saleSkus totalSkus percentSaleSkus showSaleMessage __typename } priceRangeDisplay { rangeType isUnavailable isSale showMemberPrice skulowestListPrice skulowestMemberPrice skulowestSalePrice nextGenDriven nextGenDrivenOnSale listPrices salePrices memberPrices salePriceLabel priceMessage priceMessagePrice listPriceLabel memberPriceLabel strikePriceLabel currencySymbol hasOnlyOneSku __typename } colorizeInfo { colorizable __typename } alternateImages { imageUrl caption video sbrId __typename } productLineItem { availableOptions { type sortPriority optionTypeId options { id type value sortPriority status message __typename } __typename } image { productId imageUrl __typename } __typename } imageUrl __typename } __typename } fragment PersonalizeInfo on ProductPersonalizeInfo { __typename description features feeLow feeHigh monogrammable personalizable waiveMonogramFee styles { image previewImage displayName id minLength maxLength numberOfLines __typename } fonts { image previewImage displayName id borders { image minLength maxLength numberOfLines id displayName __typename } __typename } colors { image id displayName __typename } } fragment LineItem on ProductLineItem { __typename sku { ...Sku __typename } availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } image { productId imageUrl __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productIds&quot;: ${RelatedProduct2},
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">int count = Integer.parseInt(vars.get(&quot;RelatedProduct1_matchNr&quot;));
String delimiter = &quot;,&quot;;
StringBuffer sb = new StringBuffer();
for(int i=1;i&lt;=count;i++) { 
 sb.append(vars.get(&quot;RelatedProduct1_&quot; + i));
 if (i == count){
 break; //to eliminate comma after the array
 }else {
  sb.append(delimiter);
 }
}
 vars.put(&quot;RelatedProduct2&quot;,sb.toString());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.15_ProductImage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.15_LineItemQuery-1_MainProduct" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">LineItemQuery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.16_GetAemModel-2" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetAemModel</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetAemModel</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetAemModel($aemModelInput: AemModelInput!, $footerLinks: AemModelInput!, $hamburgerNav: AemModelInput!, $emailSignupContent: AemModelInput!) { footerLinks: getAemModel(aemModelInput: $footerLinks) { model __typename } hamburgerNav: getAemModel(aemModelInput: $hamburgerNav) { model __typename } emailSignupContent: getAemModel(aemModelInput: $emailSignupContent) { model __typename } getAemModel(aemModelInput: $aemModelInput) { model __typename } } </stringProp>
              <stringProp name="GraphQLHTTPSampler.variables"></stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - RelatedProduct_matchNr" enabled="true">
              <stringProp name="IfController.condition">${__jexl3( ${RelatedProduct_matchNr} &gt; 0,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">RelatedProduct</stringProp>
                <stringProp name="ForeachController.returnVal">RelatedProduct</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${RelatedProduct_matchNr}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">Counter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.17_ProductImage_RelatedProduct" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">ProductImage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">ProductImage</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.18_LineItemQuery-2_RelatedProduct" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">LineItemQuery</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${__V(RelatedProduct_${Counter},)}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">LineItemQuery</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - availableOptions_matchNr" enabled="true">
              <stringProp name="IfController.condition">${__jexl3( ${availableOptions_matchNr} &gt; 0,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.19_LineItemQuery-1_MainProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;RH END CUSTOMER&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;RH END CUSTOMER&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">availableOptions</stringProp>
                <stringProp name="ForeachController.returnVal">availableOption</stringProp>
                <boolProp name="ForeachController.useSeparator">true</boolProp>
              </ForeachController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${availableOptions_matchNr}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">Counter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.19_ProductImage_MainProduct" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">ProductImage</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">-${__counter(,coun)}</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">ProductImage</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.20_LineItemQuery-3_MainProduct" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">operationName</stringProp>
                        <stringProp name="Argument.value">LineItemQuery</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="query" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">query</stringProp>
                        <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">variables</stringProp>
                        <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                  <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">-${coun}</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="x-request-id" elementType="Header">
                        <stringProp name="Header.name">x-request-id</stringProp>
                        <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Mode" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                        <stringProp name="Header.value">cors</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                      </elementProp>
                      <elementProp name="apollographql-client-name" elementType="Header">
                        <stringProp name="Header.name">apollographql-client-name</stringProp>
                        <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Site" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                        <stringProp name="Header.value">same-origin</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="x-operation" elementType="Header">
                        <stringProp name="Header.name">x-operation</stringProp>
                        <stringProp name="Header.value">LineItemQuery</stringProp>
                      </elementProp>
                      <elementProp name="Client-Origin" elementType="Header">
                        <stringProp name="Header.name">Client-Origin</stringProp>
                        <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="authorization" elementType="Header">
                        <stringProp name="Header.name">authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                      </elementProp>
                      <elementProp name="content-type" elementType="Header">
                        <stringProp name="Header.name">content-type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                      </elementProp>
                      <elementProp name="Sec-Fetch-Dest" elementType="Header">
                        <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                        <stringProp name="Header.value">empty</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="Scope.variable">availableOption</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="false">
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionId&quot;, selectedOptionIds)</stringProp>
                    <stringProp name="scriptLanguage">groovy</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_LineItemQuery-4_MainProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.21_LineItemSkuQuery_MainProduct" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">LineItemSkuQuery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">LineItemSkuQuery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="x-operation" elementType="Header">
                    <stringProp name="Header.name">x-operation</stringProp>
                    <stringProp name="Header.value">LineItemSkuQuery</stringProp>
                  </elementProp>
                  <elementProp name="Client-Origin" elementType="Header">
                    <stringProp name="Header.name">Client-Origin</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="&quot;referer&quot;" elementType="Header">
                    <stringProp name="Header.name">referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_GetSku" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetSku</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetSku</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="x-operation" elementType="Header">
                    <stringProp name="Header.name">x-operation</stringProp>
                    <stringProp name="Header.value">GetSku</stringProp>
                  </elementProp>
                  <elementProp name="Client-Origin" elementType="Header">
                    <stringProp name="Header.name">Client-Origin</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="&quot;referer&quot;" elementType="Header">
                    <stringProp name="Header.name">referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.21_MultiSkuCompopnents" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">MultiSkuCompopnents</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query MultiSkuCompopnents($productId: String!, $selectedOptionIds: [String!], $siteId: String!, $currencyCode: String, $countryCode: String!, $postalCode: String!, $locale: String!, $qty: Float) { pullMultiSkuComponents( productId: $productId selectedOptionIds: $selectedOptionIds currencyCode: $currencyCode siteId: $siteId countryCode: $countryCode postalCode: $postalCode locale: $locale qty: $qty ) { contractPrice listPrice memberPrice salePrice tradePrice components { delivery { fullSkuId postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage __typename } fullSkuId info { name productId longDescription imageUrl webPurchasable canadaShippable dropship shipViaCode upc sts maxOrderQty hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { fullSkuId atgSkuId inventoryCode inventoryOnHand inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString adapter failureMessage __typename } restrictions { spo giftCertificate membershipSku serviceSku monogram monogramMessage returnPolicyMessage countryRestrictions mattressFeeLocation preBillMessage __typename } __typename productId quantity } __typename minInventory skuInventory { fullSkuId atgSkuId inventoryCode inventoryOnHand inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString adapter failureMessage __typename } isSPO multiSkuSpoPreBillMessage multiSkuSpoReturnMessage multiSkuComponentsDeliveryInfo { fullSkuId postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage __typename } } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;USA&quot;,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;qty&quot;: 1
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">MultiSkuCompopnents</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query MultiSkuCompopnents($productId: String!, $selectedOptionIds: [String!], $siteId: String!, $currencyCode: String, $countryCode: String!, $postalCode: String!, $locale: String!, $qty: Float) { pullMultiSkuComponents( productId: $productId selectedOptionIds: $selectedOptionIds currencyCode: $currencyCode siteId: $siteId countryCode: $countryCode postalCode: $postalCode locale: $locale qty: $qty ) { contractPrice listPrice memberPrice salePrice tradePrice components { delivery { fullSkuId postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage __typename } fullSkuId info { name productId longDescription imageUrl webPurchasable canadaShippable dropship shipViaCode upc sts maxOrderQty hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { fullSkuId atgSkuId inventoryCode inventoryOnHand inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString adapter failureMessage __typename } restrictions { spo giftCertificate membershipSku serviceSku monogram monogramMessage returnPolicyMessage countryRestrictions mattressFeeLocation preBillMessage __typename } __typename productId quantity } __typename minInventory skuInventory { fullSkuId atgSkuId inventoryCode inventoryOnHand inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString adapter failureMessage __typename } isSPO multiSkuSpoPreBillMessage multiSkuSpoReturnMessage multiSkuComponentsDeliveryInfo { fullSkuId postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage __typename } } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;countryCode&quot;: &quot;USA&quot;,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;qty&quot;: 1
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.pullMultiSkuComponents.skuInventory.fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="x-operation" elementType="Header">
                    <stringProp name="Header.name">x-operation</stringProp>
                    <stringProp name="Header.value">MultiSkuCompopnents</stringProp>
                  </elementProp>
                  <elementProp name="Client-Origin" elementType="Header">
                    <stringProp name="Header.name">Client-Origin</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="&quot;referer&quot;" elementType="Header">
                    <stringProp name="Header.name">referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_SkuAvailabilityStatus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SkuAvailabilityStatus</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SkuAvailabilityStatus</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="x-operation" elementType="Header">
                    <stringProp name="Header.name">x-operation</stringProp>
                    <stringProp name="Header.value">SkuAvailabilityStatus</stringProp>
                  </elementProp>
                  <elementProp name="Client-Origin" elementType="Header">
                    <stringProp name="Header.name">Client-Origin</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="&quot;referer&quot;" elementType="Header">
                    <stringProp name="Header.name">referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.21_CartProjection" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">CartProjection</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">CartProjection</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query CartProjection($userId: String!, $email: String!) { cartProjection(userId: $userId, email: $email) { id cartType totalLines totalItemQuantity __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;userId&quot;: &quot;${userId}&quot;,
  &quot;email&quot;: &quot;${email}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.22_GetBrandSubscriptionsByEmail" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetBrandSubscriptionsByEmail</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetBrandSubscriptionsByEmail</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetBrandSubscriptionsByEmail($email: String!, $country: String) { getBrandSubscriptionsByEmail(email: $email, country: $country) { RH BC TN MO OUTLET __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;email&quot;: &quot;${email}&quot;,
  &quot;country&quot;: &quot;US&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PDP_Old" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="host" elementType="Argument">
                <stringProp name="Argument.name">host</stringProp>
                <stringProp name="Argument.value">${__P(host,stg2.rhnonprod.com)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">stg2.rhnonprod.com?outdoor=true</stringProp>
              </elementProp>
              <elementProp name="path" elementType="Argument">
                <stringProp name="Argument.name">path</stringProp>
                <stringProp name="Argument.value">rh-experience-layer-v1-release</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="env" elementType="Argument">
                <stringProp name="Argument.name">env</stringProp>
                <stringProp name="Argument.value">${__P(env,stg2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="FEATURE_AEM_RENDER_CONTROL" elementType="Cookie" testname="FEATURE_AEM_RENDER_CONTROL">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="FEATURE_WISTIA_OPTIMIZATIONS" elementType="Cookie" testname="FEATURE_WISTIA_OPTIMIZATIONS">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="fusion_search" elementType="Cookie" testname="fusion_search">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="endpoint" elementType="Cookie" testname="endpoint">
                <stringProp name="Cookie.value">release</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
                <stringProp name="Cookie.value">false</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-request-id" elementType="Header">
                <stringProp name="Header.name">x-request-id</stringProp>
                <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
              </elementProp>
              <elementProp name="apollographql-client-name" elementType="Header">
                <stringProp name="Header.name">apollographql-client-name</stringProp>
                <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="x-operation" elementType="Header">
                <stringProp name="Header.name">x-operation</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
              <elementProp name="Client-Origin" elementType="Header">
                <stringProp name="Header.name">Client-Origin</stringProp>
                <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PDPs" enabled="true">
            <stringProp name="filename">PDPsold.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">productId</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Product" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Product&quot;,&quot;variables&quot;:{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
},&quot;query&quot;:&quot;query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {\n  product(\n    productId: $productId\n    categoryId: $categoryId\n    filter: $filter\n    userType: $userType\n    currencyCode: $currencyCode\n    siteId: $siteId\n    measureSystem: $measureSystem\n    locale: $locale\n    postalCode: $postalCode\n  ) {\n    __typename\n    ...ProductFields\n  }\n}\n\nfragment ProductFields on Product {\n  __typename\n  ...BaseProductFields\n  personalizeInfo {\n    ...PersonalizeInfo\n    __typename\n  }\n  productLineItem(filter: $filter) {\n    ...LineItem\n    __typename\n  }\n  category\n  spoReturnMessageOverride\n  spoReturnMessageOverrideKey\n  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {\n    productId\n    adapter\n    splitDisplay\n    faceoutSwatchId\n    swatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      customSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    finishSwatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  customProductType\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  carouselProdctDetails {\n    imageUrl\n    displayName\n    productId\n    sale\n    __typename\n  }\n  customProduct\n  productOptionGroupBean {\n    title\n    optionsList\n    __typename\n  }\n  swatchBean {\n    swatchId\n    primaryOptionId\n    __typename\n  }\n  fullSkuId\n  ctaLinks {\n    layerType\n    label\n    leftCoordinate\n    topCoordinate\n    flyoutDirection\n    htmlText\n    shortText\n    link\n    modal\n    path\n    __typename\n  }\n  productConfiguration {\n    __typename\n    ...ProductConfiguration\n  }\n}\n\nfragment BaseProductFields on Product {\n  newPdpLayout\n  collectionName\n  collectionCategoryId\n  autoplay\n  preconfiguredSku\n  isActive\n  videoUrl\n  endDate\n  subName\n  metaProduct\n  longDescription\n  merchMessage\n  targetUrl\n  emptyProduct\n  metaProductComponent\n  onSale\n  giftCert\n  featureList\n  dimensions\n  deliveryDimensions\n  careInstructions\n  fixedDisplaySku\n  layout\n  productListTitle\n  id\n  type\n  displayName\n  imageUrl\n  galleryDescription\n  newProduct\n  template\n  suppressSwatchCopy\n  alternateImages {\n    imageUrl\n    caption\n    video\n    sbrId\n    autoplay\n    lifestyleImage\n    sliderCss\n    __typename\n  }\n  productAddonDescription\n  productAddonMessage\n  productAddonTitle\n  productAddons {\n    __typename\n    ...ProductAddons\n  }\n  colorizeInfo {\n    colorizable\n    __typename\n  }\n  layout\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  priceRangeMultiSkuDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  index\n  rangeId\n  parentCategoryId\n  fileLinkUrls {\n    link\n    label\n    __typename\n  }\n  instock {\n    hasInStock\n    showInStockButton\n    showInStockMessage\n    __typename\n  }\n  saleInfo {\n    nonSaleSkus\n    saleSkus\n    totalSkus\n    percentSaleSkus\n    showSaleMessage\n    __typename\n  }\n  sale {\n    hasSale\n    showSaleButton\n    showSaleMessage\n    __typename\n  }\n  uxAttributes {\n    productType\n    triggerSwatchImage\n    giftCert\n    __typename\n  }\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  customProduct\n  rhr\n  showAllOptions\n  hideOptionSet\n  pdpImageLayout\n  pdpCrop\n  serviceSkuProduct\n  nextGenDriven\n  multiSkuAdditionalMessage\n  seoDescription\n  keywords\n  relatedProductIds\n  saleSwatchId\n  productMessage\n  swatch\n  __typename\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n}\n\nfragment ProductAddons on ProductAddons {\n  productAddonsInfo {\n    id\n    customProduct\n    imageUrl\n    productAddonTitle\n    productAddonMessage\n    productAddonDescription\n    onSale\n    longDescription\n    displayName\n    isActive\n    saleInfo {\n      saleSkus\n      totalSkus\n      percentSaleSkus\n      showSaleMessage\n      __typename\n    }\n    priceRangeDisplay {\n      rangeType\n      isUnavailable\n      isSale\n      showMemberPrice\n      skulowestListPrice\n      skulowestMemberPrice\n      skulowestSalePrice\n      nextGenDriven\n      nextGenDrivenOnSale\n      listPrices\n      salePrices\n      memberPrices\n      salePriceLabel\n      priceMessage\n      priceMessagePrice\n      listPriceLabel\n      memberPriceLabel\n      strikePriceLabel\n      currencySymbol\n      hasOnlyOneSku\n      __typename\n    }\n    colorizeInfo {\n      colorizable\n      __typename\n    }\n    alternateImages {\n      imageUrl\n      caption\n      video\n      sbrId\n      __typename\n    }\n    productLineItem {\n      availableOptions {\n        type\n        sortPriority\n        optionTypeId\n        options {\n          id\n          type\n          value\n          sortPriority\n          status\n          message\n          __typename\n        }\n        __typename\n      }\n      image {\n        productId\n        imageUrl\n        __typename\n      }\n      __typename\n    }\n    imageUrl\n    __typename\n    productConfiguration {\n      __typename\n      ...ProductConfiguration\n    }\n  }\n  __typename\n}\n\nfragment ProductConfiguration on ProductInfoV3 {\n  productId\n  optionMatrix\n  instockOptionMatrix\n  preselectedOptions\n  default_preselected_options\n  default_instock_preselected_options\n  swatchData {\n    __typename\n    ...ProductSwatchV2\n  }\n  optionDetails {\n    type\n    options {\n      id\n      typeId\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ProductSwatchV2 on ProductSwatchV2 {\n  productId\n  swatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  finishSwatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  __typename\n}\n\nfragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {\n  swatchGroupName\n  groupMaterial\n  swatches {\n    swatchId\n    title\n    imageUrl\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    onSale\n    optionCopy\n    __typename\n  }\n  __typename\n}\n\nfragment PersonalizeInfo on ProductPersonalizeInfo {\n  __typename\n  description\n  features\n  feeLow\n  feeHigh\n  monogrammable\n  personalizable\n  waiveMonogramFee\n  styles {\n    image\n    previewImage\n    displayName\n    id\n    minLength\n    maxLength\n    numberOfLines\n    __typename\n  }\n  fonts {\n    image\n    previewImage\n    displayName\n    id\n    borders {\n      image\n      minLength\n      maxLength\n      numberOfLines\n      id\n      displayName\n      __typename\n    }\n    __typename\n  }\n  colors {\n    image\n    id\n    displayName\n    __typename\n  }\n}\n\nfragment Swatch on ProductSwatch {\n  __typename\n  swatchId\n  title\n  sortPriority\n  swatchGroupIndex\n  details\n  colorize\n  imageUrl\n  primaryOptionId\n  secondaryOptionId\n  featuredPallete\n  relatedSwatchBeans {\n    swatchId\n    title\n    sortPriority\n    swatchGroupIndex\n    details\n    colorize\n    imageUrl\n    primaryOptionId\n    secondaryOptionId\n    optionCopy\n    options {\n      id\n      label\n      optionType\n      sortPriority\n      __typename\n    }\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    __typename\n  }\n  optionCopy\n  options {\n    id\n    label\n    optionType\n    sortPriority\n    __typename\n  }\n  swatchImageSm {\n    url\n    width\n    height\n    __typename\n  }\n  swatchImageLg {\n    url\n    width\n    height\n    __typename\n  }\n  onSale\n}\n\nfragment LineItem on ProductLineItem {\n  __typename\n  sku {\n    ...Sku\n    __typename\n  }\n  availableOptions {\n    type\n    sortPriority\n    optionTypeId\n    adapter\n    options {\n      id\n      type\n      value\n      name\n      sortPriority\n      status\n      message\n      usa_list_price_f\n      usa_member_price_f\n      usa_sale_price_f\n      can_list_price_f\n      can_member_price_f\n      can_sale_price_f\n      gbr_list_price_f\n      gbr_member_price_f\n      gbr_sale_price_f\n      __typename\n    }\n    __typename\n  }\n  image {\n    productId\n    imageUrl\n    __typename\n  }\n  customProductOptions {\n    customProductInformation {\n      customProductType\n      cwCustomProductCode\n      maxWidth\n      maxLength\n      minWidth\n      minLength\n      minDiameter\n      maxDiameter\n      maxControlLength\n      minControlLength\n      widthFractionGap\n      lengthFractionGap\n      diameterFractionGap\n      shape\n      mountTypes {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      controlTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      panels {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      linings {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlPositions {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      rollTypes {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      bracketColors {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlsAndTilts {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      tiltTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      rugTrims {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      finish {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Sku on ProductSku {\n  __typename\n  info {\n    name\n    longDescription\n    imageUrl\n    maxOrderQty\n    skuPriceInfo {\n      currencySymbol\n      listPrice\n      salePrice\n      memberPrice\n      tradePrice\n      contractPrice\n      memberOriginalPrice\n      nextgenDriven\n      onSale\n      onClearance\n      showMemberPrice\n      customProductErrorCode\n      customProductErrorMsg\n      __typename\n    }\n    canadaShippable\n    dropship\n    shipViaCode\n    hasCasingSkus\n    casingProduct\n    replacementCushionProduct\n    __typename\n  }\n  inventory {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    inventoryOnHand\n    __typename\n  }\n  delivery {\n    postalCode\n    needPostalCode\n    deliveryEstimateStatus\n    deliveryEstimate\n    freightExempt\n    shippingSurcharge\n    shippingSurchargeAmount\n    freightExemptMessage\n    deliveryStateMessage\n    lineId\n    __typename\n  }\n  restrictions {\n    spo\n    giftCertificate\n    serviceSku\n    monogram\n    monogramMessage\n    returnPolicyMessage\n    preBillMessage\n    additionalMessages {\n      curbsideMessage\n      assemblyMessage\n      giftCardMessage\n      railroadMessage\n      mattressFeeMessage\n      cancellableMessage\n      finalSaleMessage\n      __typename\n    }\n    countryRestrictions\n    mattressFeeLocation\n    __typename\n  }\n  fulfillmentEta {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    startDateRange\n    endDateRange\n    eta\n    lineType\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">Product</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {
  product(
    productId: $productId
    categoryId: $categoryId
    filter: $filter
    userType: $userType
    currencyCode: $currencyCode
    siteId: $siteId
    measureSystem: $measureSystem
    locale: $locale
    postalCode: $postalCode
  ) {
    __typename
    ...ProductFields
  }
}

fragment ProductFields on Product {
  __typename
  ...BaseProductFields
  personalizeInfo {
    ...PersonalizeInfo
    __typename
  }
  productLineItem(filter: $filter) {
    ...LineItem
    __typename
  }
  category
  spoReturnMessageOverride
  spoReturnMessageOverrideKey
  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {
    productId
    adapter
    splitDisplay
    faceoutSwatchId
    swatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      customSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    finishSwatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    __typename
  }
  customProductType
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  carouselProdctDetails {
    imageUrl
    displayName
    productId
    sale
    __typename
  }
  customProduct
  productOptionGroupBean {
    title
    optionsList
    __typename
  }
  swatchBean {
    swatchId
    primaryOptionId
    __typename
  }
  fullSkuId
  ctaLinks {
    layerType
    label
    leftCoordinate
    topCoordinate
    flyoutDirection
    htmlText
    shortText
    link
    modal
    path
    __typename
  }
  productConfiguration {
    __typename
    ...ProductConfiguration
  }
}

fragment BaseProductFields on Product {
  newPdpLayout
  collectionName
  collectionCategoryId
  autoplay
  preconfiguredSku
  isActive
  videoUrl
  endDate
  subName
  metaProduct
  longDescription
  merchMessage
  targetUrl
  emptyProduct
  metaProductComponent
  onSale
  giftCert
  featureList
  dimensions
  deliveryDimensions
  careInstructions
  fixedDisplaySku
  layout
  productListTitle
  id
  type
  displayName
  imageUrl
  galleryDescription
  newProduct
  template
  suppressSwatchCopy
  alternateImages {
    imageUrl
    caption
    video
    sbrId
    autoplay
    lifestyleImage
    sliderCss
    __typename
  }
  productAddonDescription
  productAddonMessage
  productAddonTitle
  productAddons {
    __typename
    ...ProductAddons
  }
  colorizeInfo {
    colorizable
    __typename
  }
  layout
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  priceRangeMultiSkuDisplay {
    ...PriceRangeDisplay
    __typename
  }
  index
  rangeId
  parentCategoryId
  fileLinkUrls {
    link
    label
    __typename
  }
  instock {
    hasInStock
    showInStockButton
    showInStockMessage
    __typename
  }
  saleInfo {
    nonSaleSkus
    saleSkus
    totalSkus
    percentSaleSkus
    showSaleMessage
    __typename
  }
  sale {
    hasSale
    showSaleButton
    showSaleMessage
    __typename
  }
  uxAttributes {
    productType
    triggerSwatchImage
    giftCert
    __typename
  }
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  customProduct
  rhr
  showAllOptions
  hideOptionSet
  pdpImageLayout
  pdpCrop
  serviceSkuProduct
  nextGenDriven
  multiSkuAdditionalMessage
  seoDescription
  keywords
  relatedProductIds
  saleSwatchId
  productMessage
  swatch
  __typename
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
}

fragment ProductAddons on ProductAddons {
  productAddonsInfo {
    id
    customProduct
    imageUrl
    productAddonTitle
    productAddonMessage
    productAddonDescription
    onSale
    longDescription
    displayName
    isActive
    saleInfo {
      saleSkus
      totalSkus
      percentSaleSkus
      showSaleMessage
      __typename
    }
    priceRangeDisplay {
      rangeType
      isUnavailable
      isSale
      showMemberPrice
      skulowestListPrice
      skulowestMemberPrice
      skulowestSalePrice
      nextGenDriven
      nextGenDrivenOnSale
      listPrices
      salePrices
      memberPrices
      salePriceLabel
      priceMessage
      priceMessagePrice
      listPriceLabel
      memberPriceLabel
      strikePriceLabel
      currencySymbol
      hasOnlyOneSku
      __typename
    }
    colorizeInfo {
      colorizable
      __typename
    }
    alternateImages {
      imageUrl
      caption
      video
      sbrId
      __typename
    }
    productLineItem {
      availableOptions {
        type
        sortPriority
        optionTypeId
        options {
          id
          type
          value
          sortPriority
          status
          message
          __typename
        }
        __typename
      }
      image {
        productId
        imageUrl
        __typename
      }
      __typename
    }
    imageUrl
    __typename
    productConfiguration {
      __typename
      ...ProductConfiguration
    }
  }
  __typename
}

fragment ProductConfiguration on ProductInfoV3 {
  productId
  optionMatrix
  instockOptionMatrix
  preselectedOptions
  default_preselected_options
  default_instock_preselected_options
  swatchData {
    __typename
    ...ProductSwatchV2
  }
  optionDetails {
    type
    options {
      id
      typeId
      value
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment ProductSwatchV2 on ProductSwatchV2 {
  productId
  swatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  finishSwatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  __typename
}

fragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {
  swatchGroupName
  groupMaterial
  swatches {
    swatchId
    title
    imageUrl
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    onSale
    optionCopy
    __typename
  }
  __typename
}

fragment PersonalizeInfo on ProductPersonalizeInfo {
  __typename
  description
  features
  feeLow
  feeHigh
  monogrammable
  personalizable
  waiveMonogramFee
  styles {
    image
    previewImage
    displayName
    id
    minLength
    maxLength
    numberOfLines
    __typename
  }
  fonts {
    image
    previewImage
    displayName
    id
    borders {
      image
      minLength
      maxLength
      numberOfLines
      id
      displayName
      __typename
    }
    __typename
  }
  colors {
    image
    id
    displayName
    __typename
  }
}

fragment Swatch on ProductSwatch {
  __typename
  swatchId
  title
  sortPriority
  swatchGroupIndex
  details
  colorize
  imageUrl
  primaryOptionId
  secondaryOptionId
  featuredPallete
  relatedSwatchBeans {
    swatchId
    title
    sortPriority
    swatchGroupIndex
    details
    colorize
    imageUrl
    primaryOptionId
    secondaryOptionId
    optionCopy
    options {
      id
      label
      optionType
      sortPriority
      __typename
    }
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    __typename
  }
  optionCopy
  options {
    id
    label
    optionType
    sortPriority
    __typename
  }
  swatchImageSm {
    url
    width
    height
    __typename
  }
  swatchImageLg {
    url
    width
    height
    __typename
  }
  onSale
}

fragment LineItem on ProductLineItem {
  __typename
  sku {
    ...Sku
    __typename
  }
  availableOptions {
    type
    sortPriority
    optionTypeId
    adapter
    options {
      id
      type
      value
      name
      sortPriority
      status
      message
      usa_list_price_f
      usa_member_price_f
      usa_sale_price_f
      can_list_price_f
      can_member_price_f
      can_sale_price_f
      gbr_list_price_f
      gbr_member_price_f
      gbr_sale_price_f
      __typename
    }
    __typename
  }
  image {
    productId
    imageUrl
    __typename
  }
  customProductOptions {
    customProductInformation {
      customProductType
      cwCustomProductCode
      maxWidth
      maxLength
      minWidth
      minLength
      minDiameter
      maxDiameter
      maxControlLength
      minControlLength
      widthFractionGap
      lengthFractionGap
      diameterFractionGap
      shape
      mountTypes {
        id
        value
        status
        message
        code
        __typename
      }
      controlTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      panels {
        id
        value
        status
        message
        code
        __typename
      }
      linings {
        id
        value
        status
        message
        __typename
      }
      controlPositions {
        id
        value
        status
        message
        __typename
      }
      rollTypes {
        id
        value
        status
        message
        __typename
      }
      bracketColors {
        id
        value
        status
        message
        __typename
      }
      controlsAndTilts {
        id
        value
        status
        message
        __typename
      }
      tiltTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      rugTrims {
        id
        value
        status
        message
        code
        __typename
      }
      finish {
        id
        value
        status
        message
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment Sku on ProductSku {
  __typename
  info {
    name
    longDescription
    imageUrl
    maxOrderQty
    skuPriceInfo {
      currencySymbol
      listPrice
      salePrice
      memberPrice
      tradePrice
      contractPrice
      memberOriginalPrice
      nextgenDriven
      onSale
      onClearance
      showMemberPrice
      customProductErrorCode
      customProductErrorMsg
      __typename
    }
    canadaShippable
    dropship
    shipViaCode
    hasCasingSkus
    casingProduct
    replacementCushionProduct
    __typename
  }
  inventory {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    inventoryOnHand
    __typename
  }
  delivery {
    postalCode
    needPostalCode
    deliveryEstimateStatus
    deliveryEstimate
    freightExempt
    shippingSurcharge
    shippingSurchargeAmount
    freightExemptMessage
    deliveryStateMessage
    lineId
    __typename
  }
  restrictions {
    spo
    giftCertificate
    serviceSku
    monogram
    monogramMessage
    returnPolicyMessage
    preBillMessage
    additionalMessages {
      curbsideMessage
      assemblyMessage
      giftCardMessage
      railroadMessage
      mattressFeeMessage
      cancellableMessage
      finalSaleMessage
      __typename
    }
    countryRestrictions
    mattressFeeLocation
    __typename
  }
  fulfillmentEta {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    startDateRange
    endDateRange
    eta
    lineType
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct1" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RelatedProduct" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">RelatedProduct</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..relatedProductIds.[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOptions" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">availableOptions</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.productLineItem.availableOptions.[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Product" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Product</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="optionsId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">optionsId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.errors[0].span_id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.io.File;
import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;


String username = vars.get(&quot;Product&quot;);
String csrfToken = vars.get(&quot;optionsId&quot;);

File file = new File(&quot;C:\\Performance_Testing\\id.csv&quot;);
FileWriter fstream = new FileWriter(file, true);

BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;\n&quot;+username+&quot;,&quot;+csrfToken);


out.close();
fstream.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="ProductImage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">ProductImage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: null,
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemQuery-1_MainProduct" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">LineItemQuery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemQuery-1_MainProduct" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">LineItemQuery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: []
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: []
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - availableOptions_matchNr" enabled="true">
            <stringProp name="IfController.condition">${__jexl3( ${availableOptions_matchNr} &gt; 0,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
              <stringProp name="ForeachController.inputVal">availableOptions</stringProp>
              <stringProp name="ForeachController.returnVal">availableOption</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${availableOptions_matchNr}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">Counter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="ProductImage_MainProduct" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">-${__counter(,coun)}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">ProductImage</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemQuery-3_MainProduct" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">-${coun}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="false">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionId&quot;, selectedOptionIds)</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemSkuQuery_MainProduct" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">LineItemSkuQuery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">LineItemSkuQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">LineItemSkuQuery</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="&quot;referer&quot;" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetSku" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetSku</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetSku</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">GetSku</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="&quot;referer&quot;" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.io.File;
import org.apache.jmeter.services.FileServer;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.io.Writer;


String username = vars.get(&quot;Product&quot;);
String csrfToken = vars.get(&quot;fullSkuId&quot;);

File file = new File(&quot;C:\\Performance_Testing\\idNew.csv&quot;);
FileWriter fstream = new FileWriter(file, true);

BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;\n&quot;+username+&quot;,&quot;+csrfToken);


out.close();
fstream.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SkuAvailabilityStatus" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SkuAvailabilityStatus</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SkuAvailabilityStatus</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">SkuAvailabilityStatus</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="&quot;referer&quot;" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PDP_1.6" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="host" elementType="Argument">
                <stringProp name="Argument.name">host</stringProp>
                <stringProp name="Argument.value">${__P(host,stg2.rhnonprod.com)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">stg2.rhnonprod.com?outdoor=true</stringProp>
              </elementProp>
              <elementProp name="path" elementType="Argument">
                <stringProp name="Argument.name">path</stringProp>
                <stringProp name="Argument.value">rh-experience-layer-v1-stg2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="env" elementType="Argument">
                <stringProp name="Argument.name">env</stringProp>
                <stringProp name="Argument.value">${__P(env,stg2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="FEATURE_AEM_RENDER_CONTROL" elementType="Cookie" testname="FEATURE_AEM_RENDER_CONTROL">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="FEATURE_WISTIA_OPTIMIZATIONS" elementType="Cookie" testname="FEATURE_WISTIA_OPTIMIZATIONS">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="fusion_search" elementType="Cookie" testname="fusion_search">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="endpoint" elementType="Cookie" testname="endpoint">
                <stringProp name="Cookie.value">stg2</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
                <stringProp name="Cookie.value">false</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-request-id" elementType="Header">
                <stringProp name="Header.name">x-request-id</stringProp>
                <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
              </elementProp>
              <elementProp name="apollographql-client-name" elementType="Header">
                <stringProp name="Header.name">apollographql-client-name</stringProp>
                <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="x-operation" elementType="Header">
                <stringProp name="Header.name">x-operation</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
              <elementProp name="Client-Origin" elementType="Header">
                <stringProp name="Header.name">Client-Origin</stringProp>
                <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PDPs" enabled="true">
            <stringProp name="filename">PDPs2.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">productId</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Product" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Product&quot;,&quot;variables&quot;:{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
},&quot;query&quot;:&quot;query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {\n  product(\n    productId: $productId\n    categoryId: $categoryId\n    filter: $filter\n    userType: $userType\n    currencyCode: $currencyCode\n    siteId: $siteId\n    measureSystem: $measureSystem\n    locale: $locale\n    postalCode: $postalCode\n  ) {\n    __typename\n    ...ProductFields\n  }\n}\n\nfragment ProductFields on Product {\n  __typename\n  ...BaseProductFields\n  personalizeInfo {\n    ...PersonalizeInfo\n    __typename\n  }\n  productLineItem(filter: $filter) {\n    ...LineItem\n    __typename\n  }\n  category\n  spoReturnMessageOverride\n  spoReturnMessageOverrideKey\n  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {\n    productId\n    adapter\n    splitDisplay\n    faceoutSwatchId\n    swatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      customSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    finishSwatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  customProductType\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  carouselProdctDetails {\n    imageUrl\n    displayName\n    productId\n    sale\n    __typename\n  }\n  customProduct\n  productOptionGroupBean {\n    title\n    optionsList\n    __typename\n  }\n  swatchBean {\n    swatchId\n    primaryOptionId\n    __typename\n  }\n  fullSkuId\n  ctaLinks {\n    layerType\n    label\n    leftCoordinate\n    topCoordinate\n    flyoutDirection\n    htmlText\n    shortText\n    link\n    modal\n    path\n    __typename\n  }\n  productConfiguration {\n    __typename\n    ...ProductConfiguration\n  }\n}\n\nfragment BaseProductFields on Product {\n  newPdpLayout\n  collectionName\n  collectionCategoryId\n  autoplay\n  preconfiguredSku\n  isActive\n  videoUrl\n  endDate\n  subName\n  metaProduct\n  longDescription\n  merchMessage\n  targetUrl\n  emptyProduct\n  metaProductComponent\n  onSale\n  giftCert\n  featureList\n  dimensions\n  deliveryDimensions\n  careInstructions\n  fixedDisplaySku\n  layout\n  productListTitle\n  id\n  type\n  displayName\n  imageUrl\n  galleryDescription\n  newProduct\n  template\n  suppressSwatchCopy\n  alternateImages {\n    imageUrl\n    caption\n    video\n    sbrId\n    autoplay\n    lifestyleImage\n    sliderCss\n    __typename\n  }\n  productAddonDescription\n  productAddonMessage\n  productAddonTitle\n  productAddons {\n    __typename\n    ...ProductAddons\n  }\n  colorizeInfo {\n    colorizable\n    __typename\n  }\n  layout\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  priceRangeMultiSkuDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  index\n  rangeId\n  parentCategoryId\n  fileLinkUrls {\n    link\n    label\n    __typename\n  }\n  instock {\n    hasInStock\n    showInStockButton\n    showInStockMessage\n    __typename\n  }\n  saleInfo {\n    nonSaleSkus\n    saleSkus\n    totalSkus\n    percentSaleSkus\n    showSaleMessage\n    __typename\n  }\n  sale {\n    hasSale\n    showSaleButton\n    showSaleMessage\n    __typename\n  }\n  uxAttributes {\n    productType\n    triggerSwatchImage\n    giftCert\n    __typename\n  }\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  customProduct\n  rhr\n  showAllOptions\n  hideOptionSet\n  pdpImageLayout\n  pdpCrop\n  serviceSkuProduct\n  nextGenDriven\n  multiSkuAdditionalMessage\n  seoDescription\n  keywords\n  relatedProductIds\n  saleSwatchId\n  productMessage\n  swatch\n  __typename\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n}\n\nfragment ProductAddons on ProductAddons {\n  productAddonsInfo {\n    id\n    customProduct\n    imageUrl\n    productAddonTitle\n    productAddonMessage\n    productAddonDescription\n    onSale\n    longDescription\n    displayName\n    isActive\n    saleInfo {\n      saleSkus\n      totalSkus\n      percentSaleSkus\n      showSaleMessage\n      __typename\n    }\n    priceRangeDisplay {\n      rangeType\n      isUnavailable\n      isSale\n      showMemberPrice\n      skulowestListPrice\n      skulowestMemberPrice\n      skulowestSalePrice\n      nextGenDriven\n      nextGenDrivenOnSale\n      listPrices\n      salePrices\n      memberPrices\n      salePriceLabel\n      priceMessage\n      priceMessagePrice\n      listPriceLabel\n      memberPriceLabel\n      strikePriceLabel\n      currencySymbol\n      hasOnlyOneSku\n      __typename\n    }\n    colorizeInfo {\n      colorizable\n      __typename\n    }\n    alternateImages {\n      imageUrl\n      caption\n      video\n      sbrId\n      __typename\n    }\n    productLineItem {\n      availableOptions {\n        type\n        sortPriority\n        optionTypeId\n        options {\n          id\n          type\n          value\n          sortPriority\n          status\n          message\n          __typename\n        }\n        __typename\n      }\n      image {\n        productId\n        imageUrl\n        __typename\n      }\n      __typename\n    }\n    imageUrl\n    __typename\n    productConfiguration {\n      __typename\n      ...ProductConfiguration\n    }\n  }\n  __typename\n}\n\nfragment ProductConfiguration on ProductInfoV3 {\n  productId\n  optionMatrix\n  instockOptionMatrix\n  preselectedOptions\n  default_preselected_options\n  default_instock_preselected_options\n  swatchData {\n    __typename\n    ...ProductSwatchV2\n  }\n  optionDetails {\n    type\n    options {\n      id\n      typeId\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ProductSwatchV2 on ProductSwatchV2 {\n  productId\n  swatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  finishSwatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  __typename\n}\n\nfragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {\n  swatchGroupName\n  groupMaterial\n  swatches {\n    swatchId\n    title\n    imageUrl\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    onSale\n    optionCopy\n    __typename\n  }\n  __typename\n}\n\nfragment PersonalizeInfo on ProductPersonalizeInfo {\n  __typename\n  description\n  features\n  feeLow\n  feeHigh\n  monogrammable\n  personalizable\n  waiveMonogramFee\n  styles {\n    image\n    previewImage\n    displayName\n    id\n    minLength\n    maxLength\n    numberOfLines\n    __typename\n  }\n  fonts {\n    image\n    previewImage\n    displayName\n    id\n    borders {\n      image\n      minLength\n      maxLength\n      numberOfLines\n      id\n      displayName\n      __typename\n    }\n    __typename\n  }\n  colors {\n    image\n    id\n    displayName\n    __typename\n  }\n}\n\nfragment Swatch on ProductSwatch {\n  __typename\n  swatchId\n  title\n  sortPriority\n  swatchGroupIndex\n  details\n  colorize\n  imageUrl\n  primaryOptionId\n  secondaryOptionId\n  featuredPallete\n  relatedSwatchBeans {\n    swatchId\n    title\n    sortPriority\n    swatchGroupIndex\n    details\n    colorize\n    imageUrl\n    primaryOptionId\n    secondaryOptionId\n    optionCopy\n    options {\n      id\n      label\n      optionType\n      sortPriority\n      __typename\n    }\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    __typename\n  }\n  optionCopy\n  options {\n    id\n    label\n    optionType\n    sortPriority\n    __typename\n  }\n  swatchImageSm {\n    url\n    width\n    height\n    __typename\n  }\n  swatchImageLg {\n    url\n    width\n    height\n    __typename\n  }\n  onSale\n}\n\nfragment LineItem on ProductLineItem {\n  __typename\n  sku {\n    ...Sku\n    __typename\n  }\n  availableOptions {\n    type\n    sortPriority\n    optionTypeId\n    adapter\n    options {\n      id\n      type\n      value\n      name\n      sortPriority\n      status\n      message\n      usa_list_price_f\n      usa_member_price_f\n      usa_sale_price_f\n      can_list_price_f\n      can_member_price_f\n      can_sale_price_f\n      gbr_list_price_f\n      gbr_member_price_f\n      gbr_sale_price_f\n      __typename\n    }\n    __typename\n  }\n  image {\n    productId\n    imageUrl\n    __typename\n  }\n  customProductOptions {\n    customProductInformation {\n      customProductType\n      cwCustomProductCode\n      maxWidth\n      maxLength\n      minWidth\n      minLength\n      minDiameter\n      maxDiameter\n      maxControlLength\n      minControlLength\n      widthFractionGap\n      lengthFractionGap\n      diameterFractionGap\n      shape\n      mountTypes {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      controlTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      panels {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      linings {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlPositions {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      rollTypes {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      bracketColors {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlsAndTilts {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      tiltTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      rugTrims {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      finish {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Sku on ProductSku {\n  __typename\n  info {\n    name\n    longDescription\n    imageUrl\n    maxOrderQty\n    skuPriceInfo {\n      currencySymbol\n      listPrice\n      salePrice\n      memberPrice\n      tradePrice\n      contractPrice\n      memberOriginalPrice\n      nextgenDriven\n      onSale\n      onClearance\n      showMemberPrice\n      customProductErrorCode\n      customProductErrorMsg\n      __typename\n    }\n    canadaShippable\n    dropship\n    shipViaCode\n    hasCasingSkus\n    casingProduct\n    replacementCushionProduct\n    __typename\n  }\n  inventory {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    inventoryOnHand\n    __typename\n  }\n  delivery {\n    postalCode\n    needPostalCode\n    deliveryEstimateStatus\n    deliveryEstimate\n    freightExempt\n    shippingSurcharge\n    shippingSurchargeAmount\n    freightExemptMessage\n    deliveryStateMessage\n    lineId\n    __typename\n  }\n  restrictions {\n    spo\n    giftCertificate\n    serviceSku\n    monogram\n    monogramMessage\n    returnPolicyMessage\n    preBillMessage\n    additionalMessages {\n      curbsideMessage\n      assemblyMessage\n      giftCardMessage\n      railroadMessage\n      mattressFeeMessage\n      cancellableMessage\n      finalSaleMessage\n      __typename\n    }\n    countryRestrictions\n    mattressFeeLocation\n    __typename\n  }\n  fulfillmentEta {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    startDateRange\n    endDateRange\n    eta\n    lineType\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">Product</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {
  product(
    productId: $productId
    categoryId: $categoryId
    filter: $filter
    userType: $userType
    currencyCode: $currencyCode
    siteId: $siteId
    measureSystem: $measureSystem
    locale: $locale
    postalCode: $postalCode
  ) {
    __typename
    ...ProductFields
  }
}

fragment ProductFields on Product {
  __typename
  ...BaseProductFields
  personalizeInfo {
    ...PersonalizeInfo
    __typename
  }
  productLineItem(filter: $filter) {
    ...LineItem
    __typename
  }
  category
  spoReturnMessageOverride
  spoReturnMessageOverrideKey
  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {
    productId
    adapter
    splitDisplay
    faceoutSwatchId
    swatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      customSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    finishSwatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    __typename
  }
  customProductType
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  carouselProdctDetails {
    imageUrl
    displayName
    productId
    sale
    __typename
  }
  customProduct
  productOptionGroupBean {
    title
    optionsList
    __typename
  }
  swatchBean {
    swatchId
    primaryOptionId
    __typename
  }
  fullSkuId
  ctaLinks {
    layerType
    label
    leftCoordinate
    topCoordinate
    flyoutDirection
    htmlText
    shortText
    link
    modal
    path
    __typename
  }
  productConfiguration {
    __typename
    ...ProductConfiguration
  }
}

fragment BaseProductFields on Product {
  newPdpLayout
  collectionName
  collectionCategoryId
  autoplay
  preconfiguredSku
  isActive
  videoUrl
  endDate
  subName
  metaProduct
  longDescription
  merchMessage
  targetUrl
  emptyProduct
  metaProductComponent
  onSale
  giftCert
  featureList
  dimensions
  deliveryDimensions
  careInstructions
  fixedDisplaySku
  layout
  productListTitle
  id
  type
  displayName
  imageUrl
  galleryDescription
  newProduct
  template
  suppressSwatchCopy
  alternateImages {
    imageUrl
    caption
    video
    sbrId
    autoplay
    lifestyleImage
    sliderCss
    __typename
  }
  productAddonDescription
  productAddonMessage
  productAddonTitle
  productAddons {
    __typename
    ...ProductAddons
  }
  colorizeInfo {
    colorizable
    __typename
  }
  layout
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  priceRangeMultiSkuDisplay {
    ...PriceRangeDisplay
    __typename
  }
  index
  rangeId
  parentCategoryId
  fileLinkUrls {
    link
    label
    __typename
  }
  instock {
    hasInStock
    showInStockButton
    showInStockMessage
    __typename
  }
  saleInfo {
    nonSaleSkus
    saleSkus
    totalSkus
    percentSaleSkus
    showSaleMessage
    __typename
  }
  sale {
    hasSale
    showSaleButton
    showSaleMessage
    __typename
  }
  uxAttributes {
    productType
    triggerSwatchImage
    giftCert
    __typename
  }
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  customProduct
  rhr
  showAllOptions
  hideOptionSet
  pdpImageLayout
  pdpCrop
  serviceSkuProduct
  nextGenDriven
  multiSkuAdditionalMessage
  seoDescription
  keywords
  relatedProductIds
  saleSwatchId
  productMessage
  swatch
  __typename
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
}

fragment ProductAddons on ProductAddons {
  productAddonsInfo {
    id
    customProduct
    imageUrl
    productAddonTitle
    productAddonMessage
    productAddonDescription
    onSale
    longDescription
    displayName
    isActive
    saleInfo {
      saleSkus
      totalSkus
      percentSaleSkus
      showSaleMessage
      __typename
    }
    priceRangeDisplay {
      rangeType
      isUnavailable
      isSale
      showMemberPrice
      skulowestListPrice
      skulowestMemberPrice
      skulowestSalePrice
      nextGenDriven
      nextGenDrivenOnSale
      listPrices
      salePrices
      memberPrices
      salePriceLabel
      priceMessage
      priceMessagePrice
      listPriceLabel
      memberPriceLabel
      strikePriceLabel
      currencySymbol
      hasOnlyOneSku
      __typename
    }
    colorizeInfo {
      colorizable
      __typename
    }
    alternateImages {
      imageUrl
      caption
      video
      sbrId
      __typename
    }
    productLineItem {
      availableOptions {
        type
        sortPriority
        optionTypeId
        options {
          id
          type
          value
          sortPriority
          status
          message
          __typename
        }
        __typename
      }
      image {
        productId
        imageUrl
        __typename
      }
      __typename
    }
    imageUrl
    __typename
    productConfiguration {
      __typename
      ...ProductConfiguration
    }
  }
  __typename
}

fragment ProductConfiguration on ProductInfoV3 {
  productId
  optionMatrix
  instockOptionMatrix
  preselectedOptions
  default_preselected_options
  default_instock_preselected_options
  swatchData {
    __typename
    ...ProductSwatchV2
  }
  optionDetails {
    type
    options {
      id
      typeId
      value
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment ProductSwatchV2 on ProductSwatchV2 {
  productId
  swatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  finishSwatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  __typename
}

fragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {
  swatchGroupName
  groupMaterial
  swatches {
    swatchId
    title
    imageUrl
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    onSale
    optionCopy
    __typename
  }
  __typename
}

fragment PersonalizeInfo on ProductPersonalizeInfo {
  __typename
  description
  features
  feeLow
  feeHigh
  monogrammable
  personalizable
  waiveMonogramFee
  styles {
    image
    previewImage
    displayName
    id
    minLength
    maxLength
    numberOfLines
    __typename
  }
  fonts {
    image
    previewImage
    displayName
    id
    borders {
      image
      minLength
      maxLength
      numberOfLines
      id
      displayName
      __typename
    }
    __typename
  }
  colors {
    image
    id
    displayName
    __typename
  }
}

fragment Swatch on ProductSwatch {
  __typename
  swatchId
  title
  sortPriority
  swatchGroupIndex
  details
  colorize
  imageUrl
  primaryOptionId
  secondaryOptionId
  featuredPallete
  relatedSwatchBeans {
    swatchId
    title
    sortPriority
    swatchGroupIndex
    details
    colorize
    imageUrl
    primaryOptionId
    secondaryOptionId
    optionCopy
    options {
      id
      label
      optionType
      sortPriority
      __typename
    }
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    __typename
  }
  optionCopy
  options {
    id
    label
    optionType
    sortPriority
    __typename
  }
  swatchImageSm {
    url
    width
    height
    __typename
  }
  swatchImageLg {
    url
    width
    height
    __typename
  }
  onSale
}

fragment LineItem on ProductLineItem {
  __typename
  sku {
    ...Sku
    __typename
  }
  availableOptions {
    type
    sortPriority
    optionTypeId
    adapter
    options {
      id
      type
      value
      name
      sortPriority
      status
      message
      usa_list_price_f
      usa_member_price_f
      usa_sale_price_f
      can_list_price_f
      can_member_price_f
      can_sale_price_f
      gbr_list_price_f
      gbr_member_price_f
      gbr_sale_price_f
      __typename
    }
    __typename
  }
  image {
    productId
    imageUrl
    __typename
  }
  customProductOptions {
    customProductInformation {
      customProductType
      cwCustomProductCode
      maxWidth
      maxLength
      minWidth
      minLength
      minDiameter
      maxDiameter
      maxControlLength
      minControlLength
      widthFractionGap
      lengthFractionGap
      diameterFractionGap
      shape
      mountTypes {
        id
        value
        status
        message
        code
        __typename
      }
      controlTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      panels {
        id
        value
        status
        message
        code
        __typename
      }
      linings {
        id
        value
        status
        message
        __typename
      }
      controlPositions {
        id
        value
        status
        message
        __typename
      }
      rollTypes {
        id
        value
        status
        message
        __typename
      }
      bracketColors {
        id
        value
        status
        message
        __typename
      }
      controlsAndTilts {
        id
        value
        status
        message
        __typename
      }
      tiltTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      rugTrims {
        id
        value
        status
        message
        code
        __typename
      }
      finish {
        id
        value
        status
        message
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment Sku on ProductSku {
  __typename
  info {
    name
    longDescription
    imageUrl
    maxOrderQty
    skuPriceInfo {
      currencySymbol
      listPrice
      salePrice
      memberPrice
      tradePrice
      contractPrice
      memberOriginalPrice
      nextgenDriven
      onSale
      onClearance
      showMemberPrice
      customProductErrorCode
      customProductErrorMsg
      __typename
    }
    canadaShippable
    dropship
    shipViaCode
    hasCasingSkus
    casingProduct
    replacementCushionProduct
    __typename
  }
  inventory {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    inventoryOnHand
    __typename
  }
  delivery {
    postalCode
    needPostalCode
    deliveryEstimateStatus
    deliveryEstimate
    freightExempt
    shippingSurcharge
    shippingSurchargeAmount
    freightExemptMessage
    deliveryStateMessage
    lineId
    __typename
  }
  restrictions {
    spo
    giftCertificate
    serviceSku
    monogram
    monogramMessage
    returnPolicyMessage
    preBillMessage
    additionalMessages {
      curbsideMessage
      assemblyMessage
      giftCardMessage
      railroadMessage
      mattressFeeMessage
      cancellableMessage
      finalSaleMessage
      __typename
    }
    countryRestrictions
    mattressFeeLocation
    __typename
  }
  fulfillmentEta {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    startDateRange
    endDateRange
    eta
    lineType
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOptions" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">availableOptions</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.productLineItem.availableOptions[0].options[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOptions1" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">availableOptions1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.productLineItem.availableOptions[1].options[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${availableOptions_matchNr}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def selectedOptionIds = vars[&quot;availableOptions&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOptions1&quot;]
//def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="availableOptions" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Assuming you have variables availableOptions and availableOptions1
def var1 = vars.get(&quot;availableOptions&quot;)
def var2 = vars.get(&quot;availableOptions1&quot;)

// Concatenate the values with a comma
def commaSeparatedValues = var1 + &quot;,&quot; + var2

// Set the new variable with the comma-separated values
vars.put(&quot;selectedOptionIds&quot;, commaSeparatedValues)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">2</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="ProductImage" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">ProductImage</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{&quot;productId&quot;:&quot;${productId}&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;productId&quot;:&quot;${productId}&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemQueryV3" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">LineItemQueryV3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
	&quot;productId&quot;: &quot;${productId}&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">LineItemQueryV3</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;productId&quot;: &quot;${productId}&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetSku" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">GetSku</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">GetSku</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="x-operation" elementType="Header">
                    <stringProp name="Header.name">x-operation</stringProp>
                    <stringProp name="Header.value">GetSku</stringProp>
                  </elementProp>
                  <elementProp name="Client-Origin" elementType="Header">
                    <stringProp name="Header.name">Client-Origin</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="&quot;referer&quot;" elementType="Header">
                    <stringProp name="Header.name">referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemSkuQuery" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">LineItemSkuQuery</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">LineItemSkuQuery</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="x-operation" elementType="Header">
                    <stringProp name="Header.name">x-operation</stringProp>
                    <stringProp name="Header.value">LineItemSkuQuery</stringProp>
                  </elementProp>
                  <elementProp name="Client-Origin" elementType="Header">
                    <stringProp name="Header.name">Client-Origin</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="&quot;referer&quot;" elementType="Header">
                    <stringProp name="Header.name">referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="Scope.variable">availableOption</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SkuAvailabilityStatus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">operationName</stringProp>
                    <stringProp name="Argument.value">SkuAvailabilityStatus</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="query" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">query</stringProp>
                    <stringProp name="Argument.value">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">variables</stringProp>
                    <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="GraphQLHTTPSampler.operationName">SkuAvailabilityStatus</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="x-request-id" elementType="Header">
                    <stringProp name="Header.name">x-request-id</stringProp>
                    <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-origin</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="x-operation" elementType="Header">
                    <stringProp name="Header.name">x-operation</stringProp>
                    <stringProp name="Header.value">SkuAvailabilityStatus</stringProp>
                  </elementProp>
                  <elementProp name="Client-Origin" elementType="Header">
                    <stringProp name="Header.name">Client-Origin</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value"></stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="&quot;referer&quot;" elementType="Header">
                    <stringProp name="Header.name">referer</stringProp>
                    <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - availableOptions_matchNr" enabled="false">
            <stringProp name="IfController.condition">${__jexl3( ${availableOptions_matchNr} &gt; 0,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
              <stringProp name="ForeachController.inputVal">availableOptions</stringProp>
              <stringProp name="ForeachController.returnVal">availableOption</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${availableOptions_matchNr}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">Counter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.19_ProductImage_MainProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">-${__counter(,coun)}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">ProductImage</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.20_LineItemQuery-3_MainProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">-${coun}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="false">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionId&quot;, selectedOptionIds)</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="ProductImage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{&quot;productId&quot;:&quot;prod25570333&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{&quot;productId&quot;:&quot;prod25570333&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemQueryV3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQueryV3</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
	&quot;productId&quot;: &quot;prod25570333&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQueryV3</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;productId&quot;: &quot;prod25570333&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetSku" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetSku</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetSku</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}	</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">GetSku</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemSkuQuery_MainProduct" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemSkuQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemSkuQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemSkuQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SkuAvailabilityStatus" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SkuAvailabilityStatus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">SkuAvailabilityStatus</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">SkuAvailabilityStatus</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="ProductImage" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">ProductImage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{&quot;productId&quot;:&quot;${productId}&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;productId&quot;:&quot;${productId}&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemQueryV3" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">LineItemQueryV3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
	&quot;productId&quot;: &quot;${productId}&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">LineItemQueryV3</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;productId&quot;: &quot;${productId}&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetSku" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetSku</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetSku</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">GetSku</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="&quot;referer&quot;" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemSkuQuery" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">LineItemSkuQuery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">LineItemSkuQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">LineItemSkuQuery</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="&quot;referer&quot;" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SkuAvailabilityStatus" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SkuAvailabilityStatus</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SkuAvailabilityStatus</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">SkuAvailabilityStatus</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="&quot;referer&quot;" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PDP_1.6-new" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="host" elementType="Argument">
                <stringProp name="Argument.name">host</stringProp>
                <stringProp name="Argument.value">${__P(host,stg2.rhnonprod.com)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">stg2.rhnonprod.com?outdoor=true</stringProp>
              </elementProp>
              <elementProp name="path" elementType="Argument">
                <stringProp name="Argument.name">path</stringProp>
                <stringProp name="Argument.value">rh-experience-layer-v1-stg2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="env" elementType="Argument">
                <stringProp name="Argument.name">env</stringProp>
                <stringProp name="Argument.value">${__P(env,stg2)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies">
              <elementProp name="ca_popup_selected" elementType="Cookie" testname="ca_popup_selected">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="cachewarming" elementType="Cookie" testname="cachewarming">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="FEATURE_AEM_RENDER_CONTROL" elementType="Cookie" testname="FEATURE_AEM_RENDER_CONTROL">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="FEATURE_WISTIA_OPTIMIZATIONS" elementType="Cookie" testname="FEATURE_WISTIA_OPTIMIZATIONS">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="fusion_search" elementType="Cookie" testname="fusion_search">
                <stringProp name="Cookie.value">true</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="endpoint" elementType="Cookie" testname="endpoint">
                <stringProp name="Cookie.value">stg2</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
              <elementProp name="FEATURE_SSR" elementType="Cookie" testname="FEATURE_SSR">
                <stringProp name="Cookie.value">false</stringProp>
                <stringProp name="Cookie.domain">stg2.rhnonprod.com</stringProp>
                <stringProp name="Cookie.path">/</stringProp>
                <boolProp name="Cookie.secure">false</boolProp>
                <longProp name="Cookie.expires">0</longProp>
                <boolProp name="Cookie.path_specified">true</boolProp>
                <boolProp name="Cookie.domain_specified">true</boolProp>
              </elementProp>
            </collectionProp>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
          </CookieManager>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="x-request-id" elementType="Header">
                <stringProp name="Header.name">x-request-id</stringProp>
                <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
              </elementProp>
              <elementProp name="apollographql-client-name" elementType="Header">
                <stringProp name="Header.name">apollographql-client-name</stringProp>
                <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="x-operation" elementType="Header">
                <stringProp name="Header.name">x-operation</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
              <elementProp name="Client-Origin" elementType="Header">
                <stringProp name="Header.name">Client-Origin</stringProp>
                <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="authorization" elementType="Header">
                <stringProp name="Header.name">authorization</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Dest" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                <stringProp name="Header.value">empty</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="PDPs" enabled="true">
            <stringProp name="filename">PDPs2.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">productId</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="Product" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;Product&quot;,&quot;variables&quot;:{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
},&quot;query&quot;:&quot;query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {\n  product(\n    productId: $productId\n    categoryId: $categoryId\n    filter: $filter\n    userType: $userType\n    currencyCode: $currencyCode\n    siteId: $siteId\n    measureSystem: $measureSystem\n    locale: $locale\n    postalCode: $postalCode\n  ) {\n    __typename\n    ...ProductFields\n  }\n}\n\nfragment ProductFields on Product {\n  __typename\n  ...BaseProductFields\n  personalizeInfo {\n    ...PersonalizeInfo\n    __typename\n  }\n  productLineItem(filter: $filter) {\n    ...LineItem\n    __typename\n  }\n  category\n  spoReturnMessageOverride\n  spoReturnMessageOverrideKey\n  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {\n    productId\n    adapter\n    splitDisplay\n    faceoutSwatchId\n    swatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      customSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    finishSwatchGroups {\n      swatchGroupName\n      groupMaterial\n      swatchGroupIndex\n      sortPriority\n      stockedSwatches {\n        ...Swatch\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n  customProductType\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  carouselProdctDetails {\n    imageUrl\n    displayName\n    productId\n    sale\n    __typename\n  }\n  customProduct\n  productOptionGroupBean {\n    title\n    optionsList\n    __typename\n  }\n  swatchBean {\n    swatchId\n    primaryOptionId\n    __typename\n  }\n  fullSkuId\n  ctaLinks {\n    layerType\n    label\n    leftCoordinate\n    topCoordinate\n    flyoutDirection\n    htmlText\n    shortText\n    link\n    modal\n    path\n    __typename\n  }\n  productConfiguration {\n    __typename\n    ...ProductConfiguration\n  }\n}\n\nfragment BaseProductFields on Product {\n  newPdpLayout\n  collectionName\n  collectionCategoryId\n  autoplay\n  preconfiguredSku\n  isActive\n  videoUrl\n  endDate\n  subName\n  metaProduct\n  longDescription\n  merchMessage\n  targetUrl\n  emptyProduct\n  metaProductComponent\n  onSale\n  giftCert\n  featureList\n  dimensions\n  deliveryDimensions\n  careInstructions\n  fixedDisplaySku\n  layout\n  productListTitle\n  id\n  type\n  displayName\n  imageUrl\n  galleryDescription\n  newProduct\n  template\n  suppressSwatchCopy\n  alternateImages {\n    imageUrl\n    caption\n    video\n    sbrId\n    autoplay\n    lifestyleImage\n    sliderCss\n    __typename\n  }\n  productAddonDescription\n  productAddonMessage\n  productAddonTitle\n  productAddons {\n    __typename\n    ...ProductAddons\n  }\n  colorizeInfo {\n    colorizable\n    __typename\n  }\n  layout\n  priceRangeDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  priceRangeMultiSkuDisplay {\n    ...PriceRangeDisplay\n    __typename\n  }\n  index\n  rangeId\n  parentCategoryId\n  fileLinkUrls {\n    link\n    label\n    __typename\n  }\n  instock {\n    hasInStock\n    showInStockButton\n    showInStockMessage\n    __typename\n  }\n  saleInfo {\n    nonSaleSkus\n    saleSkus\n    totalSkus\n    percentSaleSkus\n    showSaleMessage\n    __typename\n  }\n  sale {\n    hasSale\n    showSaleButton\n    showSaleMessage\n    __typename\n  }\n  uxAttributes {\n    productType\n    triggerSwatchImage\n    giftCert\n    __typename\n  }\n  swatchesToBuy {\n    atgSkuId\n    swatchId\n    productId\n    fullSkuId\n    __typename\n  }\n  customProduct\n  rhr\n  showAllOptions\n  hideOptionSet\n  pdpImageLayout\n  pdpCrop\n  serviceSkuProduct\n  nextGenDriven\n  multiSkuAdditionalMessage\n  seoDescription\n  keywords\n  relatedProductIds\n  saleSwatchId\n  productMessage\n  swatch\n  __typename\n}\n\nfragment PriceRangeDisplay on ProductPriceRangeDisplay {\n  __typename\n  rangeType\n  isUnavailable\n  isSale\n  showMemberPrice\n  skulowestListPrice\n  skulowestMemberPrice\n  skulowestSalePrice\n  nextGenDriven\n  nextGenDrivenOnSale\n  listPrices\n  salePrices\n  memberPrices\n  salePriceLabel\n  priceMessage\n  priceMessagePrice\n  listPriceLabel\n  memberPriceLabel\n  strikePriceLabel\n  currencySymbol\n  overridePriceLabel\n  overrideLineLevelPriceLabel\n  overrideLowestSkuListPrice\n  overrideLowestSkuSalePrice\n  overrideLowestSkuMemberPrice\n  priceFilter\n  hasOnlyOneSku\n}\n\nfragment ProductAddons on ProductAddons {\n  productAddonsInfo {\n    id\n    customProduct\n    imageUrl\n    productAddonTitle\n    productAddonMessage\n    productAddonDescription\n    onSale\n    longDescription\n    displayName\n    isActive\n    saleInfo {\n      saleSkus\n      totalSkus\n      percentSaleSkus\n      showSaleMessage\n      __typename\n    }\n    priceRangeDisplay {\n      rangeType\n      isUnavailable\n      isSale\n      showMemberPrice\n      skulowestListPrice\n      skulowestMemberPrice\n      skulowestSalePrice\n      nextGenDriven\n      nextGenDrivenOnSale\n      listPrices\n      salePrices\n      memberPrices\n      salePriceLabel\n      priceMessage\n      priceMessagePrice\n      listPriceLabel\n      memberPriceLabel\n      strikePriceLabel\n      currencySymbol\n      hasOnlyOneSku\n      __typename\n    }\n    colorizeInfo {\n      colorizable\n      __typename\n    }\n    alternateImages {\n      imageUrl\n      caption\n      video\n      sbrId\n      __typename\n    }\n    productLineItem {\n      availableOptions {\n        type\n        sortPriority\n        optionTypeId\n        options {\n          id\n          type\n          value\n          sortPriority\n          status\n          message\n          __typename\n        }\n        __typename\n      }\n      image {\n        productId\n        imageUrl\n        __typename\n      }\n      __typename\n    }\n    imageUrl\n    __typename\n    productConfiguration {\n      __typename\n      ...ProductConfiguration\n    }\n  }\n  __typename\n}\n\nfragment ProductConfiguration on ProductInfoV3 {\n  productId\n  optionMatrix\n  instockOptionMatrix\n  preselectedOptions\n  default_preselected_options\n  default_instock_preselected_options\n  swatchData {\n    __typename\n    ...ProductSwatchV2\n  }\n  optionDetails {\n    type\n    options {\n      id\n      typeId\n      value\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment ProductSwatchV2 on ProductSwatchV2 {\n  productId\n  swatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  finishSwatchGroups {\n    __typename\n    ...ProductSwatchGroupV2\n  }\n  __typename\n}\n\nfragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {\n  swatchGroupName\n  groupMaterial\n  swatches {\n    swatchId\n    title\n    imageUrl\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    onSale\n    optionCopy\n    __typename\n  }\n  __typename\n}\n\nfragment PersonalizeInfo on ProductPersonalizeInfo {\n  __typename\n  description\n  features\n  feeLow\n  feeHigh\n  monogrammable\n  personalizable\n  waiveMonogramFee\n  styles {\n    image\n    previewImage\n    displayName\n    id\n    minLength\n    maxLength\n    numberOfLines\n    __typename\n  }\n  fonts {\n    image\n    previewImage\n    displayName\n    id\n    borders {\n      image\n      minLength\n      maxLength\n      numberOfLines\n      id\n      displayName\n      __typename\n    }\n    __typename\n  }\n  colors {\n    image\n    id\n    displayName\n    __typename\n  }\n}\n\nfragment Swatch on ProductSwatch {\n  __typename\n  swatchId\n  title\n  sortPriority\n  swatchGroupIndex\n  details\n  colorize\n  imageUrl\n  primaryOptionId\n  secondaryOptionId\n  featuredPallete\n  relatedSwatchBeans {\n    swatchId\n    title\n    sortPriority\n    swatchGroupIndex\n    details\n    colorize\n    imageUrl\n    primaryOptionId\n    secondaryOptionId\n    optionCopy\n    options {\n      id\n      label\n      optionType\n      sortPriority\n      __typename\n    }\n    swatchImageSm {\n      url\n      width\n      height\n      __typename\n    }\n    swatchImageLg {\n      url\n      width\n      height\n      __typename\n    }\n    __typename\n  }\n  optionCopy\n  options {\n    id\n    label\n    optionType\n    sortPriority\n    __typename\n  }\n  swatchImageSm {\n    url\n    width\n    height\n    __typename\n  }\n  swatchImageLg {\n    url\n    width\n    height\n    __typename\n  }\n  onSale\n}\n\nfragment LineItem on ProductLineItem {\n  __typename\n  sku {\n    ...Sku\n    __typename\n  }\n  availableOptions {\n    type\n    sortPriority\n    optionTypeId\n    adapter\n    options {\n      id\n      type\n      value\n      name\n      sortPriority\n      status\n      message\n      usa_list_price_f\n      usa_member_price_f\n      usa_sale_price_f\n      can_list_price_f\n      can_member_price_f\n      can_sale_price_f\n      gbr_list_price_f\n      gbr_member_price_f\n      gbr_sale_price_f\n      __typename\n    }\n    __typename\n  }\n  image {\n    productId\n    imageUrl\n    __typename\n  }\n  customProductOptions {\n    customProductInformation {\n      customProductType\n      cwCustomProductCode\n      maxWidth\n      maxLength\n      minWidth\n      minLength\n      minDiameter\n      maxDiameter\n      maxControlLength\n      minControlLength\n      widthFractionGap\n      lengthFractionGap\n      diameterFractionGap\n      shape\n      mountTypes {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      controlTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      panels {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      linings {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlPositions {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      rollTypes {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      bracketColors {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      controlsAndTilts {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      tiltTypes {\n        id\n        value\n        status\n        message\n        continuousLoop\n        motorized\n        __typename\n      }\n      rugTrims {\n        id\n        value\n        status\n        message\n        code\n        __typename\n      }\n      finish {\n        id\n        value\n        status\n        message\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }\n}\n\nfragment Sku on ProductSku {\n  __typename\n  info {\n    name\n    longDescription\n    imageUrl\n    maxOrderQty\n    skuPriceInfo {\n      currencySymbol\n      listPrice\n      salePrice\n      memberPrice\n      tradePrice\n      contractPrice\n      memberOriginalPrice\n      nextgenDriven\n      onSale\n      onClearance\n      showMemberPrice\n      customProductErrorCode\n      customProductErrorMsg\n      __typename\n    }\n    canadaShippable\n    dropship\n    shipViaCode\n    hasCasingSkus\n    casingProduct\n    replacementCushionProduct\n    __typename\n  }\n  inventory {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    inventoryOnHand\n    __typename\n  }\n  delivery {\n    postalCode\n    needPostalCode\n    deliveryEstimateStatus\n    deliveryEstimate\n    freightExempt\n    shippingSurcharge\n    shippingSurchargeAmount\n    freightExemptMessage\n    deliveryStateMessage\n    lineId\n    __typename\n  }\n  restrictions {\n    spo\n    giftCertificate\n    serviceSku\n    monogram\n    monogramMessage\n    returnPolicyMessage\n    preBillMessage\n    additionalMessages {\n      curbsideMessage\n      assemblyMessage\n      giftCardMessage\n      railroadMessage\n      mattressFeeMessage\n      cancellableMessage\n      finalSaleMessage\n      __typename\n    }\n    countryRestrictions\n    mattressFeeLocation\n    __typename\n  }\n  fulfillmentEta {\n    lineId\n    fullSkuId\n    atgSkuId\n    postalCode\n    inventoryCode\n    inventoryStatus\n    inventoryRemaining\n    inventoryMessage\n    itemsInStockMessage\n    lineItemMessage\n    needPostalCode\n    postalCodeSpecific\n    preOrder\n    dateString\n    startDateRange\n    endDateRange\n    eta\n    lineType\n    __typename\n  }\n}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">Product</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query Product($productId: String!, $categoryId: String, $filter: String, $userType: String, $currencyCode: String, $siteId: String, $measureSystem: String, $locale: String, $postalCode: String) {
  product(
    productId: $productId
    categoryId: $categoryId
    filter: $filter
    userType: $userType
    currencyCode: $currencyCode
    siteId: $siteId
    measureSystem: $measureSystem
    locale: $locale
    postalCode: $postalCode
  ) {
    __typename
    ...ProductFields
  }
}

fragment ProductFields on Product {
  __typename
  ...BaseProductFields
  personalizeInfo {
    ...PersonalizeInfo
    __typename
  }
  productLineItem(filter: $filter) {
    ...LineItem
    __typename
  }
  category
  spoReturnMessageOverride
  spoReturnMessageOverrideKey
  swatchData(splitDisplay: true, filter: $filter, categoryId: $categoryId) {
    productId
    adapter
    splitDisplay
    faceoutSwatchId
    swatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      customSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    finishSwatchGroups {
      swatchGroupName
      groupMaterial
      swatchGroupIndex
      sortPriority
      stockedSwatches {
        ...Swatch
        __typename
      }
      __typename
    }
    __typename
  }
  customProductType
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  carouselProdctDetails {
    imageUrl
    displayName
    productId
    sale
    __typename
  }
  customProduct
  productOptionGroupBean {
    title
    optionsList
    __typename
  }
  swatchBean {
    swatchId
    primaryOptionId
    __typename
  }
  fullSkuId
  ctaLinks {
    layerType
    label
    leftCoordinate
    topCoordinate
    flyoutDirection
    htmlText
    shortText
    link
    modal
    path
    __typename
  }
  productConfiguration {
    __typename
    ...ProductConfiguration
  }
}

fragment BaseProductFields on Product {
  newPdpLayout
  collectionName
  collectionCategoryId
  autoplay
  preconfiguredSku
  isActive
  videoUrl
  endDate
  subName
  metaProduct
  longDescription
  merchMessage
  targetUrl
  emptyProduct
  metaProductComponent
  onSale
  giftCert
  featureList
  dimensions
  deliveryDimensions
  careInstructions
  fixedDisplaySku
  layout
  productListTitle
  id
  type
  displayName
  imageUrl
  galleryDescription
  newProduct
  template
  suppressSwatchCopy
  alternateImages {
    imageUrl
    caption
    video
    sbrId
    autoplay
    lifestyleImage
    sliderCss
    __typename
  }
  productAddonDescription
  productAddonMessage
  productAddonTitle
  productAddons {
    __typename
    ...ProductAddons
  }
  colorizeInfo {
    colorizable
    __typename
  }
  layout
  priceRangeDisplay {
    ...PriceRangeDisplay
    __typename
  }
  priceRangeMultiSkuDisplay {
    ...PriceRangeDisplay
    __typename
  }
  index
  rangeId
  parentCategoryId
  fileLinkUrls {
    link
    label
    __typename
  }
  instock {
    hasInStock
    showInStockButton
    showInStockMessage
    __typename
  }
  saleInfo {
    nonSaleSkus
    saleSkus
    totalSkus
    percentSaleSkus
    showSaleMessage
    __typename
  }
  sale {
    hasSale
    showSaleButton
    showSaleMessage
    __typename
  }
  uxAttributes {
    productType
    triggerSwatchImage
    giftCert
    __typename
  }
  swatchesToBuy {
    atgSkuId
    swatchId
    productId
    fullSkuId
    __typename
  }
  customProduct
  rhr
  showAllOptions
  hideOptionSet
  pdpImageLayout
  pdpCrop
  serviceSkuProduct
  nextGenDriven
  multiSkuAdditionalMessage
  seoDescription
  keywords
  relatedProductIds
  saleSwatchId
  productMessage
  swatch
  __typename
}

fragment PriceRangeDisplay on ProductPriceRangeDisplay {
  __typename
  rangeType
  isUnavailable
  isSale
  showMemberPrice
  skulowestListPrice
  skulowestMemberPrice
  skulowestSalePrice
  nextGenDriven
  nextGenDrivenOnSale
  listPrices
  salePrices
  memberPrices
  salePriceLabel
  priceMessage
  priceMessagePrice
  listPriceLabel
  memberPriceLabel
  strikePriceLabel
  currencySymbol
  overridePriceLabel
  overrideLineLevelPriceLabel
  overrideLowestSkuListPrice
  overrideLowestSkuSalePrice
  overrideLowestSkuMemberPrice
  priceFilter
  hasOnlyOneSku
}

fragment ProductAddons on ProductAddons {
  productAddonsInfo {
    id
    customProduct
    imageUrl
    productAddonTitle
    productAddonMessage
    productAddonDescription
    onSale
    longDescription
    displayName
    isActive
    saleInfo {
      saleSkus
      totalSkus
      percentSaleSkus
      showSaleMessage
      __typename
    }
    priceRangeDisplay {
      rangeType
      isUnavailable
      isSale
      showMemberPrice
      skulowestListPrice
      skulowestMemberPrice
      skulowestSalePrice
      nextGenDriven
      nextGenDrivenOnSale
      listPrices
      salePrices
      memberPrices
      salePriceLabel
      priceMessage
      priceMessagePrice
      listPriceLabel
      memberPriceLabel
      strikePriceLabel
      currencySymbol
      hasOnlyOneSku
      __typename
    }
    colorizeInfo {
      colorizable
      __typename
    }
    alternateImages {
      imageUrl
      caption
      video
      sbrId
      __typename
    }
    productLineItem {
      availableOptions {
        type
        sortPriority
        optionTypeId
        options {
          id
          type
          value
          sortPriority
          status
          message
          __typename
        }
        __typename
      }
      image {
        productId
        imageUrl
        __typename
      }
      __typename
    }
    imageUrl
    __typename
    productConfiguration {
      __typename
      ...ProductConfiguration
    }
  }
  __typename
}

fragment ProductConfiguration on ProductInfoV3 {
  productId
  optionMatrix
  instockOptionMatrix
  preselectedOptions
  default_preselected_options
  default_instock_preselected_options
  swatchData {
    __typename
    ...ProductSwatchV2
  }
  optionDetails {
    type
    options {
      id
      typeId
      value
      name
      __typename
    }
    __typename
  }
  __typename
}

fragment ProductSwatchV2 on ProductSwatchV2 {
  productId
  swatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  finishSwatchGroups {
    __typename
    ...ProductSwatchGroupV2
  }
  __typename
}

fragment ProductSwatchGroupV2 on ProductSwatchGroupV2 {
  swatchGroupName
  groupMaterial
  swatches {
    swatchId
    title
    imageUrl
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    onSale
    optionCopy
    __typename
  }
  __typename
}

fragment PersonalizeInfo on ProductPersonalizeInfo {
  __typename
  description
  features
  feeLow
  feeHigh
  monogrammable
  personalizable
  waiveMonogramFee
  styles {
    image
    previewImage
    displayName
    id
    minLength
    maxLength
    numberOfLines
    __typename
  }
  fonts {
    image
    previewImage
    displayName
    id
    borders {
      image
      minLength
      maxLength
      numberOfLines
      id
      displayName
      __typename
    }
    __typename
  }
  colors {
    image
    id
    displayName
    __typename
  }
}

fragment Swatch on ProductSwatch {
  __typename
  swatchId
  title
  sortPriority
  swatchGroupIndex
  details
  colorize
  imageUrl
  primaryOptionId
  secondaryOptionId
  featuredPallete
  relatedSwatchBeans {
    swatchId
    title
    sortPriority
    swatchGroupIndex
    details
    colorize
    imageUrl
    primaryOptionId
    secondaryOptionId
    optionCopy
    options {
      id
      label
      optionType
      sortPriority
      __typename
    }
    swatchImageSm {
      url
      width
      height
      __typename
    }
    swatchImageLg {
      url
      width
      height
      __typename
    }
    __typename
  }
  optionCopy
  options {
    id
    label
    optionType
    sortPriority
    __typename
  }
  swatchImageSm {
    url
    width
    height
    __typename
  }
  swatchImageLg {
    url
    width
    height
    __typename
  }
  onSale
}

fragment LineItem on ProductLineItem {
  __typename
  sku {
    ...Sku
    __typename
  }
  availableOptions {
    type
    sortPriority
    optionTypeId
    adapter
    options {
      id
      type
      value
      name
      sortPriority
      status
      message
      usa_list_price_f
      usa_member_price_f
      usa_sale_price_f
      can_list_price_f
      can_member_price_f
      can_sale_price_f
      gbr_list_price_f
      gbr_member_price_f
      gbr_sale_price_f
      __typename
    }
    __typename
  }
  image {
    productId
    imageUrl
    __typename
  }
  customProductOptions {
    customProductInformation {
      customProductType
      cwCustomProductCode
      maxWidth
      maxLength
      minWidth
      minLength
      minDiameter
      maxDiameter
      maxControlLength
      minControlLength
      widthFractionGap
      lengthFractionGap
      diameterFractionGap
      shape
      mountTypes {
        id
        value
        status
        message
        code
        __typename
      }
      controlTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      panels {
        id
        value
        status
        message
        code
        __typename
      }
      linings {
        id
        value
        status
        message
        __typename
      }
      controlPositions {
        id
        value
        status
        message
        __typename
      }
      rollTypes {
        id
        value
        status
        message
        __typename
      }
      bracketColors {
        id
        value
        status
        message
        __typename
      }
      controlsAndTilts {
        id
        value
        status
        message
        __typename
      }
      tiltTypes {
        id
        value
        status
        message
        continuousLoop
        motorized
        __typename
      }
      rugTrims {
        id
        value
        status
        message
        code
        __typename
      }
      finish {
        id
        value
        status
        message
        __typename
      }
      __typename
    }
    __typename
  }
}

fragment Sku on ProductSku {
  __typename
  info {
    name
    longDescription
    imageUrl
    maxOrderQty
    skuPriceInfo {
      currencySymbol
      listPrice
      salePrice
      memberPrice
      tradePrice
      contractPrice
      memberOriginalPrice
      nextgenDriven
      onSale
      onClearance
      showMemberPrice
      customProductErrorCode
      customProductErrorMsg
      __typename
    }
    canadaShippable
    dropship
    shipViaCode
    hasCasingSkus
    casingProduct
    replacementCushionProduct
    __typename
  }
  inventory {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    inventoryOnHand
    __typename
  }
  delivery {
    postalCode
    needPostalCode
    deliveryEstimateStatus
    deliveryEstimate
    freightExempt
    shippingSurcharge
    shippingSurchargeAmount
    freightExemptMessage
    deliveryStateMessage
    lineId
    __typename
  }
  restrictions {
    spo
    giftCertificate
    serviceSku
    monogram
    monogramMessage
    returnPolicyMessage
    preBillMessage
    additionalMessages {
      curbsideMessage
      assemblyMessage
      giftCardMessage
      railroadMessage
      mattressFeeMessage
      cancellableMessage
      finalSaleMessage
      __typename
    }
    countryRestrictions
    mattressFeeLocation
    __typename
  }
  fulfillmentEta {
    lineId
    fullSkuId
    atgSkuId
    postalCode
    inventoryCode
    inventoryStatus
    inventoryRemaining
    inventoryMessage
    itemsInStockMessage
    lineItemMessage
    needPostalCode
    postalCodeSpecific
    preOrder
    dateString
    startDateRange
    endDateRange
    eta
    lineType
    __typename
  }
}</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;filter&quot;: null,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOptions" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">availableOptions</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.productLineItem.availableOptions[*]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="optionIds" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">availableOptions1</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.product.productLineItem.availableOptions[*].options[*].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${availableOptions_matchNr}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Get the number of matches from availableOptions
def matchCount = Integer.parseInt(vars.get(&quot;availableOptions_matchNr&quot;))

// Check if there is at least one available option
if (matchCount &gt; 0) {
    // Initialize an empty list to store the option ids
    def optionIds = []

    // Loop through each match
    for (int i = 0; i &lt; matchCount; i++) {
        // Build the JSON path for each option id
        def jsonPath = &quot;$.data.product.productLineItem.availableOptions[${i}].options[0].id&quot;

        // Extract the option id using the JSON path
        def optionId = vars.get(jsonPath)

        // Add the option id to the list
        optionIds.add(optionId)
    }

    // Create a comma-separated string from the list
    def commaSeparatedIds = optionIds.join(&apos;,&apos;)

    // Set the comma-separated ids as a JMeter variable for the next request
    vars.put(&quot;selectedOptionIds&quot;, commaSeparatedIds)
} else {
    // No available options, set a default value or handle it as needed
    vars.put(&quot;commaSeparatedIds&quot;, &quot;&quot;)
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="availableOptions" enabled="false">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">// Assuming you have variables availableOptions and availableOptions1
def var1 = vars.get(&quot;availableOptions&quot;)
def var2 = vars.get(&quot;availableOptions1&quot;)

// Concatenate the values with a comma
def commaSeparatedValues = var1 + &quot;,&quot; + var2

// Set the new variable with the comma-separated values
vars.put(&quot;selectedOptionIds&quot;, commaSeparatedValues)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="ProductImage" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">ProductImage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{&quot;productId&quot;:&quot;${productId}&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{&quot;productId&quot;:&quot;${productId}&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemQueryV3" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">LineItemQueryV3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
	&quot;productId&quot;: &quot;${productId}&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">LineItemQueryV3</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;productId&quot;: &quot;${productId}&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetSku" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">GetSku</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">GetSku</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-en&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">GetSku</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="&quot;referer&quot;" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemSkuQuery" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">LineItemSkuQuery</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">LineItemSkuQuery</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">LineItemSkuQuery</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="&quot;referer&quot;" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="Scope.variable">availableOption</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SkuAvailabilityStatus" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">operationName</stringProp>
                  <stringProp name="Argument.value">SkuAvailabilityStatus</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">variables</stringProp>
                  <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="GraphQLHTTPSampler.operationName">SkuAvailabilityStatus</stringProp>
            <stringProp name="GraphQLHTTPSampler.query">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
            <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-request-id" elementType="Header">
                  <stringProp name="Header.name">x-request-id</stringProp>
                  <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">cors</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="apollographql-client-name" elementType="Header">
                  <stringProp name="Header.name">apollographql-client-name</stringProp>
                  <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">same-origin</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="x-operation" elementType="Header">
                  <stringProp name="Header.name">x-operation</stringProp>
                  <stringProp name="Header.value">SkuAvailabilityStatus</stringProp>
                </elementProp>
                <elementProp name="Client-Origin" elementType="Header">
                  <stringProp name="Header.name">Client-Origin</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="authorization" elementType="Header">
                  <stringProp name="Header.name">authorization</stringProp>
                  <stringProp name="Header.value"></stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Dest" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                  <stringProp name="Header.value">empty</stringProp>
                </elementProp>
                <elementProp name="&quot;referer&quot;" elementType="Header">
                  <stringProp name="Header.name">referer</stringProp>
                  <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - availableOptions_matchNr" enabled="false">
            <stringProp name="IfController.condition">${__jexl3( ${availableOptions_matchNr} &gt; 0,)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
              <stringProp name="ForeachController.inputVal">availableOptions</stringProp>
              <stringProp name="ForeachController.returnVal">availableOptions</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">0</stringProp>
                <stringProp name="CounterConfig.end">${availableOptions_matchNr}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">Counter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.19_ProductImage_MainProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ],
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;locale&quot;: &quot;en-US&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">-${__counter(,coun)}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">ProductImage</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="6.20_LineItemQuery-3_MainProduct" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions ) { ...LineItemLite __typename } } fragment LineItemLite on ProductLineItem { __typename availableOptions { type sortPriority optionTypeId adapter options { id type value name sortPriority status message usa_list_price_f usa_member_price_f usa_sale_price_f can_list_price_f can_member_price_f can_sale_price_f gbr_list_price_f gbr_member_price_f gbr_sale_price_f __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-us&quot;,
  &quot;shouldFetchSku&quot;: false,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">-${coun}</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com/location-select</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-concierge-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://${env}.rhnonprod.com</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:96.0) Gecko/20100101 Firefox/96.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="availableOption" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOption" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOption</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[${Counter}].options.[?(@.status == &apos;selected&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="true">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]
def counter = vars[&quot;Counter&quot;].toInteger()

if (counter == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (counter &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (counter == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (counter &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionIds&quot;, selectedOptionIds)</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Array" enabled="false">
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="script">def selectedOptionIds = vars[&quot;selectedOptionIds&quot;] ?: &quot;&quot;
def availableOption = vars[&quot;availableOption&quot;]
def selectedOption = vars[&quot;selectedOption&quot;]

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds = availableOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + availableOption
}

if (vars[&quot;Counter&quot;].toInteger() == 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds = selectedOption
}

if (vars[&quot;Counter&quot;].toInteger() &gt; 0 &amp;&amp; availableOption == &quot;NA&quot; &amp;&amp; selectedOption != &quot;NA&quot;) {
    selectedOptionIds += &apos;&quot;,&quot;&apos; + selectedOption
}

vars.put(&quot;Array&quot;, selectedOptionIds)
vars.put(&quot;selectedOptionId&quot;, selectedOptionIds)</stringProp>
                  <stringProp name="scriptLanguage">groovy</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="ProductImage" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">ProductImage</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{&quot;productId&quot;:&quot;${productId}&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">ProductImage</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query ProductImage($productId: String!, $imageKey: String, $fullSkuId: String, $swatchIds: [String!], $selectedOptionIds: [String!], $siteId: String, $locale: String) { productImage( productId: $productId imageKey: $imageKey fullSkuId: $fullSkuId swatchIds: $swatchIds selectedOptionIds: $selectedOptionIds siteId: $siteId locale: $locale ) { productId imageUrl __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{&quot;productId&quot;:&quot;${productId}&quot;,&quot;userType&quot;:&quot;ANONYMOUS&quot;,&quot;monogrammable&quot;:false,&quot;postalCode&quot;:&quot;94925&quot;,&quot;currencyCode&quot;:&quot;USA&quot;,&quot;qty&quot;:1,&quot;filter&quot;:null,&quot;siteId&quot;:&quot;RH&quot;,&quot;measureSystem&quot;:&quot;imperial&quot;,&quot;locale&quot;:&quot;en-en&quot;,&quot;shouldFetchSku&quot;:false,&quot;nextGenDriven&quot;:true,&quot;shouldFetchCustomProductOptions&quot;:false,&quot;selectedOptionIds&quot;:[&quot;${selectedOptionIds}&quot;]}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemQueryV3" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemQueryV3</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
	&quot;productId&quot;: &quot;prod25570333&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemQueryV3</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemQueryV3($productId: String!, $selectedOptionIds: [String!], $selectedSwatches: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $inStockOnly: Boolean) { productLineItem( productId: $productId selectedOptionIds: $selectedOptionIds selectedSwatches: $selectedSwatches selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions inStockOnly: $inStockOnly ) { ...LineItemLiteV3 __typename } } fragment LineItemLiteV3 on ProductLineItem { __typename availableOptionsStatus { allOptions { type sortPriority adapter optionTypeId options __typename } __typename } customProductOptions { customProductInformation { customProductType cwCustomProductCode maxWidth maxLength minWidth minLength minDiameter maxDiameter maxControlLength minControlLength widthFractionGap lengthFractionGap diameterFractionGap shape mountTypes { id value status message code __typename } controlTypes { id value status message continuousLoop motorized __typename } panels { id value status message code __typename } linings { id value status message __typename } controlPositions { id value status message __typename } rollTypes { id value status message __typename } bracketColors { id value status message __typename } controlsAndTilts { id value status message __typename } tiltTypes { id value status message continuousLoop motorized __typename } rugTrims { id value status message code __typename } finish { id value status message __typename } __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
	&quot;productId&quot;: &quot;prod25570333&quot;,
	&quot;userType&quot;: &quot;ANONYMOUS&quot;,
	&quot;monogrammable&quot;: false,
	&quot;postalCode&quot;: &quot;94925&quot;,
	&quot;currencyCode&quot;: &quot;USA&quot;,
	&quot;qty&quot;: 1,
	&quot;filter&quot;: null,
	&quot;siteId&quot;: &quot;RH&quot;,
	&quot;measureSystem&quot;: &quot;imperial&quot;,
	&quot;locale&quot;: &quot;en-en&quot;,
	&quot;shouldFetchSku&quot;: false,
	&quot;nextGenDriven&quot;: true,
	&quot;shouldFetchCustomProductOptions&quot;: false,
	&quot;selectedOptionIds&quot;: [
		&quot;${selectedOptionIds}&quot;
	]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="selectedOptionIds" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">selectedOptionIds</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.productLineItem.availableOptions.[0].options.[?(@.status == &apos;available&apos;)].id</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="GetSku" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">GetSku</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">GetSku</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query GetSku($locale: String!, $postalCode: String!, $siteId: String!, $productId: String!, $currencyCode: String, $selectedOptionIds: [String!], $userType: String, $isCustom: Boolean, $qty: Int, $monogrammable: Boolean, $filter: String, $measureSystem: String, $continuousLoop: Boolean, $motorized: Boolean, $width: Float, $length: Float) { getSku( locale: $locale postalCode: $postalCode siteId: $siteId productId: $productId currencyCode: $currencyCode selectedOptionIds: $selectedOptionIds userType: $userType isCustom: $isCustom qty: $qty monogrammable: $monogrammable filter: $filter measureSystem: $measureSystem continuousLoop: $continuousLoop motorized: $motorized width: $width length: $length ) { fullSkuId components { fullSkuId productId quantity __typename } __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 1,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;isCustom&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}	</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">GetSku</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="LineItemSkuQuery_MainProduct" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">LineItemSkuQuery</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">LineItemSkuQuery</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query LineItemSkuQuery($productId: String!, $selectedOptionIds: [String!], $selectedTrimOptionIds: [String!], $userType: String, $postalCode: String, $currencyCode: String, $fullSkuId: String, $monogrammable: Boolean, $isMonogrammed: Boolean, $qty: Int, $filter: String, $width: Float, $length: Float, $diameter: Float, $continuousLoop: Boolean, $motorized: Boolean, $isCustom: Boolean, $siteId: String, $measureSystem: String, $locale: String, $nextGenDriven: Boolean, $shouldFetchSku: Boolean, $shouldFetchCustomProductOptions: Boolean, $shouldFetchImage: Boolean, $newPdpLayout: Boolean) { lineItemSku( productId: $productId selectedOptionIds: $selectedOptionIds selectedTrimOptionIds: $selectedTrimOptionIds postalCode: $postalCode currencyCode: $currencyCode fullSkuId: $fullSkuId userType: $userType monogrammable: $monogrammable isMonogrammed: $isMonogrammed qty: $qty filter: $filter width: $width length: $length diameter: $diameter continuousLoop: $continuousLoop motorized: $motorized isCustom: $isCustom siteId: $siteId measureSystem: $measureSystem locale: $locale nextGenDriven: $nextGenDriven shouldFetchSku: $shouldFetchSku shouldFetchCustomProductOptions: $shouldFetchCustomProductOptions shouldFetchImage: $shouldFetchImage newPdpLayout: $newPdpLayout ) { ...LineItemSkuDetails __typename } } fragment LineItemSkuDetails on ProductSku { ...Sku __typename } fragment Sku on ProductSku { __typename info { name longDescription imageUrl maxOrderQty skuPriceInfo { currencySymbol listPrice salePrice memberPrice tradePrice contractPrice memberOriginalPrice nextgenDriven onSale onClearance showMemberPrice customProductErrorCode customProductErrorMsg __typename } canadaShippable dropship shipViaCode hasCasingSkus casingProduct replacementCushionProduct __typename } inventory { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString inventoryOnHand __typename } delivery { postalCode needPostalCode deliveryEstimateStatus deliveryEstimate freightExempt shippingSurcharge shippingSurchargeAmount freightExemptMessage deliveryStateMessage lineId __typename } restrictions { spo giftCertificate serviceSku monogram monogramMessage returnPolicyMessage preBillMessage additionalMessages { curbsideMessage assemblyMessage giftCardMessage railroadMessage mattressFeeMessage cancellableMessage finalSaleMessage __typename } countryRestrictions mattressFeeLocation __typename } fulfillmentEta { lineId fullSkuId atgSkuId postalCode inventoryCode inventoryStatus inventoryRemaining inventoryMessage itemsInStockMessage lineItemMessage needPostalCode postalCodeSpecific preOrder dateString startDateRange endDateRange eta lineType __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;productId&quot;: &quot;${productId}&quot;,
  &quot;userType&quot;: &quot;ANONYMOUS&quot;,
  &quot;monogrammable&quot;: false,
  &quot;postalCode&quot;: &quot;94925-1214&quot;,
  &quot;currencyCode&quot;: &quot;USA&quot;,
  &quot;qty&quot;: 2,
  &quot;filter&quot;: null,
  &quot;siteId&quot;: &quot;RH&quot;,
  &quot;measureSystem&quot;: &quot;imperial&quot;,
  &quot;locale&quot;: &quot;en-US&quot;,
  &quot;shouldFetchSku&quot;: true,
  &quot;nextGenDriven&quot;: true,
  &quot;shouldFetchCustomProductOptions&quot;: false,
  &quot;selectedOptionIds&quot;: [
    &quot;${selectedOptionIds}&quot;
  ]
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">LineItemSkuQuery</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="fullSkuId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..fullSkuId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="inventoryRemaining" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..inventoryRemaining</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="Scope.variable">availableOption</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NA</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="SkuAvailabilityStatus" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="operationName" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">operationName</stringProp>
                      <stringProp name="Argument.value">SkuAvailabilityStatus</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="query" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">query</stringProp>
                      <stringProp name="Argument.value">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="variables" elementType="HTTPArgument" enabled="true">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.name">variables</stringProp>
                      <stringProp name="Argument.value">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${path}/graphql</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="GraphQLHTTPSampler.operationName">SkuAvailabilityStatus</stringProp>
                <stringProp name="GraphQLHTTPSampler.query">query SkuAvailabilityStatus($sku: String!, $country: String, $postalCode: String) { skuAvailabilityStatus(sku: $sku, country: $country, postalCode: $postalCode) { sku maxQuantity quantityRequested availabilityStatus country postalCode __typename } }</stringProp>
                <stringProp name="GraphQLHTTPSampler.variables">{
  &quot;country&quot;: &quot;US&quot;,
  &quot;sku&quot;: &quot;${fullSkuId}&quot;
}</stringProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="x-request-id" elementType="Header">
                      <stringProp name="Header.name">x-request-id</stringProp>
                      <stringProp name="Header.value">${__RandomString(32,0123456789abcdef,)}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Mode" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                      <stringProp name="Header.value">cors</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="apollographql-client-name" elementType="Header">
                      <stringProp name="Header.name">apollographql-client-name</stringProp>
                      <stringProp name="Header.value">rh-estore-client-${env}</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Site" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                      <stringProp name="Header.value">same-origin</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="x-operation" elementType="Header">
                      <stringProp name="Header.name">x-operation</stringProp>
                      <stringProp name="Header.value">SkuAvailabilityStatus</stringProp>
                    </elementProp>
                    <elementProp name="Client-Origin" elementType="Header">
                      <stringProp name="Header.name">Client-Origin</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value"></stringProp>
                    </elementProp>
                    <elementProp name="content-type" elementType="Header">
                      <stringProp name="Header.name">content-type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:104.0) Gecko/20100101 Firefox/104.0</stringProp>
                    </elementProp>
                    <elementProp name="Sec-Fetch-Dest" elementType="Header">
                      <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                      <stringProp name="Header.value">empty</stringProp>
                    </elementProp>
                    <elementProp name="&quot;referer&quot;" elementType="Header">
                      <stringProp name="Header.name">referer</stringProp>
                      <stringProp name="Header.value">https://stg2.rhnonprod.com/us/en/catalog/product/product.jsp?productId=${productId}&amp;sale=false&amp;src=rel</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Fusion" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">8</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Fusion.csv" enabled="true">
          <stringProp name="filename">Fusion-Fusion.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">Path</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fusion-Search" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">restorationhw-a.b.lucidworks.cloud</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/apps/RH/query/search_sku?${Path}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments"> restorationhw-551.b.lucidworks.cloud</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic cnNoYXJtYUByaC5jb206NThKWVdGRzd1ZjZIeWt3Qg==</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ResponseTimesPercentilesGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Response Times Percentiles" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
